ROUTINE DBSIZE [Type=INT]
DBSIZE ; Incremental Backup Size Estimation Utility ; JO 11/13/15
 /*
 +--------------------------------------------------------+
 | Copyright 1986-2015 by InterSystems Corporation,       |
 | Cambridge, Massachusetts, U.S.A.                       |
 | All rights reserved.                                   |
 |                                                        |
 | Confidential, unpublished property of InterSystems.    |
 |                                                        |
 | This media contains an authorized copy or copies       |
 | of material copyrighted by InterSystems and is the     |
 | confidential, unpublished property of InterSystems.    |
 | This copyright notice and any other copyright notices  |
 | included in machine readable copies must be reproduced |
 | on all authorized copies.                              |
 +--------------------------------------------------------+
 */
 N QUIET,NOINPUT,INTERNAL,TYPE
 N TOTDBLKS,NUMDIRS,TOTMTBYTES,TOTMTBLKS,TOTFLBYTES,TOTFLBLKS,PREALBLKS
 S (QUIET,NOINPUT,INTERNAL)=0
 S (TOTDBLKS,NUMDIRS,TOTMTBYTES,TOTMTBLKS,TOTFLBYTES,TOTFLBLKS,PREALBLKS)=0
 ;  Call Point for INT tag.
TOP N logfile,FULL,PARTIAL,NOCHANGE,CLEAR,LINE,DIRNAM,DIR,OK
 N ibEOT,ibOfflin,ibDevFul,ibInErr,ibOutErr,ibNoIND,ibNoDAT,MaxPASS
 N FORCE,NOFORCE,TOTOVRHD,TOTSIZE,TEMP1,TEMP2,DBSIZE,BLKSIZ
 n BUWARNING
 n rc,cnt,list,i,del1,del2,db,dbname,msg
 ;
 ;  Initialize Variables
 ;
 n dlmlock,rc ;JO1991
 S (TOTOVRHD,TOTSIZE,BLKSIZ)=0,logfile=""
 D INITVARS^DBACK
 D msgouta("!,?15,""Incremental Backup Size Estimator"",!!",FORCE)
 ;
 ;  This utility cannot be run at the same time as DBACK because
 ;        it uses the database bitmaps.
 ;  NOTE: LOCK + and LOCK - are used because the internal tag may
 ;        some day be used by DBACK.
 ;
 s rc=$$getLock^DBACK(.dlmlock)
 if '+rc D  S TOTDBLKS=-1 Q
 . D msgouta("""Backup is currently running. "",!",FORCE)
 S $ZT="ERR^"_$ZN
 ;
 ;  Get the Type of Backup that will be performed.
 ;
TYPE I 'NOINPUT D GETTYP^DBACKA I TYPE="" do releaseLock^DBACK(.dlmlock) S TOTDBLKS=-1 Q
 I 'NOINPUT S TYPE=$S(TYPE["Full":FULL,TYPE["Cum":CUMINC,1:PARTIAL)
 q:'$$InitDirList^DBACKA(0)
 ;
 ;  Get the list of directories from the ^SYS global.
 ;
 S TEMP1=NOINPUT,TEMP2=INTERNAL S (NOINPUT,INTERNAL)=1
 D GETDIRS^DBACKA 
 S NOINPUT=TEMP1,INTERNAL=TEMP2
 ;
 ;  Process all the directories
 ;
 I 'DIRNAM D  Q
 . D msgouta("""No Directories Selected."",!",FORCE)
 . do releaseLock^DBACK(.dlmlock)
 . S TOTDBLKS=-1
 E  D
 . s LINE=$s(TYPE=FULL:" In-Use",1:"Modified")
 . d msgouta("!?57,"""_LINE_""",?67,""Block""",FORCE)
 . d msgouta("!?5,""Directory"",?58,""Blocks"",?68,""Size"",!!",FORCE)
 . ; Process all the directories read from the ^SYS global.
 . s DIR="" f  s DIR=$o(DIRNAM(DIR)) q:DIR=""  d
 . . s DBSIZE=$$ONEDIR(DIR,TYPE,.NUMDIRS,.BLKSIZ)
 . . s TOTDBLKS=TOTDBLKS+DBSIZE ; Sum database blocks
 . . s TOTSIZE=TOTSIZE+(DBSIZE*BLKSIZ) ; Sum 2KB backup blocks
 . . s TOTSIZE=TOTSIZE+3 ; Add overhead for labels for 3 passes
 s TOTSIZE=TOTSIZE+1 ; Overhead for journal marker record
 s TOTOVRHD=2  ; Media blocks for archive header and trailer
DONE ;
 ;  Cleanup and display total information
 ;
 do releaseLock^DBACK(.dlmlock)
 ;
 ;  Total Database Blocks
 D msgouta("?50,""--------------"",!",FORCE)
 D msgouta("?5,""Total number of database blocks: """,FORCE)
 D msgouta("?50,$J($FN("_TOTDBLKS_","","",0),14),!",FORCE)
 ;
 S TOTFLBLKS=$$OUTSIZE(TOTSIZE,TOTOVRHD,0),TOTFLBYTES=TOTFLBLKS*512
 D msgouta("!,""Total backup size, including overhead of volume and pass labels:"",!",FORCE)
 ;  Total for RMS file.
 i ($zversion(1)=1) d
 . D msgouta("!?5,""For an RMS file:""",FORCE)
 . D msgouta("!?10,""Number of 512-byte blocks:  """,FORCE)
 . D msgouta("$FN("_TOTFLBLKS_","","",0)",FORCE)
 . D msgouta("!?10,""Pre-allocation quantity:    """,FORCE)
 . S PREALBLKS=$$ALLOCQTY(TOTFLBLKS)
 . D msgouta("$FN("_PREALBLKS_","","",0),!",FORCE)
 ;
 ;  Total for UNIX or other byte-stream-oriented file.
 i '($zversion(1)=1) d
 . D msgouta("!?5,""For a disk file:""",FORCE)
 . D msgouta("!?10,""Number of 512-byte blocks:  """,FORCE)
 . D msgouta("$FN("_TOTFLBLKS_","","",0),""  (""",FORCE)
 . D msgouta("$FN("_TOTFLBYTES_","","",0),"" bytes)"",!",FORCE)
 . S PREALBLKS=TOTFLBLKS
 ;
 ;  Total for MagTape.
 S TOTMTBLKS=$$OUTSIZE(TOTSIZE,TOTOVRHD,1),TOTMTBYTES=TOTMTBLKS*58*1024
 D msgouta("!?5,""For magnetic media:""",FORCE)
 D msgouta("!?10,""Number of "_58_"KB blocks:  """,FORCE)
 D msgouta("$FN("_TOTMTBLKS_","","",0),""  (""",FORCE)
 D msgouta("$FN("_TOTMTBYTES_","","",0),"" bytes)"",!",FORCE)
 Q
ERR ;
 S $ZT=""
 do releaseLock^DBACK(.dlmlock)
 ;  No matter how we got here we want to output the error message.
 ;    Let's not leave the user totally in the dark while using the
 ;    extrinsic function.
 S (INTERNAL,QUIET)=0 D msgouta("!,""[Error: "_$ZE_"]"",!",FORCE)
 S TOTDBLKS=-1
 Q
 ;
 ;**********
 ;  Extrinsic Function to return the total number of database blocks
 ;     that will be output to the file/tape for the TYPE of backup.
 ;        TYPE values:
 ;             1 = INCREMENTAL
 ;             2 = FULL
 ;             3 = CUMULATIVE INCREMENTAL
 ;     On Exit:
 ;        String Containing seven pieces separated by "^"
 ;           Piece 1:  Number of database blocks for backup
 ;                        (-1 if error during processing or invalid
 ;                        parameter)
 ;           Piece 2:  Number of directories to be backed up
 ;           Piece 3:  Number of bytes for magnetic media
 ;                        (not including inter-record gaps)
 ;           Piece 4:  Number of blocks for magnetic media
 ;           Piece 5:  Number of bytes for a disk file
 ;           Piece 6:  Number of 512-byte blocks for a disk file
 ;           Piece 7:  Pre-allocation estimate of disk file blocks
 ;                        (for use under OpenVMS)
 ;
 ;**********
INT(TYPE) 
 N QUIET,NOINPUT,INTERNAL
 N TOTDBLKS,NUMDIRS,TOTMTBYTES,TOTMTBLKS,TOTFLBYTES,TOTFLBLKS,PREALBLKS
 S (QUIET,NOINPUT,INTERNAL)=1
 S (TOTDBLKS,NUMDIRS,TOTMTBYTES,TOTMTBLKS,TOTFLBYTES,TOTFLBLKS,PREALBLKS)=0
 I (TYPE>3)!(TYPE<1) S TOTDBLKS=-1
 E  D TOP
 Q TOTDBLKS_"^"_NUMDIRS_"^"_TOTMTBYTES_"^"_TOTMTBLKS_"^"_TOTFLBYTES_"^"_TOTFLBLKS_"^"_PREALBLKS
 ;
 ;*****************************
 ;  Subroutines and Functions *
 ;*****************************
 ;**********
 ; ONEDIR() - Calculates and returns the raw number of blocks that
 ;       will be written to the backup device.  If messages are enabled
 ;       the results of the calculations will be displayed.
 ;       It also updates the counter NUMDIRS.
 ;**********
ONEDIR(DIR,TYPE,NUMDIRS,BLKSIZ)   ;LRS735
 N M,INC,IND,INE,INF,SIZE,RC
 S NUMDIRS=NUMDIRS+1
 D SetNames^DBACKA(DIR)
 D msgouta(""""_DIR_"""",FORCE)
 ;   Ensure that the scratch bitmap is clear.
 if TYPE=FULL {
 	S RC=$$INLOGOR(DIR,-1,0,3)
   	; Don't count the directory if we can't access its bitmaps.
   	I RC<0 {
	   S NUMDIRS=NUMDIRS-1
	   S SIZE=0
    } else {
	   S SIZE=RC
    }
 } else {
 	S RC=$$INLOGOR(DIR,2,1,0)
 	S RC=$$INLOGOR(DIR,1,2,0)
 	;   Based on the type of backup, INLOGOR the appropriate bitmap.
 	I TYPE=CUMINC {
	 	S RC=$$INLOGOR(DIR,0,2,0)
 	}
 	S RC=$$INLOGOR(DIR,3,2,0)
 	; Don't count the directory if we can't access its bitmaps.
 	I RC<0 S NUMDIRS=NUMDIRS-1
 	; Count the number of bits set in the scratch bitmap.
 	S SIZE=$$INLOGOR(DIR,2,2,3)
 	;   Check for errors.
 	I SIZE=-2 S SIZE=0 ; If bitmaps were not acessible, assume ZERO.
    ; clean up the backup bitmap so we don't include
    ; these blocks during the next backup
    S RC=$$INLOGOR(DIR,2,2,1)
 }
 i SIZE'<0 {
    ; Get the database block size in 2KB units
    s RC=$zu(49,DIR),BLKSIZ=$s(RC<0:0,1:$p(RC,",",2)\2048)
    s LINE=$FN(SIZE,",",0),M=64-$L(LINE)
    d msgouta($S($X<M:"?",1:"!?")_M_","""_LINE_"""",FORCE)
    d msgouta("$J(""("_(BLKSIZ*2)_"KB)"",8),!",FORCE)
 }
 i SIZE<0,SIZE'=-2 D msgouta("?60,"" [I/O Error]"",!",FORCE)
 Q $S(SIZE<0:0,1:SIZE)  ; Return the count.
 ;
 ;**********
 ; OUTSIZE()  - Return the file size based on BLOCKS number of 2KB
 ;               blocks being on the device type. The final result
 ;               is rounded up to the next hardware block boundary.
 ;         INPUT:
 ;               BLOCKS = Number of 2K blocks of backup
 ;               OVRHEAD = number of media blocks
 ;                         (archive header and trailer)
 ;               DEVTYP=0 RMS FILE.
 ;               DEVTYP=1 MAGTAPE.
 ;**********
OUTSIZE(BLOCKS,OVRHEAD,DEVTYP) ;
 n outdata,outblks
 s outdata=$s($g(DEVTYP):56,1:64) ; Not counting header & trailer
 s outblks=BLOCKS*2+outdata-1\outdata+OVRHEAD
 ; If the DEVTYP is disk, return number of 512-byte blocks
 ; If it is magtape, just return number of physical blocks
 q $s($g(DEVTYP):outblks,1:(outdata+2)*outblks*2)
 ;
 ;**********
 ; ALLOCQTY() - Calculates the Allocation quantity that will be
 ;              used based on the NUMBER of BLOCKS that the file
 ;              will be (including Header and Trailer information).
 ;**********
ALLOCQTY(BLOCKS) ;
 ; BLOCKS  - Calculated number of blocks for output file size.
 ; MAXEXP  - Maximum Expansion Quantity for the output file.
 ; SIZE    - Total for the maximum size of the backup file.
 ; EXPQTY  - Current expansion quantity
 ; CLUSTER - SYSGEN Parameter CLUSTER_SIZE. (Default of 3)
 ; FUDGE   - Fudge factor for expansion quantity.  The fudge factor
 ;   is the additional blocks allocated based on the current cluster
 ;   size when a file of size 4000 blocks is created.  A fudge factor
 ;   of 2 is used because the default for the SYSGEN parameter 
 ;   CLUSTER_SIZE is 3.  If cluster size is 4, the fudge factor would
 ;   be zero.
 N MAXEXP,EXPQTY,EXTRA,SIZE,FUDGE,INITEXPQTY,I,CLUSTER
 S (INITEXPQTY,EXPQTY)=4000,SIZE=0,MAXEXP=16000,CLUSTER=3
 S FUDGE=CLUSTER-(INITEXPQTY#CLUSTER)
 F I=1:1 D  Q:SIZE'<BLOCKS  
 . S SIZE=SIZE+EXPQTY
 . I I=1 S EXPQTY=EXPQTY+FUDGE
 . E  D
 .. S:((EXPQTY<MAXEXP)&('(I#4))) EXPQTY=EXPQTY*2
 .. S:((I=2)&(BLOCKS>INITEXPQTY)) SIZE=SIZE+FUDGE
 Q SIZE
 ;
INLOGOR(DIR,SOURCE,TARGET,DISPOSE) ;Adapter, present same i'face for VAX & UX
 n rc
 try {
   s rc=$ZU(31,DIR,SOURCE,TARGET,DISPOSE)
 } catch {
   s rc=-1_","_$ze
   s $ze=""
 }
 q rc
FILENORM(NAME) ;Return normalized version of NAME
 S OK=1,$ZT="FNERR"
 i ($zversion(1)=1) N MTDEV S MTDEV=$$OSDEVICE(NAME) I MTDEV'="" D  Q MTDEV
 . s ISREG=0
 . W !,"Cache device numbers are not legal here.  Substituting ",MTDEV
 i '($zversion(1)=1) N MTDEV,DIR S MTDEV=$$OSDEVICE(NAME) I MTDEV'="" S ISREG=0 Q NAME
 i ($zversion(1)=1) S DIR=NAME
 i ($zversion(1)=1) q $ZU(12,DIR)
 i ($zversion(1)=2),$E(NAME,1,2)="\\" S L=$$CheckForTape(NAME) I L'="" S ISREG=0 Q L
 i ($zversion(1)=2) S L=$L(NAME,"\"),DIR=$P(NAME,"\",1,L-1)
 i ($zversion(1)=2) IF L>1 S DIR=DIR_"\"
 i ($zversion(1)=2) S NAME=$ZU(12,DIR)_$P(NAME,"\",L,L),ISREG=$ZU(140,7,NAME),ISREG=$S(ISREG>0:1,ISREG=-2:1,1:0) Q NAME
 i ($zversion(1)=3) S L=$L(NAME,"/"),DIR=$P(NAME,"/",1,L-1)
 i ($zversion(1)=3) IF L>1 S DIR=DIR_"/"
 i ($zversion(1)=3) S NAME=$ZU(12,DIR)_$P(NAME,"/",L,L),ISREG=$ZU(140,7,NAME),ISREG=$S(ISREG=-2:1,ISREG/32768#2:1,1:0) Q NAME
FNERR S OK=0,ERRMSG="Not a valid device name." Q
CheckForTape(NAME)
 S NAME=$ZCVT(NAME,"U")
 N I,TAPE
 For I=47:1:62 s TAPE=$$OSDEVICE(I) I NAME=$ZCVT(TAPE,"U") S NAME=I Q
 I NAME?2N Q NAME
 I NAME?1"\\.\TAPE"1N Q NAME
 Q ""
TQUIWRITE(verbose) q $$QUIESCE(1,"buffer activity",10,verbose)
TQUIGC(verbose) q $$QUIESCE(2,"garbage collection",10,verbose)
TQUIDB(verbose) q $$QUIESCE(4,"database expansion",10,verbose)
TQUIGLO(verbose) q $$QUIESCE(8,"global activity",10,verbose)
TQUIGLOUPD(verbose) q $$QUIESCE(16,"global updates",10,verbose)
TQUINET(verbose) q $$QUIESCE(32,"network activity",10,verbose)
TQUIDISK(verbose) q $$QUIESCE(1+2,"disk activity",10,verbose)
TQUIUPD(verbose) q $$QUIESCE(1+2+4+16,"update activity",10,verbose)
TQUISYS(verbose) q $$QUIESCE(1+2+4+8,"system activity",10,verbose)
QUIESCE(bits,text,retries,verbose,intv) ;
 s verbose=+$g(verbose),retries=+$g(retries,-1),intv=+$g(intv,1)
 q ($$Quiesce(bits,text,retries,verbose,intv)>0)
Quiesce(bits,text,retries,verbose,intv) ;
 n noWDbits  ;JO1988
 s $zt="QUIESCEE"
 q:$zu(51,bits) 1 ;double checking $ZU(51) is no longer necessary
 s verbose=+$g(verbose),retries=+$g(retries,-1),intv=+$g(intv,1)
 d msgout($c(13,10)_"WARNING: Switch is set and may affect production for up to "_(retries*intv)_" seconds."_$c(13,10)_"Waiting for "_text_" to finish...",NOFORCE)
 f  q:'retries  h intv q:$zu(51,bits)  s retries=retries-1 i retries#5=0 d msgout(".",NOFORCE)
 s noWDbits=1
 s:$s($S($ZBITGET($ZVERSION(0),2):$V($ZU(40,2,136),-2,4),1:0):''$zu(59,0),1:0) noWDbits=noWDbits+2
 s noWDbits=$zboolean(bits,noWDbits,2)  ;2 = x & ~ y
 if '$ZU(51,bits),bits'=1,$zboolean(bits,1,1),$zu(51,noWDbits) {
	 d msgout($c(13,10)_"System is idle except WD is still running."_$c(13,10)_"     Waiting up to 2 minutes for WD to finish",NOFORCE)
	 f i=1:1:120 q:$ZU(51,bits)  h 1 if i#5=0 d msgout(".",NOFORCE)
	 if $ZU(51,bits) s retries=1 ;signal success
 }
 d msgout($s(retries:" ready.",1:" abort. "_$$quiescefailmsg(bits))_$c(13,10),NOFORCE)
 q retries
quiescefailmsg(bits)
 N ret,clu,clumsg s ret="",clu=$zb(bits,512+256+128,1),clumsg=""
 if $zb(clu,128,1)||($zb(clu,(256+512),1)=(256+512)) s clu=128,clumsg=" (cluster wide)"
 if $zb(clu,512,1) s clumsg=" (cluster master only)"
 if $zb(clu,256,1) s clumsg=" (cluster slaves only)"
 if $zb(bits,1,1)&&('$ZU(51,clu+1)) S ret=ret_"write daemon"_clumsg_","
 if $zb(bits,2,1)&&('$ZU(51,clu+2)) S ret=ret_"garbage collector"_clumsg_"," 
 if $zb(bits,4,1)&&('$ZU(51,clu+4)) S ret=ret_"file expander"_clumsg_","
 if $zb(bits,8,1)&&('$ZU(51,clu+8)) S ret=ret_"global reference"_clumsg_","
 if $zb(bits,16,1)&&('$ZU(51,clu+16)) S ret=ret_"global update"_clumsg_","
 if $zb(bits,32,1)&&('$ZU(51,clu+32)) S ret=ret_"client-side network connections"_clumsg_","
 if $zb(bits,64,1)&&('$ZU(51,clu+64)) S ret=ret_"network server activity"_clumsg_","
 if ret'="" s ret="Quiesce failed reason: "_$e(ret,1,*-1) d $zu(9,"",ret,1,2) i $d(^rOBJ("ZQuiesceFail")) d ^ZQuiesceFail
 Q ret
QUIESCEE s $zt="" d $zu(9,"","QUIESCE: "_$ze,(1>0),1) q -1 ;0
CluQuiet(switch,target,timeout)
 n flags,rc
 i $g(switch)-10,$g(switch)-13 ztrap "SWITCH"
 n targetmsg s target=$g(target)
 i target=1 s target=256,targetmsg=" on cluster slave members"
 e  i target=2 s target=512,targetmsg=" on cluster master"
 e  s target=512+256,targetmsg=" cluster wide"
 s flags=1+2+4+$s(switch=10:8,1:16)
 s rc=$$Quiesce(flags+target,$s(switch=10:"system activity",1:"update activity")_targetmsg,$g(timeout,10),'$g(QUIET,$g(QUIETLY)))
 i rc<0 ztrap "Abort"
 q rc
quietsw(switch,timeout) ;quiesce activities w/ timeout after setting switch 10 or 13
 n flags,rc
 i $g(switch)-10,$g(switch)-13 ztrap "SWITCH"
 s flags=1+2+4+$s(switch=10:8,1:16)
 i CLUBACKUP s flags=flags+128
 s rc=$$Quiesce(flags,"disk cleanup",$s($g(timeout)="":30,1:timeout),'$g(QUIET))
 i rc<0 ztrap "Abort"
 q rc
hibernate(switch,released,timeo) ;
 i +$g(released) d msgout($c(13,10)_"Switch "_switch_" is released.",NOFORCE)
 n hibtime s hibtime=$s(timeo>3:10,timeo>2:1,timeo>1:.1,timeo>0:.01,1:10)
 d msgout($c(13,10)_"Backup will hibernate for "_hibtime_" second(s) and try again."_$c(13,10)_"You may abort Backup via Ctrl-C. ",NOFORCE) 
 i hibtime<1 h hibtime
 e  n i f i=1:1:hibtime h 1 d msgout(".",NOFORCE)
 d msgout($c(13,10),NOFORCE)
 q
ENQ10 ;
 n t s t=$g(quietimeout,60) s:t>0 t=(t+9)\10 ;rounded up to 10 sec
 s $zt="ENQ10e"
 i CLUBACKUP d  q
 . f  q:$$CLU^SWSET(10,1,ALRDY10,$g(QUIETMASTERONLY))  s t=t-1 zt:'t "Abort" d hibernate(10,'ALRDY10,t)
 i ALRDY10 q:$$quietsw(10)  zt "Abort"
 f  S %SW=10,%VAL=1 D INT^SWSET  q:$$quietsw(10)  s t=t-1 zt:'t "Abort" d DEQ10,hibernate(10,1,t)
 Q
ENQ10e s $zt="" d DEQ10 ztrap $ze
DEQ10 ;
 i CLUBACKUP,$ZU(95,10,0)  ; Clear SW10 clusterwide
 i 'ALRDY10 s %SW=10,%VAL=0 D INT^SWSET
 Q
ENQ13 ;
 n t s t=$g(quietimeout,60) s:t>0 t=(t+9)\10 ;rounded up to 10 sec
 s $zt="ENQ13e"
 i CLUBACKUP d  q
 . f  q:$$CLU^SWSET(13,1,ALRDY13)  s t=t-1 zt:'t "Abort" d DEQ13,hibernate(13,'ALRDY13,t)
 i ALRDY13 q:$$quietsw(13)  zt "Abort"
 f  S %SW=13,%VAL=1 D INT^SWSET  q:$$quietsw(13)  s t=t-1 zt:'t "Abort" d DEQ13,hibernate(13,1,t)
 Q
ENQ13e s $zt="" d DEQ13 zq 1 g:$zt'="" @$zt q
DEQ13 ;
 i CLUBACKUP,$ZU(95,13,0)  ; Clear SW13 clusterwide
 i 'ALRDY13 s %SW=13,%VAL=0 D INT^SWSET
 Q
HOLDWD(dir) ;suspend write daemon (dir may be passed as an array)
 n n
 i $zu(182,1,0) ;clear any remaining backup request
 f  q:'$zu(182,0)  h 1  ;wait until write daemon runs again
 i $d(dir)<10 d $zu(52,9,dir,1) d $zu(182,2,0,+$zu(49,dir)) s n=1 i 1
 e  s dir="" f n=0:1 s dir=$o(dir(dir)) q:dir=""  d $zu(52,9,dir,1) d $zu(182,2,n,+$zu(49,dir))
 i $zu(182,1,n)  ;set number of databases to back up
 f  q:$zu(182,0)  h 1  ;wait until write daemon suspends
 q
FREEWD ;unsuspend write daemon
 i $zu(182,1,0)
 q
msgout(aaamess,flag) ;
         s flag=$g(flag,1) ; default to FORCE
         W *-1            ;Flush the input buffer                     ;SSG012
         q:'$L(aaamess)   ; Avoid argumentless writes...
         i $g(logfile)'="" u logfile w aaamess
         u 0
         q:flag=3  ; 1 = FORCE, FORCE, 2 = NOFORCE, 3 = LOGONLY
         i '$G(INTERNAL,0)!('$G(NOINPUT,0)&(flag=1!'$G(QUIET,0))) w aaamess
         i $g(gui) D  
         . s return=$$IjcMsg^%Wprima("DI"_aaamess) ; Retval might =  cancel msg
         . i return="CANCEL" d  
         . . i $$IjcMsg^%Wprima("DI"_$c(13,10)_"Abort received!"_$c(13,10))
         . . zt "Abort"
         u 0 
         q
msgouta(aaamess,flag) ;
         s flag=$g(flag,1) ; default to FORCE
         W *-1            ;Flush the input buffer                     ;SSG012
         q:'$L(aaamess)   ; Avoid argumentless writes...
         i $g(logfile)'="" u logfile w @aaamess
         u 0
         q:flag=3  ; 1 = FORCE, FORCE, 2 = NOFORCE, 3 = LOGONLY
         i '$G(INTERNAL,0)!('$G(NOINPUT,0)&(flag=1!'$G(QUIET,0))) w @aaamess
         i $g(gui) D  
         . s return=$$IjcMsg^%Wprima("DI"_aaamess) ; Retval might =  cancel msg
         . i return="CANCEL" d  
         . . i $$IjcMsg^%Wprima("DI"_$c(13,10)_"Abort received!"_$c(13,10))
         . . zt "Abort"
         u 0 
         q
timestmp(flag) 
         n msg,%TS,%TN
         s msg="TIMESTAMP: "
         s %DN=+$H d INT^%DO
         s msg=msg_%DS
         s %TN=$P($h,",",2) d ^%TO
         s msg=msg_" "_%TS
         d msgout($c(13,10)_msg_$c(13,10))
         q
OSDEVICE(mdevice,new) ;osdevice + range check, pad input, strip output.
 s mdevice=+mdevice q:mdevice<47 ""  q:mdevice>62 ""
 i $d(new) s new=$$zpad(new,32)
 q $$zstrip($$osdevice(mdevice,.new))
osdevice(mdevice,new) ;"Raw" osdevice
 n adr,old,size,where,charsize
 s $ZT="osdeverr"
 s charsize=$$charsize^%Wprim() ; check size one char
 s size=32,adr=(mdevice-47)*(size*charsize)+$ZU(40,2,28),where=-2
 s old=$v(adr,where,-size_"w")
 i $d(new) v adr:where:-size_"w":new
 q old
osdeverr q ""
zstrip(x) ;Return x with ASCII NUL's removed
 q $tr(x,$c(0),"")
zpad(x,len) ;x, maybe truncated, NUL-padded to length len, one NUL guaranteed
 n zeroes
 s zeroes=$j("",len),zeroes=$tr(zeroes," ",$c(0)) ;String of len NUL's
 s x=$e(x,1,len-1) ;Silently truncate x if necessary
 s $e(zeroes,1,$l(x))=x
 q zeroes
ZU(A,B,C,D,E,F,G,H,I,J,K,L,M,N,P) ;so needn't change $$ZU's to $ZU's
 IF '$D(B) Q $ZU(A)
 IF '$D(C) Q $ZU(A,B)
 IF '$D(D) Q $ZU(A,B,C)
 IF '$D(E) Q $ZU(A,B,C,D)
 IF '$D(F) Q $ZU(A,B,C,D,E)
 IF '$D(G) Q $ZU(A,B,C,D,E,F)
 IF '$D(H) Q $ZU(A,B,C,D,E,F,G)
 IF '$D(I) Q $ZU(A,B,C,D,E,F,G,H)
 IF '$D(J) Q $ZU(A,B,C,D,E,F,G,H,I)
 IF '$D(K) Q $ZU(A,B,C,D,E,F,G,H,I,J)
 IF '$D(L) Q $ZU(A,B,C,D,E,F,G,H,I,J,K)
 IF '$D(M) Q $ZU(A,B,C,D,E,F,G,H,I,J,K,L)
 IF '$D(N) Q $ZU(A,B,C,D,E,F,G,H,I,J,K,L,M)
 IF '$D(P) Q $ZU(A,B,C,D,E,F,G,H,I,J,K,L,M,N)
           Q $ZU(A,B,C,D,E,F,G,H,I,J,K,L,M,N,P)
MORE Q      ;JAO580 added 