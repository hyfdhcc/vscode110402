Class %Dictionary.CompiledClass Extends (%Persistent, %Dictionary.CompiledClassQuery) [ StorageStrategy = custom, System = 2 ]
{

/// Specifies that the class cannot have instances; for datatypes, specifies that the class cannot be used as an attribute type.
Property Abstract As %Boolean;

/// Ancestry
Property Ancestry As %CacheString;

/// The version of Cache this class was compiled on.
Property CacheVersion As %CacheString;

/// Status code from this class compile if there is an error
Property ClassCompileError As %CacheString;

/// Set to true if there is a problem serializing the class so the compiler knows not to compile this.
Property ClassDefinitionError As %Boolean;

/// Array of items generated by this class.
Property Classes As array Of %CacheString;

/// Specifies how this class is to be used.
Property ClassType As %CacheString;

/// In the case of a datatype class, specifies the type used when exposed via ActiveX or Java. Datatype classes must specify a client datatype. 
Property ClientDataType As %CacheString;

/// ClientDataTypeEnum
Property ClientDataTypeEnum As %Integer;

/// ClientInfo
Property ClientInfo As array Of %CacheString;

/// This gives an alternate name for the class if it projected, for example, to Java.
Property ClientName As %CacheString;

/// CompilationSignature
Property CompilationSignature As %CacheString;

/// Indicates that the class compiler should compile this class after the specified classes.
Property CompileAfter As %CacheString;

/// The namespace when this class is compiled, used to help dependency checking.
Property CompileNamespace As %CacheString;

/// Constraint
Relationship Constraints As %Dictionary.CompiledConstraint [ Cardinality = children, Inverse = parent ];

/// Additional constraint member super classes to inherit.
Property ConstraintClass As %CacheString;

/// In the case of a persistent class, indicates whether or not DDL statements can be used to alter or delete the class definition. 
Property DdlAllowed As %Boolean;

/// List of classes that this class depends on being runable in order for this class to compile.
Property DependsOn As %CacheString;

/// Indicates whether the class has been deployed, that is, disassociated from the source that was used to build it.
Property Deployed As %Integer;

/// True if this class is deprecated.
Property Deprecated As %Boolean;

/// Specifies a description of the class.
Property Description As %CacheString;

/// Deprecated.
Property DisableIncremental As %Boolean;

/// Deprecated.
Property Dynamic As %Boolean;

/// If specified in a member type class is the name of the class which forms the embedded superclass
Property EmbeddedClass As %CacheString;

/// Extents
Property Extents As array Of %CacheString;

/// Specifies that the class cannot have subclasses.
Property Final As %Boolean;

/// ForeignKey
Relationship ForeignKeys As %Dictionary.CompiledForeignKey [ Cardinality = children, Inverse = parent ];

/// If this class is generated by some other component then this is the name of the item that generated this class
Property GeneratedBy As %CacheString;

/// True if this class has C++ methods.
Property HasCPP As %CacheString;

/// A hash of this class so we can detect when it is changed.
Property Hash As %CacheString;

/// Specifies that this class is not typically listed when viewing the contents of the class dictionary.
Property Hidden As %Boolean;

/// Supplies a list of class packages to import for this class.
Property Import As %CacheString;

/// Importall
Property Importall As array Of %CacheString;

/// Specifies an optional list of Cache include files used when compiling this class.
Property IncludeCode As %CacheString;

/// IncludeCodeAll
Property IncludeCodeAll As array Of %CacheString;

/// Specifies an optional list of Cache include files used when compiling the method generator methods of this class.
Property IncludeGenerator As %CacheString;

/// IncludeMGenAll
Property IncludeMGenAll As array Of %CacheString;

/// Index
Relationship Indices As %Dictionary.CompiledIndex [ Cardinality = children, Inverse = parent ];

/// Additional index member super classes to inherit.
Property IndexClass As %CacheString;

/// Define the inheritance order when using multiple inheritance, if a member exists in multiple superclasses which one will take precedence.
Property Inheritance As %CacheString;

/// If specified the initial serial value for a new object
Property InitialValue As %CacheString;

/// InstanceVar
Relationship InstanceVars As %Dictionary.CompiledInstanceVar [ Cardinality = children, Inverse = parent ];

/// KeywordError
Property KeywordError As %Boolean;

/// KeywordModified
Property KeywordModified As %Boolean;

/// The default language used to implement methods for this class.
Property Language As %CacheString [ SqlFieldName = _Language ];

/// If true then pass %this as first argument of all instance methods
Property LegacyInstanceContext As %Boolean;

/// Array of items projected with this class which need to be included in any deployment package we create from this class
Property Manifest As array Of %CacheString;

/// This is the class to inherit if this class is used as a member class in member inheritance
Property MemberSuper As %CacheString;

/// Method
Relationship Methods As %Dictionary.CompiledMethod [ Cardinality = children, Inverse = parent ];

/// Deprecated.
Property ModificationAuxiliary As %CacheString;

/// Deprecated.
Property ModificationLevel As %Integer;

/// If set to 0 then class is always modified, and so it is always saved.
Property Modified As %CacheString;

/// The name of the class.
Property Name As %Dictionary.CacheClassname [ Required ];

/// NoContext
Property NoContext As %Boolean;

/// If TRUE will prevent this class from instantiating a persistent extent.
Property NoExtent As %Boolean;

/// In the case of a datatype class, specifies the type used when exposed via ODBC or JDBC. Datatype classes must specify an ODBC type. 
Property OdbcType As %CacheString;

/// Keep track of old hash values so we can modify a class without marking it as out of date.
Property OldHash As %CacheString;

/// Specifies the owner of the class and its corresponding table. By default, classes and tables are owned by _SYSTEM.
Property Owner As %CacheString;

/// Parameter
Relationship Parameters As %Dictionary.CompiledParameter [ Cardinality = children, Inverse = parent ];

/// PrimarySuper
Property PrimarySuper As %CacheString;

/// Specifies that the class uses procedure block for method code.
Property ProcedureBlock As %Boolean;

/// Procedures
Property Procedures As array Of %CacheString;

/// Projection
Relationship Projections As %Dictionary.CompiledProjection [ Cardinality = children, Inverse = parent ];

/// Additional projection member super classes to inherit.
Property ProjectionClass As %CacheString;

/// Property
Relationship Properties As %Dictionary.CompiledProperty [ Cardinality = children, Inverse = parent ];

/// Additional property member super classes to inherit.
Property PropertyClass As %CacheString;

/// Query
Relationship Queries As %Dictionary.CompiledQuery [ Cardinality = children, Inverse = parent ];

/// Additional query member super classes to inherit.
Property QueryClass As %CacheString;

/// Random value that is updated each time the class is compiled
Property RandomSig As %CacheString;

/// RoutineCount
Property RoutineCount As %Integer;

/// Routines
Property Routines As array Of %CacheString;

/// ServerOnly
Property ServerOnly As %CacheString;

/// SlotCount
Property SlotCount As %Integer;

/// Specifies the SOAP Binding used by this class when it is used to send and receive mnessages via SOAP.
Property SoapBindingStyle As %CacheString;

/// Specifies the encoding used for SOAP messages.
Property SoapBodyUse As %CacheString;

/// In the case of a datatype class, specifies a type to use for calculations in SQL. Datatype classes must specify an SQL Category.
Property SqlCategory As %CacheString;

/// SqlQualifiedNameQ
Property SqlQualifiedNameQ As %CacheString;

/// Deprecated.
Property SqlRoutinePrefix As %CacheString;

/// In the case of a persistent class, specifies an altername field name used for the ID column. By default the ID is called ID.
Property SqlRowIdName As %CacheString;

/// In the case of a persistent class, specifies whether the ID column is projected to ODBC as a hidden field.
Property SqlRowIdPrivate As %Boolean;

/// SqlSchemaName
Property SqlSchemaName As %CacheString;

/// In the case of a persistent class, specifies the table name used to identify the class in its SQL projection. By default, the SQL table name is the same as the class name.
Property SqlTableName As %CacheString;

/// Storage
Relationship Storages As %Dictionary.CompiledStorage [ Cardinality = children, Inverse = parent ];

/// Specifies the name of the storage strategy used to control persistence for this class.
Property StorageStrategy As %CacheString;

/// Hash of class &#39;structure&#39; so we can detect when SQL related classes need to be recompiled.
Property Structure As %CacheString;

/// Specifies one or more superclasses for the class.
Property Super As %CacheString;

/// Specifies that the class is internal to the implementation of Cache. Users should not mark their classes with this keyword.
Property System As %CacheString [ ClientName = _System ];

/// Tables
Property Tables As array Of %CacheString;

/// Gives the time the last change was made to the class.
Property TimeChanged As %CacheString;

/// Gives the time the class was first created.
Property TimeCreated As %CacheString;

/// Trigger
Relationship Triggers As %Dictionary.CompiledTrigger [ Cardinality = children, Inverse = parent ];

/// Additional trigger member super classes to inherit.
Property TriggerClass As %CacheString;

/// UDLText
Relationship UDLTexts As %Dictionary.CompiledUDLText [ Cardinality = children, Inverse = parent ];

/// Gives the SQL query used for View definition of this class.
Property ViewQuery As %CacheString;

/// Views
Property Views As array Of %CacheString;

/// XData
Relationship XDatas As %Dictionary.CompiledXData [ Cardinality = children, Inverse = parent ];

/// XMLData
Property XMLData As array Of %CacheString;

Index IDKEY On Name [ IdKey ];

Parameter SQLENABLED = 1;

Trigger OnInsertUpdate [ Event = INSERT/UPDATE ]
{
 set %ok=0
 set %msg="Insert/Update operations not supported on this table."
}

Trigger OnDelete [ Event = DELETE ]
{
 set %ok=0
 set %msg="Delete operation not supported on this table."
}

Method %OnNew(name As %String) As %Status [ Private ]
{
 q $$$ERROR($$$CanNotNewCompiledDictionaryClasses)
}

ClassMethod %LockId(id As %String, shared As %Boolean = 0, timeout As %Integer) As %Status
{
 QUIT:id="" $$$ERROR($$$NullId)
 s name1=id
 QUIT $$LockClassRef^%occLock(name1,shared,.timeout)
}

ClassMethod %UnlockId(id As %String, shared As %Boolean = 0, immediate As %Boolean = 0) As %Status
{
 QUIT:id="" $$$ERROR($$$NullId)
 s name1=id
 QUIT $$UnlockClassRef^%occLock(name1,shared,immediate)
}

ClassMethod %Exists(oid As %ObjectIdentity) As %Boolean
{
 s $zt="TrapExists"
 s id=$$$oidPrimary(oid) QUIT:id="" $$$ERROR($$$NullId)
 s name1=id
 i (name1="") QUIT 0
 i '$$$defClassDefined(name1)||($$$defClassKeyGet(name1,$$$cCLASSdeployed)=2) QUIT 0
 i $$$comClassDefined(name1) QUIT 1
 QUIT 0
TrapExists s $zt=""
 QUIT 0
}

Method %LoadData(id As %String) As %Status [ Private ]
{
 s name1=id
 s sc=$$$OK
 s $zt="trap"
 i ..%Concurrency>0 s sc=..%LockId(id,..%Concurrency'=4) If $$$ISERR(sc) Quit sc
 i (name1="")||('$$$comClassDefined(name1)) s sc=$$$ERROR($$$LoadObjectNotFound,$classname(),id)
 i $$$ISOK(sc),$$$defClassKeyGet(name1,$$$cCLASSdeployed)=2 s sc=$$$ERROR($$$ClassIsStub,name1)
 i $$$ISOK(sc),$$$defClassVersionGet(name1)'=$$$CLASSDEFINITIONVERSION s sc=$$$ERROR($$$OneClassDictionaryVersionMismatch,name1)
 i $$$ISOK(sc) d
 . s i%Name=name1
 . s i%Abstract=$$$comClassKeyGet(name1,$$$cCLASSabstract)
 . s i%Ancestry=$$$comClassKeyGet(name1,$$$cCLASSancestry)
 . s i%CacheVersion=$$$comClassKeyGet(name1,$$$cCLASScacheversion)
 . s i%ClassCompileError=$$$comClassKeyGet(name1,$$$cCLASSclasscompileerror)
 . s i%ClassDefinitionError=$$$comClassKeyGet(name1,$$$cCLASSclassdefinitionerror)
 . s i%ClassType=$$$comClassKeyGet(name1,$$$cCLASSclasstype)
 . s i%ClientDataType=$$$comClassKeyGet(name1,$$$cCLASSclientdatatype)
 . s i%ClientDataTypeEnum=$$$comClassKeyGet(name1,$$$cCLASSclientdatatypeenum)
 . s i%ClientName=$$$comClassKeyGet(name1,$$$cCLASSclientname)
 . s i%CompilationSignature=$$$comClassKeyGet(name1,$$$cCLASScompilationsignature)
 . s i%CompileAfter=$$$comClassKeyGet(name1,$$$cCLASScompileafter)
 . s i%CompileNamespace=$$$comClassKeyGet(name1,$$$cCLASScompilenamespace)
 . s i%ConstraintClass=$$$comClassKeyGet(name1,$$$cCLASSconstraintclass)
 . s i%DdlAllowed=$$$comClassKeyGet(name1,$$$cCLASSddlallowed)
 . s i%DependsOn=$$$comClassKeyGet(name1,$$$cCLASSdependson)
 . s i%Deployed=$$$comClassKeyGet(name1,$$$cCLASSdeployed)
 . s i%Deprecated=$$$comClassKeyGet(name1,$$$cCLASSdeprecated)
 . s i%Description=$$$comClassKeyGet(name1,$$$cCLASSdescription)
 . s i%DisableIncremental=$$$comClassKeyGet(name1,$$$cCLASSdisableincremental)
 . s i%Dynamic=$$$comClassKeyGet(name1,$$$cCLASSdynamic)
 . s i%EmbeddedClass=$$$comClassKeyGet(name1,$$$cCLASSembeddedclass)
 . s i%Final=$$$comClassKeyGet(name1,$$$cCLASSfinal)
 . s i%GeneratedBy=$$$comClassKeyGet(name1,$$$cCLASSgeneratedby)
 . s i%HasCPP=$$$comClassKeyGet(name1,$$$cCLASShascpp)
 . s i%Hash=$$$comClassKeyGet(name1,$$$cCLASShash)
 . s i%Hidden=$$$comClassKeyGet(name1,$$$cCLASShidden)
 . s i%Import=$$$comClassKeyGet(name1,$$$cCLASSimport)
 . s i%IncludeCode=$$$comClassKeyGet(name1,$$$cCLASSincludecode)
 . s i%IncludeGenerator=$$$comClassKeyGet(name1,$$$cCLASSincludegenerator)
 . s i%IndexClass=$$$comClassKeyGet(name1,$$$cCLASSindexclass)
 . s i%Inheritance=$$$comClassKeyGet(name1,$$$cCLASSinheritance)
 . s i%InitialValue=$$$comClassKeyGet(name1,$$$cCLASSinitialvalue)
 . s i%KeywordError=$$$comClassKeyGet(name1,$$$cCLASSkeyworderror)
 . s i%KeywordModified=$$$comClassKeyGet(name1,$$$cCLASSkeywordmodified)
 . s i%Language=$$$comClassKeyGet(name1,$$$cCLASSlanguage)
 . s i%LegacyInstanceContext=$$$comClassKeyGet(name1,$$$cCLASSlegacyinstancecontext)
 . s i%MemberSuper=$$$comClassKeyGet(name1,$$$cCLASSmembersuper)
 . s i%ModificationAuxiliary=$$$comClassKeyGet(name1,$$$cCLASSmodificationauxiliary)
 . s i%ModificationLevel=$$$comClassKeyGet(name1,$$$cCLASSmodificationlevel)
 . s i%Modified=$$$comClassKeyGet(name1,$$$cCLASSmodified)
 . s i%Name=$$$comClassKeyGet(name1,$$$cCLASSname)
 . s i%NoContext=$$$comClassKeyGet(name1,$$$cCLASSnocontext)
 . s i%NoExtent=$$$comClassKeyGet(name1,$$$cCLASSnoextent)
 . s i%OdbcType=$$$comClassKeyGet(name1,$$$cCLASSodbctype)
 . s i%OldHash=$$$comClassKeyGet(name1,$$$cCLASSoldhash)
 . s i%Owner=$$$comClassKeyGet(name1,$$$cCLASSowner)
 . s i%PrimarySuper=$$$comClassKeyGet(name1,$$$cCLASSprimarysuper)
 . s i%ProcedureBlock=$$$comClassKeyGet(name1,$$$cCLASSprocedureblock)
 . s i%ProjectionClass=$$$comClassKeyGet(name1,$$$cCLASSprojectionclass)
 . s i%PropertyClass=$$$comClassKeyGet(name1,$$$cCLASSpropertyclass)
 . s i%QueryClass=$$$comClassKeyGet(name1,$$$cCLASSqueryclass)
 . s i%RandomSig=$$$comClassKeyGet(name1,$$$cCLASSrandomsig)
 . s i%RoutineCount=$$$comClassKeyGet(name1,$$$cCLASSroutinecount)
 . s i%ServerOnly=$$$comClassKeyGet(name1,$$$cCLASSserveronly)
 . s i%SlotCount=$$$comClassKeyGet(name1,$$$cCLASSslotcount)
 . s i%SoapBindingStyle=$$$comClassKeyGet(name1,$$$cCLASSsoapbindingstyle)
 . s i%SoapBodyUse=$$$comClassKeyGet(name1,$$$cCLASSsoapbodyuse)
 . s i%SqlCategory=$$$comClassKeyGet(name1,$$$cCLASSsqlcategory)
 . s i%SqlQualifiedNameQ=$$$comClassKeyGet(name1,$$$cCLASSsqlqualifiednameQ)
 . s i%SqlRoutinePrefix=$$$comClassKeyGet(name1,$$$cCLASSsqlroutineprefix)
 . s i%SqlRowIdName=$$$comClassKeyGet(name1,$$$cCLASSsqlrowidname)
 . s i%SqlRowIdPrivate=$$$comClassKeyGet(name1,$$$cCLASSsqlrowidprivate)
 . s i%SqlSchemaName=$$$comClassKeyGet(name1,$$$cCLASSsqlschemaname)
 . s i%SqlTableName=$$$comClassKeyGet(name1,$$$cCLASSsqltablename)
 . s i%StorageStrategy=$$$comClassKeyGet(name1,$$$cCLASSstoragestrategy)
 . s i%Structure=$$$comClassKeyGet(name1,$$$cCLASSstructure)
 . s i%Super=$$$comClassKeyGet(name1,$$$cCLASSsuper)
 . s i%System=$$$comClassKeyGet(name1,$$$cCLASSsystem)
 . s i%TimeChanged=$$$comClassKeyGet(name1,$$$cCLASStimechanged)
 . s i%TimeCreated=$$$comClassKeyGet(name1,$$$cCLASStimecreated)
 . s i%TriggerClass=$$$comClassKeyGet(name1,$$$cCLASStriggerclass)
 . s i%ViewQuery=$$$comClassKeyGet(name1,$$$cCLASSviewquery)
 . s sub="" f  s sub=$$$comMemberNext(name1,$$$cCLASSclasses,sub) q:sub=""  d
 . . d ..Classes.SetAt($$$comClassArrayGet(name1,$$$cCLASSclasses,sub),sub)
 . s sub="" f  s sub=$$$comMemberNext(name1,$$$cCLASSclientinfo,sub) q:sub=""  d
 . . d ..ClientInfo.SetAt($$$comClassArrayGet(name1,$$$cCLASSclientinfo,sub),sub)
 . s sub="" f  s sub=$$$comMemberNext(name1,$$$cCLASSextents,sub) q:sub=""  d
 . . d ..Extents.SetAt($$$comClassArrayGet(name1,$$$cCLASSextents,sub),sub)
 . s sub="" f  s sub=$$$comMemberNext(name1,$$$cCLASSimportall,sub) q:sub=""  d
 . . d ..Importall.SetAt($$$comClassArrayGet(name1,$$$cCLASSimportall,sub),sub)
 . s sub="" f  s sub=$$$comMemberNext(name1,$$$cCLASSincludecodeall,sub) q:sub=""  d
 . . d ..IncludeCodeAll.SetAt($$$comClassArrayGet(name1,$$$cCLASSincludecodeall,sub),sub)
 . s sub="" f  s sub=$$$comMemberNext(name1,$$$cCLASSincludemgenall,sub) q:sub=""  d
 . . d ..IncludeMGenAll.SetAt($$$comClassArrayGet(name1,$$$cCLASSincludemgenall,sub),sub)
 . s sub="" f  s sub=$$$comMemberNext(name1,$$$cCLASSmanifest,sub) q:sub=""  d
 . . d ..Manifest.SetAt($$$comClassArrayGet(name1,$$$cCLASSmanifest,sub),sub)
 . s sub="" f  s sub=$$$comMemberNext(name1,$$$cCLASSprocedures,sub) q:sub=""  d
 . . d ..Procedures.SetAt($$$comClassArrayGet(name1,$$$cCLASSprocedures,sub),sub)
 . s sub="" f  s sub=$$$comMemberNext(name1,$$$cCLASSroutines,sub) q:sub=""  d
 . . d ..Routines.SetAt($$$comClassArrayGet(name1,$$$cCLASSroutines,sub),sub)
 . s sub="" f  s sub=$$$comMemberNext(name1,$$$cCLASStables,sub) q:sub=""  d
 . . d ..Tables.SetAt($$$comClassArrayGet(name1,$$$cCLASStables,sub),sub)
 . s sub="" f  s sub=$$$comMemberNext(name1,$$$cCLASSviews,sub) q:sub=""  d
 . . d ..Views.SetAt($$$comClassArrayGet(name1,$$$cCLASSviews,sub),sub)
 . s sub="" f  s sub=$$$comMemberNext(name1,$$$cCLASSxmldata,sub) q:sub=""  d
 . . d ..XMLData.SetAt($$$comClassArrayGet(name1,$$$cCLASSxmldata,sub),sub)
exit i ..%Concurrency=2||(..%Concurrency=1) d ..%UnlockId(id,1,1)
 q sc
trap s $zt=""
 s sc=$$$ERROR($$$CacheError,$ze)
 g exit
}

Method %SaveData(id As %String) As %Status [ Private ]
{
 q $$$ERROR($$$CanNotSaveCompiledDictionaryClasses)
}

ClassMethod %DeleteData(id As %String, concurrency As %Integer) As %Status [ Private ]
{
	Quit $$$ERROR($$$CanNotDeleteCompiledDictionaryClasses)
}

Storage custom
{
<SQLMap name="Master">
<Data name="Abstract">
<RetrievalCode> s {Abstract}=$s($d(^oddCOM({L1},21))#2:^(21),1:$s($d(^oddDEF({L1},21))#2:^(21),1:0))
</RetrievalCode>
</Data>
<Data name="Ancestry">
<RetrievalCode> s {Ancestry}=$s($d(^oddCOM({L1},22))#2:^(22),1:$s($d(^oddDEF({L1},22))#2:^(22),1:""))
</RetrievalCode>
</Data>
<Data name="CacheVersion">
<RetrievalCode> s {CacheVersion}=$s($d(^oddCOM({L1},74))#2:^(74),1:$s($d(^oddDEF({L1},74))#2:^(74),1:""))
</RetrievalCode>
</Data>
<Data name="ClassCompileError">
<RetrievalCode> s {ClassCompileError}=$s($d(^oddCOM({L1},98))#2:^(98),1:$s($d(^oddDEF({L1},98))#2:^(98),1:""))
</RetrievalCode>
</Data>
<Data name="ClassDefinitionError">
<RetrievalCode> s {ClassDefinitionError}=$s($d(^oddCOM({L1},67))#2:^(67),1:$s($d(^oddDEF({L1},67))#2:^(67),1:0))
</RetrievalCode>
</Data>
<Data name="ClassType">
<RetrievalCode> s {ClassType}=$s($d(^oddCOM({L1},23))#2:^(23),1:$s($d(^oddDEF({L1},23))#2:^(23),1:""))
</RetrievalCode>
</Data>
<Data name="Classes">
<RetrievalCode> n sub s {Classes}="",sub="" f  s sub=$o(^oddCOM({L1},86,sub)) q:sub=""  s {Classes}={Classes}_$lb($lb(sub,$g(^oddCOM({L1},86,sub))))
</RetrievalCode>
</Data>
<Data name="ClientDataType">
<RetrievalCode> s {ClientDataType}=$s($d(^oddCOM({L1},24))#2:^(24),1:$s($d(^oddDEF({L1},24))#2:^(24),1:"VARCHAR"))
</RetrievalCode>
</Data>
<Data name="ClientDataTypeEnum">
<RetrievalCode> s {ClientDataTypeEnum}=$s($d(^oddCOM({L1},25))#2:^(25),1:$s($d(^oddDEF({L1},25))#2:^(25),1:0))
</RetrievalCode>
</Data>
<Data name="ClientInfo">
<RetrievalCode> n sub s {ClientInfo}="",sub="" f  s sub=$o(^oddCOM({L1},26,sub)) q:sub=""  s {ClientInfo}={ClientInfo}_$lb($lb(sub,$g(^oddCOM({L1},26,sub))))
</RetrievalCode>
</Data>
<Data name="ClientName">
<RetrievalCode> s {ClientName}=$s($d(^oddCOM({L1},73))#2:^(73),1:$s($d(^oddDEF({L1},73))#2:^(73),1:""))
</RetrievalCode>
</Data>
<Data name="CompilationSignature">
<RetrievalCode> s {CompilationSignature}=$s($d(^oddCOM({L1},27))#2:^(27),1:$s($d(^oddDEF({L1},27))#2:^(27),1:""))
</RetrievalCode>
</Data>
<Data name="CompileAfter">
<RetrievalCode> s {CompileAfter}=$s($d(^oddCOM({L1},28))#2:^(28),1:$s($d(^oddDEF({L1},28))#2:^(28),1:""))
</RetrievalCode>
</Data>
<Data name="CompileNamespace">
<RetrievalCode> s {CompileNamespace}=$s($d(^oddCOM({L1},91))#2:^(91),1:$s($d(^oddDEF({L1},91))#2:^(91),1:""))
</RetrievalCode>
</Data>
<Data name="ConstraintClass">
<RetrievalCode> s {ConstraintClass}=$s($d(^oddCOM({L1},80))#2:^(80),1:$s($d(^oddDEF({L1},80))#2:^(80),1:""))
</RetrievalCode>
</Data>
<Data name="DdlAllowed">
<RetrievalCode> s {DdlAllowed}=$s($d(^oddCOM({L1},29))#2:^(29),1:$s($d(^oddDEF({L1},29))#2:^(29),1:0))
</RetrievalCode>
</Data>
<Data name="DependsOn">
<RetrievalCode> s {DependsOn}=$s($d(^oddCOM({L1},84))#2:^(84),1:$s($d(^oddDEF({L1},84))#2:^(84),1:""))
</RetrievalCode>
</Data>
<Data name="Deployed">
<RetrievalCode> s {Deployed}=$s($d(^oddCOM({L1},72))#2:^(72),1:$s($d(^oddDEF({L1},72))#2:^(72),1:0))
</RetrievalCode>
</Data>
<Data name="Deprecated">
<RetrievalCode> s {Deprecated}=$s($d(^oddCOM({L1},17))#2:^(17),1:$s($d(^oddDEF({L1},17))#2:^(17),1:0))
</RetrievalCode>
</Data>
<Data name="Description">
<RetrievalCode> s {Description}=$s($d(^oddCOM({L1},4))#2:^(4),1:$s($d(^oddDEF({L1},4))#2:^(4),1:""))
</RetrievalCode>
</Data>
<Data name="DisableIncremental">
<RetrievalCode> s {DisableIncremental}=$s($d(^oddCOM({L1},95))#2:^(95),1:$s($d(^oddDEF({L1},95))#2:^(95),1:0))
</RetrievalCode>
</Data>
<Data name="Dynamic">
<RetrievalCode> s {Dynamic}=$s($d(^oddCOM({L1},30))#2:^(30),1:$s($d(^oddDEF({L1},30))#2:^(30),1:0))
</RetrievalCode>
</Data>
<Data name="EmbeddedClass">
<RetrievalCode> s {EmbeddedClass}=$s($d(^oddCOM({L1},100))#2:^(100),1:$s($d(^oddDEF({L1},100))#2:^(100),1:""))
</RetrievalCode>
</Data>
<Data name="Extents">
<RetrievalCode> n sub s {Extents}="",sub="" f  s sub=$o(^oddCOM({L1},77,sub)) q:sub=""  s {Extents}={Extents}_$lb($lb(sub,$g(^oddCOM({L1},77,sub))))
</RetrievalCode>
</Data>
<Data name="Final">
<RetrievalCode> s {Final}=$s($d(^oddCOM({L1},7))#2:^(7),1:$s($d(^oddDEF({L1},7))#2:^(7),1:0))
</RetrievalCode>
</Data>
<Data name="GeneratedBy">
<RetrievalCode> s {GeneratedBy}=$s($d(^oddCOM({L1},87))#2:^(87),1:$s($d(^oddDEF({L1},87))#2:^(87),1:""))
</RetrievalCode>
</Data>
<Data name="HasCPP">
<RetrievalCode> s {HasCPP}=$s($d(^oddCOM({L1},97))#2:^(97),1:$s($d(^oddDEF({L1},97))#2:^(97),1:""))
</RetrievalCode>
</Data>
<Data name="Hash">
<RetrievalCode> s {Hash}=$s($d(^oddCOM({L1},89))#2:^(89),1:$s($d(^oddDEF({L1},89))#2:^(89),1:""))
</RetrievalCode>
</Data>
<Data name="Hidden">
<RetrievalCode> s {Hidden}=$s($d(^oddCOM({L1},32))#2:^(32),1:$s($d(^oddDEF({L1},32))#2:^(32),1:0))
</RetrievalCode>
</Data>
<Data name="Import">
<RetrievalCode> s {Import}=$s($d(^oddCOM({L1},33))#2:^(33),1:$s($d(^oddDEF({L1},33))#2:^(33),1:""))
</RetrievalCode>
</Data>
<Data name="Importall">
<RetrievalCode> n sub s {Importall}="",sub="" f  s sub=$o(^oddCOM({L1},34,sub)) q:sub=""  s {Importall}={Importall}_$lb($lb(sub,$g(^oddCOM({L1},34,sub))))
</RetrievalCode>
</Data>
<Data name="IncludeCode">
<RetrievalCode> s {IncludeCode}=$s($d(^oddCOM({L1},35))#2:^(35),1:$s($d(^oddDEF({L1},35))#2:^(35),1:""))
</RetrievalCode>
</Data>
<Data name="IncludeCodeAll">
<RetrievalCode> n sub s {IncludeCodeAll}="",sub="" f  s sub=$o(^oddCOM({L1},36,sub)) q:sub=""  s {IncludeCodeAll}={IncludeCodeAll}_$lb($lb(sub,$g(^oddCOM({L1},36,sub))))
</RetrievalCode>
</Data>
<Data name="IncludeGenerator">
<RetrievalCode> s {IncludeGenerator}=$s($d(^oddCOM({L1},37))#2:^(37),1:$s($d(^oddDEF({L1},37))#2:^(37),1:""))
</RetrievalCode>
</Data>
<Data name="IncludeMGenAll">
<RetrievalCode> n sub s {IncludeMGenAll}="",sub="" f  s sub=$o(^oddCOM({L1},38,sub)) q:sub=""  s {IncludeMGenAll}={IncludeMGenAll}_$lb($lb(sub,$g(^oddCOM({L1},38,sub))))
</RetrievalCode>
</Data>
<Data name="IndexClass">
<RetrievalCode> s {IndexClass}=$s($d(^oddCOM({L1},81))#2:^(81),1:$s($d(^oddDEF({L1},81))#2:^(81),1:""))
</RetrievalCode>
</Data>
<Data name="Inheritance">
<RetrievalCode> s {Inheritance}=$s($d(^oddCOM({L1},92))#2:^(92),1:$s($d(^oddDEF({L1},92))#2:^(92),1:"left"))
</RetrievalCode>
</Data>
<Data name="InitialValue">
<RetrievalCode> s {InitialValue}=$s($d(^oddCOM({L1},94))#2:^(94),1:$s($d(^oddDEF({L1},94))#2:^(94),1:""))
</RetrievalCode>
</Data>
<Data name="KeywordError">
<RetrievalCode> s {KeywordError}=$s($d(^oddCOM({L1},12))#2:^(12),1:$s($d(^oddDEF({L1},12))#2:^(12),1:0))
</RetrievalCode>
</Data>
<Data name="KeywordModified">
<RetrievalCode> s {KeywordModified}=$s($d(^oddCOM({L1},13))#2:^(13),1:$s($d(^oddDEF({L1},13))#2:^(13),1:0))
</RetrievalCode>
</Data>
<Data name="LegacyInstanceContext">
<RetrievalCode> s {LegacyInstanceContext}=$s($d(^oddCOM({L1},96))#2:^(96),1:$s($d(^oddDEF({L1},96))#2:^(96),1:0))
</RetrievalCode>
</Data>
<Data name="Manifest">
<RetrievalCode> n sub s {Manifest}="",sub="" f  s sub=$o(^oddCOM({L1},103,sub)) q:sub=""  s {Manifest}={Manifest}_$lb($lb(sub,$g(^oddCOM({L1},103,sub))))
</RetrievalCode>
</Data>
<Data name="MemberSuper">
<RetrievalCode> s {MemberSuper}=$s($d(^oddCOM({L1},83))#2:^(83),1:$s($d(^oddDEF({L1},83))#2:^(83),1:""))
</RetrievalCode>
</Data>
<Data name="ModificationAuxiliary">
<RetrievalCode> s {ModificationAuxiliary}=$s($d(^oddCOM({L1},68))#2:^(68),1:$s($d(^oddDEF({L1},68))#2:^(68),1:""))
</RetrievalCode>
</Data>
<Data name="ModificationLevel">
<RetrievalCode> s {ModificationLevel}=$s($d(^oddCOM({L1},69))#2:^(69),1:$s($d(^oddDEF({L1},69))#2:^(69),1:9))
</RetrievalCode>
</Data>
<Data name="Modified">
<RetrievalCode> s {Modified}=$s($d(^oddCOM({L1},40))#2:^(40),1:$s($d(^oddDEF({L1},40))#2:^(40),1:3))
</RetrievalCode>
</Data>
<Data name="NoContext">
<RetrievalCode> s {NoContext}=$s($d(^oddCOM({L1},42))#2:^(42),1:$s($d(^oddDEF({L1},42))#2:^(42),1:0))
</RetrievalCode>
</Data>
<Data name="NoExtent">
<RetrievalCode> s {NoExtent}=$s($d(^oddCOM({L1},76))#2:^(76),1:$s($d(^oddDEF({L1},76))#2:^(76),1:0))
</RetrievalCode>
</Data>
<Data name="OdbcType">
<RetrievalCode> s {OdbcType}=$s($d(^oddCOM({L1},43))#2:^(43),1:$s($d(^oddDEF({L1},43))#2:^(43),1:"VARCHAR"))
</RetrievalCode>
</Data>
<Data name="OldHash">
<RetrievalCode> s {OldHash}=$s($d(^oddCOM({L1},101))#2:^(101),1:$s($d(^oddDEF({L1},101))#2:^(101),1:""))
</RetrievalCode>
</Data>
<Data name="Owner">
<RetrievalCode> s {Owner}=$s($d(^oddCOM({L1},44))#2:^(44),1:$s($d(^oddDEF({L1},44))#2:^(44),1:""))
</RetrievalCode>
</Data>
<Data name="PrimarySuper">
<RetrievalCode> s {PrimarySuper}=$s($d(^oddCOM({L1},45))#2:^(45),1:$s($d(^oddDEF({L1},45))#2:^(45),1:""))
</RetrievalCode>
</Data>
<Data name="ProcedureBlock">
<RetrievalCode> s {ProcedureBlock}=$s($d(^oddCOM({L1},46))#2:^(46),1:$s($d(^oddDEF({L1},46))#2:^(46),1:1))
</RetrievalCode>
</Data>
<Data name="Procedures">
<RetrievalCode> n sub s {Procedures}="",sub="" f  s sub=$o(^oddCOM({L1},47,sub)) q:sub=""  s {Procedures}={Procedures}_$lb($lb(sub,$g(^oddCOM({L1},47,sub))))
</RetrievalCode>
</Data>
<Data name="ProjectionClass">
<RetrievalCode> s {ProjectionClass}=$s($d(^oddCOM({L1},82))#2:^(82),1:$s($d(^oddDEF({L1},82))#2:^(82),1:""))
</RetrievalCode>
</Data>
<Data name="PropertyClass">
<RetrievalCode> s {PropertyClass}=$s($d(^oddCOM({L1},48))#2:^(48),1:$s($d(^oddDEF({L1},48))#2:^(48),1:""))
</RetrievalCode>
</Data>
<Data name="QueryClass">
<RetrievalCode> s {QueryClass}=$s($d(^oddCOM({L1},79))#2:^(79),1:$s($d(^oddDEF({L1},79))#2:^(79),1:""))
</RetrievalCode>
</Data>
<Data name="RandomSig">
<RetrievalCode> s {RandomSig}=$s($d(^oddCOM({L1},102))#2:^(102),1:$s($d(^oddDEF({L1},102))#2:^(102),1:""))
</RetrievalCode>
</Data>
<Data name="RoutineCount">
<RetrievalCode> s {RoutineCount}=$s($d(^oddCOM({L1},49))#2:^(49),1:$s($d(^oddDEF({L1},49))#2:^(49),1:0))
</RetrievalCode>
</Data>
<Data name="Routines">
<RetrievalCode> n sub s {Routines}="",sub="" f  s sub=$o(^oddCOM({L1},50,sub)) q:sub=""  s {Routines}={Routines}_$lb($lb(sub,$g(^oddCOM({L1},50,sub))))
</RetrievalCode>
</Data>
<Data name="ServerOnly">
<RetrievalCode> s {ServerOnly}=$s($d(^oddCOM({L1},88))#2:^(88),1:$s($d(^oddDEF({L1},88))#2:^(88),1:""))
</RetrievalCode>
</Data>
<Data name="SlotCount">
<RetrievalCode> s {SlotCount}=$s($d(^oddCOM({L1},51))#2:^(51),1:$s($d(^oddDEF({L1},51))#2:^(51),1:0))
</RetrievalCode>
</Data>
<Data name="SoapBindingStyle">
<RetrievalCode> s {SoapBindingStyle}=$s($d(^oddCOM({L1},70))#2:^(70),1:$s($d(^oddDEF({L1},70))#2:^(70),1:"document"))
</RetrievalCode>
</Data>
<Data name="SoapBodyUse">
<RetrievalCode> s {SoapBodyUse}=$s($d(^oddCOM({L1},71))#2:^(71),1:$s($d(^oddDEF({L1},71))#2:^(71),1:"literal"))
</RetrievalCode>
</Data>
<Data name="SqlCategory">
<RetrievalCode> s {SqlCategory}=$s($d(^oddCOM({L1},52))#2:^(52),1:$s($d(^oddDEF({L1},52))#2:^(52),1:"STRING"))
</RetrievalCode>
</Data>
<Data name="SqlQualifiedNameQ">
<RetrievalCode> s {SqlQualifiedNameQ}=$s($d(^oddCOM({L1},53))#2:^(53),1:$s($d(^oddDEF({L1},53))#2:^(53),1:$g(^%qCacheObjectKey(1,"c",53))))
</RetrievalCode>
</Data>
<Data name="SqlRoutinePrefix">
<RetrievalCode> s {SqlRoutinePrefix}=$s($d(^oddCOM({L1},54))#2:^(54),1:$s($d(^oddDEF({L1},54))#2:^(54),1:""))
</RetrievalCode>
</Data>
<Data name="SqlRowIdName">
<RetrievalCode> s {SqlRowIdName}=$s($d(^oddCOM({L1},55))#2:^(55),1:$s($d(^oddDEF({L1},55))#2:^(55),1:""))
</RetrievalCode>
</Data>
<Data name="SqlRowIdPrivate">
<RetrievalCode> s {SqlRowIdPrivate}=$s($d(^oddCOM({L1},56))#2:^(56),1:$s($d(^oddDEF({L1},56))#2:^(56),1:0))
</RetrievalCode>
</Data>
<Data name="SqlSchemaName">
<RetrievalCode> s {SqlSchemaName}=$s($d(^oddCOM({L1},57))#2:^(57),1:$s($d(^oddDEF({L1},57))#2:^(57),1:""))
</RetrievalCode>
</Data>
<Data name="SqlTableName">
<RetrievalCode> s {SqlTableName}=$s($d(^oddCOM({L1},58))#2:^(58),1:$s($d(^oddDEF({L1},58))#2:^(58),1:""))
</RetrievalCode>
</Data>
<Data name="StorageStrategy">
<RetrievalCode> s {StorageStrategy}=$s($d(^oddCOM({L1},59))#2:^(59),1:$s($d(^oddDEF({L1},59))#2:^(59),1:""))
</RetrievalCode>
</Data>
<Data name="Structure">
<RetrievalCode> s {Structure}=$s($d(^oddCOM({L1},90))#2:^(90),1:$s($d(^oddDEF({L1},90))#2:^(90),1:""))
</RetrievalCode>
</Data>
<Data name="Super">
<RetrievalCode> s {Super}=$s($d(^oddCOM({L1},60))#2:^(60),1:$s($d(^oddDEF({L1},60))#2:^(60),1:""))
</RetrievalCode>
</Data>
<Data name="System">
<RetrievalCode> s {System}=$s($d(^oddCOM({L1},61))#2:^(61),1:$s($d(^oddDEF({L1},61))#2:^(61),1:0))
</RetrievalCode>
</Data>
<Data name="Tables">
<RetrievalCode> n sub s {Tables}="",sub="" f  s sub=$o(^oddCOM({L1},62,sub)) q:sub=""  s {Tables}={Tables}_$lb($lb(sub,$g(^oddCOM({L1},62,sub))))
</RetrievalCode>
</Data>
<Data name="TimeChanged">
<RetrievalCode> s {TimeChanged}=$s($d(^oddCOM({L1},63))#2:^(63),1:$s($d(^oddDEF({L1},63))#2:^(63),1:""))
</RetrievalCode>
</Data>
<Data name="TimeCreated">
<RetrievalCode> s {TimeCreated}=$s($d(^oddCOM({L1},64))#2:^(64),1:$s($d(^oddDEF({L1},64))#2:^(64),1:""))
</RetrievalCode>
</Data>
<Data name="TriggerClass">
<RetrievalCode> s {TriggerClass}=$s($d(^oddCOM({L1},99))#2:^(99),1:$s($d(^oddDEF({L1},99))#2:^(99),1:""))
</RetrievalCode>
</Data>
<Data name="ViewQuery">
<RetrievalCode> s {ViewQuery}=$s($d(^oddCOM({L1},65))#2:^(65),1:$s($d(^oddDEF({L1},65))#2:^(65),1:""))
</RetrievalCode>
</Data>
<Data name="Views">
<RetrievalCode> n sub s {Views}="",sub="" f  s sub=$o(^oddCOM({L1},66,sub)) q:sub=""  s {Views}={Views}_$lb($lb(sub,$g(^oddCOM({L1},66,sub))))
</RetrievalCode>
</Data>
<Data name="XMLData">
<RetrievalCode> n sub s {XMLData}="",sub="" f  s sub=$o(^oddCOM({L1},85,sub)) q:sub=""  s {XMLData}={XMLData}_$lb($lb(sub,$g(^oddCOM({L1},85,sub))))
</RetrievalCode>
</Data>
<Data name="_Language">
<RetrievalCode> s {_Language}=$s($d(^oddCOM({L1},39))#2:^(39),1:$s($d(^oddDEF({L1},39))#2:^(39),1:"cache"))
</RetrievalCode>
</Data>
<Global>^oddCOM</Global>
<Structure>delimited</Structure>
<Subscript name="1">
<Expression>{%Dictionary.CompiledClass.Name}</Expression>
</Subscript>
<Type>data</Type>
</SQLMap>
<StreamLocation>^%Dictionary.CompiledClassS</StreamLocation>
<Type>%CustomStorage</Type>
}

}
