/// <div style="color:red;padding:5px; border:1px solid black; background:#FFFFAA;">
/// <b>Note:</b> This class is included because it is needed by
/// other parts of the library. You should not use this or any other class within
/// this package within your applications as a future version will
/// be incompatible. If you are interested in this functionality
/// please contact InterSystems.
/// </div><br/>
/// This is the base class for XGEN documents.<br>
/// <h1>XGEN: XML-based Code Generation Language</h1>
/// XGEN is a framework for creating specialized code generators that are driven by an XML-based specification.<br/>
/// <br/>
/// <b>Overview:</b><br/>
/// XGEN contains a set of base classes from which a user can implement an XML-based code generator.<br/>
/// <br/>
/// An XGEN document is an XML document that can be compiled into executable code.
/// Every activity within an XGEN document is implemented as a class.
/// <br/>
/// Within an XGEN document, each XGEN class provides the following:
/// <ul>
/// <li>The XML representation of the activity (i.e., its name and attributes).</li>
/// <li>Generation of code for the activity.</li>
/// <li>Generation of Studio Assist schema information.</li>
/// </ul>
Class %XGEN.AbstractDocument Extends (%XGEN.AbstractNode, %XGEN.AbstractGroup, %Studio.SASchemaClass) [ Abstract, Inheritance = right, System = 3 ]
{

/// This method is called from a method generator within a target class.
/// It generates code for the method.<br/>
/// <var>pTargetClass</var> is the compiled class definition for the target class.<br/>
/// <var>pCode</var> is a character stream that contains the generated code.<br/>
/// <var>pXDataName</var> is the name of the XData block containing the XGEN document definition.<br/>
ClassMethod %Generate(pTargetClass As %Dictionary.CompiledClass, pCode As %Stream.TmpCharacter, pXDataName As %String) As %Status
{
	Set tSC = $$$OK
	Try {
		If (pTargetClass.Abstract) Quit

		#; !!!
		Set tNS = $$$comMemberKeyGet(pTargetClass.Name,$$$cCLASSparameter,"NAMESPACE",$$$cPARAMdefault)
		Set tXMLNS = $$$comMemberKeyGet(pTargetClass.Name,$$$cCLASSparameter,"XMLNAMESPACE",$$$cPARAMdefault)
		If ((tNS'="")&&(tXMLNS="")) {
			#; If NAMESPACE is set, but XMLNAMESPACE is not,
			#; set XMLNAMESPACE to NAMESPACE
			$$$comMemberKeySet(pTargetClass.Name,$$$cCLASSparameter,"XMLNAMESPACE",$$$cPARAMdefault,tNS)
		}

		Do pCode.WriteLine(" // generated by " _ ..%ClassName(1))

		#; find the XDATA block containing the XGEN document
		Set tIndex = pTargetClass.XDatas.FindObjectId(pTargetClass.Name_"||"_pXDataName)
		If (tIndex = "") {
			#; no XDATA defined: generate default behavior
			Set tSC = ..%GenerateDefaultCode(pTargetClass, pCode, pXDataName)
		}
		Else {
			#; get XDATA as stream
			Set tStream = pTargetClass.XDatas.GetAt(tIndex).Data
			Do tStream.Rewind()
	
			If (tStream.Size <= 0) {
				#; no XDATA defined: generate default behavior
				Set tSC = ..%GenerateDefaultCode(pTargetClass, pCode, pXDataName)
			}
			Else {
				#; render the stream into page object (with children)
				Set tReader = ##class(%XML.Reader).%New()
	
				Set tSC = tReader.OpenStream(tStream)
				If $$$ISERR(tSC) Quit
	
				#; root-level object in the XML should be *this* class
				Set tXMLName = $S(..#XMLNAME="":..%ClassName(0),1:..#XMLNAME)
				Do tReader.Correlate(tXMLName,..%ClassName(1))
	
				#; there should only be one top-level object defined
				Do tReader.Next(.tRoot,.tSC)

				If $$$ISERR(tSC) Quit
				If '$IsObject(tRoot) {
					Set tSC = $$$ERROR($$$GeneralError,"No document defined in block: " _ pXDataName)
					Quit
				}

				#; Validate ...				
				Set tSC = tRoot.%ValidateObject()
				Quit:$$$ISERR(tSC)
				
				#; have root document generate code
				Set tSC = tRoot.%GenerateCode(pTargetClass, pCode, tRoot)
				If $$$ISERR(tSC) Quit
			}
		}
	}
	Catch(e) {
		Set tSC = e.AsStatus()
	}

	Quit tSC
}

/// This method is invoked when there is no XDATA block defined in the target
/// class.
ClassMethod %GenerateDefaultCode(pTargetClass As %Dictionary.CompiledClass, pCode As %Stream.TmpCharacter, pXDataName As %String) As %Status
{
	Quit $$$ERROR($$$GeneralError,"No XDATA '"_pXDataName_"' Defined in " _ pTargetClass.Name)
}

}
