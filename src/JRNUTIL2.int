ROUTINE JRNUTIL2 [Type=INT]
JRNUTIL2 ;      ;$Change: 4521965 $
 ; Revision: $Id: //adhocs/2016.2.3.904.11/DHC_SOFTWARE_CO_001/databases/sys/rtn/journal/jrnutil2.mac#1 $
 Q
 /*
 +--------------------------------------------------------+
 | Copyright 1986-2015 by InterSystems Corporation,       |
 | Cambridge, Massachusetts, U.S.A.                       |
 | All rights reserved.                                   |
 |                                                        |
 | Confidential, unpublished property of InterSystems.    |
 |                                                        |
 | This media contains an authorized copy or copies       |
 | of material copyrighted by InterSystems and is the     |
 | confidential, unpublished property of InterSystems.    |
 | This copyright notice and any other copyright notices  |
 | included in machine readable copies must be reproduced |
 | on all authorized copies.                              |
 +--------------------------------------------------------+
 */
 /* Revision: $Id: //adhocs/2016.2.3.904.11/DHC_SOFTWARE_CO_001/databases/sys/inc/FILEINC.inc#1 $ ($Change: 4521965 $) */
 /* Revision: $Id: //adhocs/2016.2.3.904.11/DHC_SOFTWARE_CO_001/databases/sys/inc/_syJrninc.inc#1 $ ($Change: 4521965 $) */
HISTCVT ;convert old form of journal history to new form (with trailing "J")
 n jrnhist,jf
 s jrnhist=$name(^%SYS("JOURNAL","HISTORY"))
 s $zt="etHISTCVT"
 s jf="" f  s jf=$o(@jrnhist@(jf)) q:jf=""  d:jf'["J"
 . m @jrnhist@(jf_"J")=@jrnhist@(jf)  
 . k @jrnhist@(jf)  
 q    
etHISTCVT ;
 s $zt=""
 i $ze'="" d $zu(9,"","HISTCVT:"_$ze,(0>0),0)
 q
HistCvtGloToLog(mgdir,jrnlogpath,debug) [] PUBLIC {
 d $zu(9,"","Converting journal history global to journal log",(0>0),0)
 i '$D(mgdir) s mgdir=$ZU(12)
 e  s mgdir=$zu(12,mgdir)
 s mgns="^^"_mgdir
 i $g(jrnlogpath)="" s jrnlogpath=mgdir_"journal.log"
 s sysjrnglo=$name(^|mgns|%SYS("JOURNAL"))
 i $zu(140,1,jrnlogpath)>0 {	// there exists a journal.log file
   s oldlogpath=mgdir_"jrnlog.old"
   s errcode=$zu(140,6,jrnlogpath,oldlogpath)
   i errcode {
     d $zu(9,"","Error "_errcode_" renaming the old "_jrnlogpath_" to "_oldlogpath,(2>0),2)
     d $zu(9,"","Aborted operation to convert journal history to "_jrnlogpath,(2>0),2)
     q
   } else {
     d $zu(9,"","The old "_jrnlogpath_" has been renamed to "_oldlogpath,(0>0),0)
   }
 }
 s jrnflist=0 ;initial file index
 s lastfile=""
 i mgdir=$ZU(12) {
   s lastfile=$zu(78,3)
   i lastfile="" {	// journaling is off
     s lastfile=$p($zu(78,21),",",2)
   }
 }
 i lastfile="" {
   s lastfile=$P($G(@sysjrnglo@("WIJFILE")),",",1)
 }
 i lastfile="" && ($p($g(@sysjrnglo@("LAST")),",",2)]"") {	
   s lastfile=$p($G(@sysjrnglo@("LAST")),"^",2)
 }
 i lastfile]"" {
   f  {
     i $ZU(78,22,lastfile)<1 s lastfile="" q  ;a broken chain
     s nextfile=$P($zu(78,22,lastfile,2),",",2) q:nextfile=""
     s lastfile=nextfile
   }
 }
 i lastfile="" {
   s curdir=$g(@sysjrnglo@("CURDIR")) 
   i curdir]"" s curdir=$zu(12,curdir),jrndir(curdir)=""
   s altdir=$g(@sysjrnglo@("ALTDIR")) 
   i altdir]"" s altdir=$zu(12,altdir),jrndir(altdir)=""
   s prefix=$g(@sysjrnglo@("PREFIX"))
   s jrndir="",lastname="" f  {
     s jrndir=$o(jrndir(jrndir)) q:jrndir=""
     s prename=$zu(12,jrndir_prefix,prefix="") ;put prefix in "canonical" file form
     s prenamelen=$l(prename)
     s wildpath=prename_"*.*"
     s filepath=$zse(wildpath)
     f  {
       q:filepath=""  s filepath=$zu(12,filepath)
       i $e(filepath,1,prenamelen)=prename {
         i ($zversion(1)=1) { 
	   s filepath=$p(filepath,";") ;strip trailing version number if any
	 }
	 s filename=$e(filepath,prenamelen+1,$l(filepath))
         i filename?8N1"."3.10N,(($p(filename,".")>$p(lastname,"."))||(($p(filename,".")=$p(lastname,"."))&&($p(filename,".",2)>$p(lastname,".",2)))),$ZU(78,22,filepath)>0 {
	   s lastfile=filepath,lastname=$case($ZBITGET($ZVERSION(0),46),0:$case($f(lastfile,";"),0:$e(lastfile,*-8-$l($p(lastfile,".",$l(lastfile,"."))),*),:$e(lastfile,*-8-$l($p(lastfile,".",$l(lastfile,"."))),$f(lastfile,";")-2)),:lastfile)
	 }
       }
       s filepath=$zse("")
     }
   }
 }
 i lastfile="" {
   d $zu(9,"","No journal history to convert",(1>0),1)
   q
 }
 f  {
   s rc=$$PREVJRN^JRNUTILOLD(lastfile,.prevfile,0,mgdir) 
   i 'rc q  ;lastfile is bad or doesn't exist
   s jrnflist($i(jrnflist,-1))=lastfile
   i rc<0 q  ;errors preventing us from continuing
   i prevfile="" q  ;no next file -- done
   s lastfile=prevfile
 }
 s Status=##class(%SYS.Journal.History).Build(jrnlogpath,.jrnflist)
 i Status {
   d $zu(9,"","Created "_jrnlogpath_" using information on existing journal files",(0>0),0)
   i mgdir=$zu(12) k @sysjrnglo@("HISTORY")
 } else {
   d $zu(9,"","Error building journal.log: "_$System.Status.GetErrorText(Status),(2>0),2)
 }
 q
}
 ; input: 
 ;   jrnfile: long form of new-styled journal file name
 ;   within (default=0): 1=stay within [START,STOP] boundary
 ;   mgdir when present is where to find %SYS. This is used in
 ;       restoring other cluster member's journal files when we
 ;       need to read their journal history.
 ;	 mironly (default=0): 1=show only mirror journal files (i.e., read from mirrorjrn-<mirname>.log)
 ; output:
 ;   prevfile: long form of prev journal file name (""=no prev file)
 ;   return 1 (=success) or errcode (0 or negative)
 ; error code:
 ;   0=file name format not supported or bad jrnfile (nonexistent or corrupted)
 ;  -1=previous file is not a journal file or does not exist
 ;  -2="missing directory information"
 ;  -3="program error"
 ;  -4="<UNDEFINED> error likely due to incomplete history record"
 ;  -5="weird"
 ;  -6=infinite loop in journal file link, possibly the resutl of setting
 ;     back system date
 ;  -7="unable to lock journal history log for read"
 ;  -8="unable to open journal history log"
 ;  -9="error reading journal history log"
PREVJRN(jrnfile,prevfile,within,mgdir,mironly,mirname="") 
	if $ZBITGET($ZVERSION(0),46) {
		quit $$PREVJRNds(jrnfile,.prevfile)
	}
 i '$S($ZBITGET($ZVERSION(0),2):$V($ZU(40,2,136),-2,4),1:0) n mgdir ; ignore on non-clustered systems
 s $zt="etNXPVJRN"
 n mgns,return,jrnhist,ret,next,curdir,altdir,prefix,pfile,prev
 i '$D(mgdir) s mgdir=$ZU(12)
 s mgns="^^"_mgdir
 n prevguid,prevret
 s return=$zu(78,22,jrnfile,99)
 s prevfile=$p(return,",",1+1)
 s prevguid=$p(return,",",6+1)
 i return>0 s return=1 ;checked by the code below to indicate jrnfile is good
 i prevguid'="" {
   s prevret=$zu(78,22,prevfile,99)
   i prevret>0 {
     i prevguid'=$p(prevret,",",7+1) {
       s prevfile="" 
     }
     i '$g(mironly) q 1 
   }
 }
 s within=$g(within) q:within +return
 s mironly=+$g(mironly)
 if mironly s prevfile=""  
 ;jrnfile is corrupted (return=-1) or nonexistent (return=0)
 i 'mironly,+return'=1 q 0
 i mironly,jrnfile]"",+return'=1 q 0
 ;or prevfile is located via back pointer
 q:prevfile'="" 1
 n jrnlogfile,filepath,thisguid,rc,miridx,etstate
 s jrnlogfile=mgdir_"journal.log"
 s $zt="ErrLog"
 s miridx=0
 i mironly { 
 	n mm
    if $SYSTEM.Mirror.IsMember() {
 		if mirname="" s mirname=##class(Config.Mirrors).GetMirrorName()
	 	s jrnlogfile=mgdir_"mirrorjrn-"_mirname_".log"
 		s miridx=$SYSTEM.Mirror.MirrorNameToIndex(mirname,0)
 		i miridx<0 s miridx=0
 		s miridx=miridx+1
 	}
 }
 i $zu(78,79,0,1,miridx)
 s etstate=1 ;log file locked (must be released upon exit)
 o jrnlogfile:($s(($zversion(1)=1):"rh",1:"r"):/IOT="UTF8"):0 e  d   q -8
 . i $zu(78,79,0,0,miridx)
 . d $zu(9,"","PREVJRN: failed to open journal log "_jrnlogfile)
 s rc=##class(%SYS.Journal.System).GetHistoryHeader(jrnlogfile,,miridx) ;skip header
 i 'rc c jrnlogfile d $zu(78,79,0,0,miridx),$zu(9,"","PREVJRN: "_rc) q -9_","_rc
 s zeofset=$zu(68,40,1),filepath=""
 s thisguid=$zu(78,22,jrnfile,7) ;return "7,GUID" or <=0 (nonexisting jrnfile)
 i thisguid>0 {	;jrnfile exists
   s thisguid=$p(thisguid,",",2) ;GUID of jrnfile
   f  {
     u jrnlogfile r logline 
     i $ZEOF s filepath="" q  ;jrnfile not found
     i logline="" continue  ;skip blank lines
     i miridx {
	    s prevfile=filepath,filepath=$p(logline,",",1),guid=$p(logline,",",3) 
     }
     else {
     	s prevfile=filepath,filepath=$p(logline,",",2),guid=$p(logline,",",4)
     }
     i guid=thisguid q  ;found jrnfile and its previous file
   }
 } else {	;jrnfile doesn't exist or is not accessible
   f  {
     u jrnlogfile r logline 
     i $ZEOF s:'miridx filepath="" q  ;jrnfile not found
     i logline="" continue  ;skip blank lines
     i miridx {
	    s prevfile=filepath,filepath=$p(logline,",",1) 
     }
     else {
     	s prevfile=filepath,filepath=$p(logline,",",2) 
     }
     i filepath=jrnfile q  ;found jrnfile and its previous file
   }
   i miridx,jrnfile="" s jrnfile=filepath
 }
 i 'zeofset,$zu(68,40,0) ;restore <ENDOFFILE>
 c jrnlogfile
 i $zu(78,79,0,0,miridx)
 q (filepath]"") ;1 if jrnfile is found in the log (prevfile can be "")
 ;---------------------------------------------------------------
 ; input: 
 ;   jrnfile: long form of new-styled journal file name
 ;   within (default=0): 1=stay within [START,STOP] boundary
 ;   mgdir when present is where to find %SYS. This is used in
 ;       restoring other cluster member's journal files when we
 ;       need to read their journal history.
 ;	 mironly (default=0): 1=show only mirror journal files (i.e., read from mirrorjrn-<mirname>.log)
 ; output:
 ;   nextfile: long form of next journal file name (""=no next file)
 ;   return 1 (=success) or errcode (0 or negative)
 ; error code:
 ;   0="file name format not supported"
 ;  -1="next is not a journal file"
 ;  -2="missing directory information"
 ;  -3="program error"
 ;  -4="<UNDEFINED> error likely due to incomplete history record"
 ;  -7="unable to lock journal history log for read"
 ;  -8="unable to open journal history log"
 ;  -9="error reading journal history log"
NEXTJRN(jrnfile,nextfile,within,mgdir,mironly,mirname) ;
 i '$S($ZBITGET($ZVERSION(0),2):$V($ZU(40,2,136),-2,4),1:0) n mgdir ; ignore on non-clustered systems
 s $zt="etNXPVJRN"
 if $ZBITGET($ZVERSION(0),46) {
 	 s nextfile=$zu(78,22,jrnfile,2)
 	 q:+nextfile'=2 0  ;failed, nextfile = error code
 	 s nextfile=$p(nextfile,",",2)   ;next file or ""
 	 q 1
 }
 n mgns,jrnhist,prev,x,ret,found
 n dir1,dir2,prefix,date,hdate,seq ;associated with jrnfile
 n limit,limitj,seql,dirl ;associated with limit
 i '$D(mgdir) s mgdir=$ZU(12)
 s mgns="^^"_mgdir
 s mironly=+$g(mironly)
 i jrnfile'?8N1"."3.10N s nextfile=$zu(78,22,jrnfile,2) q:+nextfile'=2 0 s nextfile=$p(nextfile,",",2) s:mironly nextfile="" q:nextfile]"" 1
 if 'mironly,(+$P($ZU(78,22,jrnfile,13),",",2)) {
	 s nextfile=$$NextJournalFromJournalLog^JRNUTIL(jrnfile,.rc)
     i +rc<0 q 0  ;nextfile is ""
	 quit 1  ;nextfile is name of next journal file (could be "" if there isn't one)
 }
 n jrnlogfile,filepath,zeofset,thisguid,guid,rc,etstate
 s jrnlogfile=mgdir_"journal.log"
 s $zt="ErrLog"
 n miridx s miridx=0
 i mironly { 
 	n mm
    if $SYSTEM.Mirror.IsMember() {
 		if $g(mirname)="" s mirname=##class(Config.Mirrors).GetMirrorName()
	 	s jrnlogfile=mgdir_"mirrorjrn-"_mirname_".log"
 		s miridx=$SYSTEM.Mirror.MirrorNameToIndex(mirname,0)
 		i miridx<0 s miridx=0
 		s miridx=miridx+1
 	}
 }
 i $zu(78,79,0,1,miridx)
 s etstate=1 ;log file locked (must be released upon exit)
 o jrnlogfile:($s(($zversion(1)=1):"rh",1:"r"):/IOT="UTF8"):0 e  d   q -8
 . i $zu(78,79,0,0,miridx)
 . d $zu(9,"","NEXTJRN: failed to open journal log "_jrnlogfile)
 s rc=##class(%SYS.Journal.System).GetHistoryHeader(jrnlogfile) ;skip header
 i 'rc c jrnlogfile d $zu(78,79,0,0,miridx),$zu(9,"","NEXTJRN: "_rc) q -9_","_rc
 s zeofset=$zu(68,40,1),filepath="",nextfile="",found=0
 s etstate=2 ;log file opened (must be closed upon exit)
 s thisguid=$zu(78,22,jrnfile,7) ;return "7,GUID" or <=0 (nonexisting jrnfile)
 i thisguid>0 {
   s thisguid=$p(thisguid,",",2) ;GUID of jrnfile
   f  {
     u jrnlogfile r logline i $ZEOF=-1 q  ;nextfile="" (filepath=jrnfile or not)
     i logline="" continue  ;skip blank lines
     i found s nextfile=$s(mironly:$p(logline,",",1),1:$p(logline,",",2)) q
     s guid=$s(mironly:$p(logline,",",3),1:$p(logline,",",4)),found=(guid=thisguid)
   }
 } else {
   f  {
     u jrnlogfile r logline i $ZEOF=-1 q  ;nextfile="" (filepath=jrnfile or not)
     i logline="" continue  ;skip blank lines
     i found s nextfile=$s(mironly:$p(logline,",",1),1:$p(logline,",",2)) q
     s filepath=$s(mironly:$p(logline,",",1),1:$p(logline,",",2)),found=(jrnfile=filepath)
   }
 }
 i 'zeofset,$zu(68,40,0) ;restore <ENDOFFILE>
 c jrnlogfile
 i $zu(78,79,0,0,miridx)
 q found ;0 = jrnfile (not nextfile) is not found in the log
ErrLog s $zt="" d BACK^%ETN i $zu(9,"",$ze)
 i $g(etstate)=2 d
 . i '$g(zeofset,1),$zu(68,40,0) ;skip if zeofset is undefined or set to 1
 . c jrnlogfile
 i +$g(etstate)>=1,$d(miridx) d $zu(78,79,0,0,miridx)
 ztrap $ze  ;pass it on to upper error handler
etNXPVJRN 
 s $zt=""
 i $ze["UNDEFINED" s $zt="etNXPVJRN" q "-4missing "_$zr_" ?"  ;$zr would never generate <UNDEFINED> error
 q -3_$ze
ERNXPVJRN(err,file,order) ;order: 1=errors in NEXTJRN, -1=PREVJRN
 s $zt="etERNXPVJRN"
 n errcode s err=$g(err),file=$g(file),errcode=+err,order=+$g(order,1)
 i errcode=-1 q "the "_$s(order=-1:"prev",1:"next")_" file of "_file_" is not a journal file or does not exist"
 i errcode=-2 q "missing directory information in journal history"
 i errcode=-3!(errcode=-4) q $e(err,3,$l(err))
 i errcode=-5,order=-1 q "error in finding previous file of "_file
 i errcode=-6,order=-1 q "infinite loop @ "_$p(err,",",2)_" in journal file link, possibly resulting from setting back system date"
 i errcode=0 q file_" is not a journal file or does not exist"
 i errcode=-8 q "unable to open journal history log"
 i errcode=-9 q "error reading journal history log"
 q ""
etERNXPVJRN
 s $zt=""
 q $ze
 ; PREVJRNds is the PREVJRN function for USEDSONLY builds.
 ; This takes the same inputs as PREVJRN and return the same
 ;     output. For USEDSONLY builds the prior journal file is
 ;     always read from the journal header of the current journal
 ;     file but we need to check the journal file sequence #'s
 ;     to detect wrap around and ensure that the prior file listed
 ;     actually preceeds the current file.
 ; input: 
 ;   jrnfile: long form of new-styled journal file name
 ; output:
 ;   prevfile: long form of prev journal file name (""=no prev file)
 ;   return 1 (=success) or errcode (0 or negative)
 ; error code:
 ;   0=file name format not supported or bad jrnfile (nonexistent or corrupted)
 ;  -1=previous file is not a journal file or does not exist
 ;  -3="program error"
PREVJRNds(jrnfile,prevfile) PUBLIC {
	 s $zt="err"
	 s curinfo=$zu(78,22,jrnfile,99)
	 if +curinfo<=0 {
		 quit 0  ;input file is not a journal file or doesn't exist
	 }
	 s curjrnfilecnt=$P(curinfo,",",9+1)  ;+1 because of return code
	 s prevfile=$P(curinfo,",",1+1)
	 if prevfile="" {
		 ; This file was created by ^JRNSTART and there
		 ; isn't any prior file (for USEDSONLY, we set the prior
		 ; file to null during jrnstart)
		 quit 1
	 }
	 s previnfo=$zu(78,22,prevfile,99)
	 if +previnfo<=0 {
		 s prevfile=""
		 quit -1  ;prior file is not a journal file or doesn't exist
	 }
	 s prevjrnfilecnt=$P(previnfo,",",9+1)
	 if (prevjrnfilecnt+1)'=curjrnfilecnt {
		 s prevfile=""
	 }
	 quit 1
err	;
	s $zt=""
	quit -3  ;unexpected error	 
}
 ; BITWISE.INC, DPB139 07/09/93
FIXDIR(dir) ;procedure, dir is passed by reference
 Q:dir=""
 i ($zversion(1)=1) d
 . n x
 . s x=$$ChkDirVALID(dir)
 . i x'="" s dir=x
 i '($zversion(1)=1) Q:$A(dir,$L(dir))=$A($s(($zversion(1)=3):"/",($zversion(1)=1):"]",($zversion(1)=2):"\",1:""))
 i '($zversion(1)=1) s dir=dir_$s(($zversion(1)=3):"/",($zversion(1)=1):"]",($zversion(1)=2):"\",1:"")
 Q
fixdir(dir) ;function
 Q:dir="" ""
 i ($zversion(1)=1) d  q dir
 . n x
 . s x=$$ChkDirVALID(dir)
 . i x'="" s dir=x
 Q:$A(dir,$L(dir))=$A($s(($zversion(1)=3):"/",($zversion(1)=1):"]",($zversion(1)=2):"\",1:"")) dir
 Q dir_$s(($zversion(1)=3):"/",($zversion(1)=1):"]",($zversion(1)=2):"\",1:"")
basename(f) ;similar to basename on UNIX
 Q $P(f,$s(($zversion(1)=3):"/",($zversion(1)=1):"]",($zversion(1)=2):"\",1:""),1,$L(f,$s(($zversion(1)=3):"/",($zversion(1)=1):"]",($zversion(1)=2):"\",1:""))-1)_$s(($zversion(1)=3):"/",($zversion(1)=1):"]",($zversion(1)=2):"\",1:"")
appdir(d1,d2) ;use $zu(12,d2) to append d2 to canonic dir
 i ($zversion(1)=1) S $E(d1,$L(d1))="."_d2_"]"
 i '($zversion(1)=1) S d1=d1_d2
 Q d1
VALIDIR(dir) ;validate directory dir and create it if dir doesn't exist
 new flag
 s flag=1
 g vdir2
validir(dir,flag) ;validate directory dir and optionally create it if it
vdir2 ; VALIDIR(dir) comes here with flag set to 1
 quit:$$ChkDirOrSpecEXISTS(dir)'="" 1   ; dir is valid and exists
 quit:$$ChkDirVALID(dir)="" 0    ; dir is not valid
 i flag'=1 q 0  ; flag says don't create, return failure
 new x
 set x=$$mkdir(dir)  ; returns 0 for success, 1 for failure
 q:x=1 0  ; failed to create
 quit:$$ChkDirOrSpecEXISTS(dir)="" 0   ; it doesn't we failed
 q 1  ; success
mkdir(dir) ;create a new directory
 i ($zversion(1)=1) q:$$ChkDirVALID(dir)="" 1  ; dir is invalid, return failure
 q '##class(%Library.File).CreateDirectoryChain(dir)
jrnshort(jf,short) ;get/set short form of a journal file name FIXME HYY1999
         N (jf,short)
         S len=$L($P(jf,";"))
         Q:$G(short)="" $E(jf,len-11,len) ;"GET" form
         S $E(jf,len-11,len)=short ;"SET" form
         Q jf
GJrnPrefix(jf) ;extract prefix from the journal file name jf
         N (jf)
         S fname=$P(jf,$s(($zversion(1)=3):"/",($zversion(1)=1):"]",($zversion(1)=2):"\",1:""),$L(jf,$s(($zversion(1)=3):"/",($zversion(1)=1):"]",($zversion(1)=2):"\",1:"")))       
         Q $e(fname,1,$l($p(fname,"."))-8)
GetJrnFileName(path) { 
	i $f(path,"/") q $p(path,"/",$l(path,"/")) ;presumably a Unix path
	if $f(path,"\") q $p(path,"\",$l(path,"\")) ;presumably a Windows path
	s vmsfile=$p(path,"]",2) i vmsfile="" q path ;a name only, not a path
	q $p(vmsfile,";") ;return name from a VMS path without trailing ";"
}
dirinvalidmsg(dir1,dir2) 
 n valid1,valid2,cnt,msg
 s valid1=$$VALIDIR(dir1),valid2=$$VALIDIR(dir2)
 s cnt=valid1+valid2 ; cnt = 0 if both invalid, 1 if one is valid
 s msg="The following journaling "
 s:cnt msg=msg_"directory is" 
 s:'cnt msg=msg_"directories are"
 s msg=msg_" not valid"_$C(13,10)
 s:'valid1 msg=msg_"     "_dir1_$C(13,10)
 s:'valid2 msg=msg_"     "_dir2_$C(13,10)
 q msg
ChkDirVALID(R) S $ZE="",$ZT="ChkBad" q:R[":mirror:" R q $ZU(12,R,1)
ChkDirEXISTS(R) S $ZE="",$ZT="ChkBad" q:R[":mirror:" R q $ZU(12,R,2)
ChkDirOrSpecEXISTS(R) S $ZE="",$ZT="ChkBad" q:R[":mirror:" R q $ZU(12,R,3)
ChkDir(R) N N S $ZE="",$ZT="ChkBad" q:R[":mirror:" R q $ZU(12,R,2)
ChkBad S $ZT="" W !,"<"_$P($P($ZE,"<",2),">")_"> error -- invalid directory"
 Q ""