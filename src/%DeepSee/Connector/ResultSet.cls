Include (%occUtility, %DeepSee)

/// This is the base class for Custom ResultSets generated by DeepSee Connectors.
Class %DeepSee.Connector.ResultSet Extends %SQL.CustomResultSet [ Abstract, System = 4 ]
{

/// Name of connector class that created this result set.
Parameter CONNECTOR As STRING;

/// DataConnector object that owns this result set instance.
Property %connector As %DeepSee.DataConnector [ Private ];

/// Source Result Set object that provides the records to the connector.
/// It is also possible to create a DataConnector without a source result set.
/// In that case, this property will be set to "".
Property %sourceResultSet As %SQL.IResultSet [ Private ];

/// Initialize the result set.
Method %OpenCursor(pRowCount As %Integer = 100) As %Status
{
	Set tSC = $$$OK
	Try {
		// Wrapper is passed in at contructor time
		Set ..%connector = $G(%connector)
		If '$IsObject(..%connector) {
			Set tSC = $$$ERROR($$$GeneralError,"%DeepSee.Connector not supplied with Connector object.")
			Quit
		}

		// Get a result set from the definition class
		Merge tParms = ..%connector.%parameters
		Set tSC = ..%connector.%GetSourceResultSet(.tParms,.tResultSet)
		If $$$ISERR(tSC) Quit

		Set ..%sourceResultSet = tResultSet
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	// work-around to catch errors
	If ($$$ISERR(tSC)&&($D(%sc))) {
		Set %sc = tSC
	}
	Quit tSC
}

/// Actual implementation is generated in a subclass.
Method %Next(ByRef pSC As %Library.Status = {$$$OK}) As %Library.Integer
{
	Set ..%SQLCODE = 100
	Quit 0
}

/// Close the source result set.
Method %CloseCursor() As %Status
{
	Set tSC = $$$OK
	Try {
		Set ..%sourceResultSet = ""
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Set tSC = $$$OK
	Quit tSC
}

}
