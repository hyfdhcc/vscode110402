ROUTINE SWSET [Type=INT]
SWSET ;Software switch set.  (FLH, MS) ; SML681 02/15/06
 /*
 +--------------------------------------------------------+
 | Copyright 1986-2015 by InterSystems Corporation,       |
 | Cambridge, Massachusetts, U.S.A.                       |
 | All rights reserved.                                   |
 |                                                        |
 | Confidential, unpublished property of InterSystems.    |
 |                                                        |
 | This media contains an authorized copy or copies       |
 | of material copyrighted by InterSystems and is the     |
 | confidential, unpublished property of InterSystems.    |
 | This copyright notice and any other copyright notices  |
 | included in machine readable copies must be reproduced |
 | on all authorized copies.                              |
 +--------------------------------------------------------+
 */
 N %SW,%VAL
GO R !,"Set/Clear switch #: ",%SW Q:%SW=""
 I %SW?1.2N,%SW<32
 E  W *7,"  [0-31]" G GO
 ;
RVAL R " to value (0 or 1): ",%VAL Q:%VAL=""
 I "10"[%VAL=$L(%VAL) D INT W:success "...done" Q
 W *7,"  [0 OR 1]" G RVAL
INT N %T,JOB10 S %T=0 IF %SW=10 ZA %SWITCH(10) D CHECK10
 D SET:%SW'=10!%T
 S success=%SW'=10!%T ZD %SWITCH(10) Q
CHECK10 
 S %T=$SYSTEM.Util.GetSwitch(10)
 I %VAL {
    ;%VAL=1 returns %T=1 if Sw10 is clear or we own it
    If ('+%T)!(+$P(%T,",",2)=+$J) {Set %T=1} else {Set %T=0}
 } else {
    ;%VAL=0 means %T=1 only if we own Switch 10
    If (+%T)&(+$P(%T,",",2)=+$J) {Set %T=1} else {Set %T=0}
 }
 Q
SET Do $SYSTEM.Util.SetSwitch(%SW,%VAL)
 quit
 Q
 ;Purpose: set/clear switch locally and cluster wide with timeout
 ;Parameters:
 ; sw: switch # (10 or 13 only)
 ; val: 1 to set or 0 to clear
 ; noloc: (optional) 1 if switch is already set locally (default=0)
 ; qma: (optional) 1 if only master to be quiesced
 ;Return: 1 on success or 0 if unable to quiesce or followed by ",$ze"
 ;        always release switch (if it was set here) before returning 0
CLU(sw,val,noloc,qma) ;set/clear switch locally and cluster wide with timeout
 n rc s $zt="CLUet0"
 i $g(sw)-10,$g(sw)-13 ztrap "SWITCH" ;for switch 10 or 12 only
 i '$s($S($ZBITGET($ZVERSION(0),2):$V($ZU(40,2,136),-2,4),1:0):''$zu(59,0),1:0) ztrap "CLUSTER" ;for cluster systems only
 ;to clear the switch
 i 'val d $zu(95,sw,0) s %SW=sw,%VAL=0 D:'$g(noloc) INT^SWSET q 1
 ;to set the switch
 i +$g(qma) s %SW=sw,%VAL=1 D:'$g(noloc) INT^SWSET d $zu(95,sw,1) s rc=$$CluQuiet(sw,2) d:'rc CLU(sw,0,$g(noloc)) q rc
 ;to suspend a ECP/DCP-based cluster, first suspend slaves only 
 d $zu(95,sw,1,1) s $zt="CLUet1"
 ;setting switch cluster wide doesn't result in setting switch locally, 
 ;thus we have to set local switch if we are not the master.
 i '($p($zu(59,0),",",3)=$zu(40,0,73)),'$g(noloc) s %SW=sw,%VAL=1 d INT^SWSET s $zt="CLUet2"
 ;if fail to quiesce slaves, clear switch and exit with error
 i '$$CluQuiet(sw,1) d $zu(95,sw,0,1) s %SW=sw,%VAL=0 D:'$g(noloc) INT^SWSET q 0
 ;now suspend the master
 i '($p($zu(59,0),",",3)=$zu(40,0,73)) d $zu(95,sw,1)
 e  i '$g(noloc) s %SW=sw,%VAL=1 d INT^SWSET
quietall ;
 s $zt="CLUet3"
 ;quiesce the master (and the cluster, as slaves must be quiet by now)
 i '$$CluQuiet(sw) d CLU(sw,0,$g(noloc)) q 0
 q 1
CLUet3 s $zt=""
 i $$CLU(sw,0,$g(noloc))
 g CLUet0
CLUet2 s $zt=""
 s %SW=sw,%VAL=0 d INT^SWSET
 ; CLUet2 falls through to CLUet1
CLUet1 s $zt=""
 i $zu(95,sw,0,1)
 ; CLUet1 falls through to CLUet0
CLUet0 s $zt=""
 d $zu(9,"","ERROR: "_$ze,(0>0),0)
 q 0_","_$ze
TQUIWRITE(verbose) q $$QUIESCE(1,"buffer activity",10,verbose)
TQUIGC(verbose) q $$QUIESCE(2,"garbage collection",10,verbose)
TQUIDB(verbose) q $$QUIESCE(4,"database expansion",10,verbose)
TQUIGLO(verbose) q $$QUIESCE(8,"global activity",10,verbose)
TQUIGLOUPD(verbose) q $$QUIESCE(16,"global updates",10,verbose)
TQUINET(verbose) q $$QUIESCE(32,"network activity",10,verbose)
TQUIDISK(verbose) q $$QUIESCE(1+2,"disk activity",10,verbose)
TQUIUPD(verbose) q $$QUIESCE(1+2+4+16,"update activity",10,verbose)
TQUISYS(verbose) q $$QUIESCE(1+2+4+8,"system activity",10,verbose)
QUIESCE(bits,text,retries,verbose,intv) ;
 s verbose=+$g(verbose),retries=+$g(retries,-1),intv=+$g(intv,1)
 q ($$Quiesce(bits,text,retries,verbose,intv)>0)
Quiesce(bits,text,retries,verbose,intv) ;
 n noWDbits  ;JO1988
 s $zt="QUIESCEE"
 q:$zu(51,bits) 1 ;double checking $ZU(51) is no longer necessary
 s verbose=+$g(verbose),retries=+$g(retries,-1),intv=+$g(intv,1)
 i verbose w $c(13,10)_"WARNING: Switch is set and may affect production for up to "_(retries*intv)_" seconds."_$c(13,10)_"Waiting for "_text_" to finish..."
 f  q:'retries  h intv q:$zu(51,bits)  s retries=retries-1 i retries#5=0 i verbose w "."
 s noWDbits=1
 s:$s($S($ZBITGET($ZVERSION(0),2):$V($ZU(40,2,136),-2,4),1:0):''$zu(59,0),1:0) noWDbits=noWDbits+2
 s noWDbits=$zboolean(bits,noWDbits,2)  ;2 = x & ~ y
 if '$ZU(51,bits),bits'=1,$zboolean(bits,1,1),$zu(51,noWDbits) {
	 i verbose w $c(13,10)_"System is idle except WD is still running."_$c(13,10)_"     Waiting up to 2 minutes for WD to finish"
	 f i=1:1:120 q:$ZU(51,bits)  h 1 if i#5=0 i verbose w "."
	 if $ZU(51,bits) s retries=1 ;signal success
 }
 i verbose w $s(retries:" ready.",1:" abort. "_$$quiescefailmsg(bits))_$c(13,10)
 q retries
quiescefailmsg(bits)
 N ret,clu,clumsg s ret="",clu=$zb(bits,512+256+128,1),clumsg=""
 if $zb(clu,128,1)||($zb(clu,(256+512),1)=(256+512)) s clu=128,clumsg=" (cluster wide)"
 if $zb(clu,512,1) s clumsg=" (cluster master only)"
 if $zb(clu,256,1) s clumsg=" (cluster slaves only)"
 if $zb(bits,1,1)&&('$ZU(51,clu+1)) S ret=ret_"write daemon"_clumsg_","
 if $zb(bits,2,1)&&('$ZU(51,clu+2)) S ret=ret_"garbage collector"_clumsg_"," 
 if $zb(bits,4,1)&&('$ZU(51,clu+4)) S ret=ret_"file expander"_clumsg_","
 if $zb(bits,8,1)&&('$ZU(51,clu+8)) S ret=ret_"global reference"_clumsg_","
 if $zb(bits,16,1)&&('$ZU(51,clu+16)) S ret=ret_"global update"_clumsg_","
 if $zb(bits,32,1)&&('$ZU(51,clu+32)) S ret=ret_"client-side network connections"_clumsg_","
 if $zb(bits,64,1)&&('$ZU(51,clu+64)) S ret=ret_"network server activity"_clumsg_","
 if ret'="" s ret="Quiesce failed reason: "_$e(ret,1,*-1) d $zu(9,"",ret,1,2) i $d(^rOBJ("ZQuiesceFail")) d ^ZQuiesceFail
 Q ret
QUIESCEE s $zt="" d $zu(9,"","QUIESCE: "_$ze,(1>0),1) q -1 ;0
CluQuiet(switch,target,timeout)
 n flags,rc
 i $g(switch)-10,$g(switch)-13 ztrap "SWITCH"
 n targetmsg s target=$g(target)
 i target=1 s target=256,targetmsg=" on cluster slave members"
 e  i target=2 s target=512,targetmsg=" on cluster master"
 e  s target=512+256,targetmsg=" cluster wide"
 s flags=1+2+4+$s(switch=10:8,1:16)
 s rc=$$Quiesce(flags+target,$s(switch=10:"system activity",1:"update activity")_targetmsg,$g(timeout,10),'$g(QUIET,$g(QUIETLY)))
 i rc<0 ztrap "Abort"
 q rc
%swstat(sw,detail) ; Return the status of Switch (sw)...
 s sw=+$g(sw),detail=+$g(detail)
 i sw<0 q $s(detail:-1_$c(1)_"Illegal Switch",1:-1)
 n bit,i,info,job10
 s info=""
 s $zt="%swerr^"_$zn,$ze=""
 Set i=$System.Util.GetSwitch(sw)
 i +i=0 q $s(detail:0_$c(1)_"Switch "_sw_" is NOT set.",1:0)
 i sw=10 s job10=$p(i,",",2),info=" Set by JOB #: "_job10_"  ("_$v(-1,job10)_")"
 q $s(detail:1_$c(1)_"Switch "_sw_" IS set."_info,1:1)
%swerr   ; Some error occured when doing a Switch 10 Status...
 s $zt=""
 q $s(detail:-1_$c(1)_$ze,1:-1)
%swset(sw,val,detail) ; Set Switch (sw) to (val - {0,1})...
 s sw=+$g(sw),val=+$g(val),detail=+$g(detail)
 i sw<0 q $s(detail:-1_$c(1)_"Illegal Switch",1:-1)
 i val'=0,val'=1 q $s(detail:-1_$c(1)_"Illegal Switch Value",1:-1)
 s $zt="%swseter^"_$zn,$ze=""
 If +$System.Util.GetSwitch(sw)=val q 1
 Do $System.Util.SetSwitch(sw,val)  ;Also maintains job # for job 10
 If +$System.Util.GetSwitch(sw)=val q 1
 q 0
%swseter ; Some error occured when Setting Switch (sw) to (val)...
 s $zt=""
 q $s(detail:-1_$c(1)_$ze,1:-1)