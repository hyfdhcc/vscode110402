/// ZENTest Control Test page.
/// This page provides a test of all Zen control classes.
Class ZENDemo.ControlTest Extends %ZEN.Component.page
{

/// Application this page belongs to.
Parameter APPLICATION = "ZENDemo.Application";

Parameter PAGENAME = "Control Test Page";

/// Domain used for localization.
Parameter DOMAIN = "ZENDEMO";

/// Which control is driven by buttons
Property currControl As %ZEN.Datatype.string [ InitialExpression = "text" ];

/// Display onclick events
Property onclickEnabled As %ZEN.Datatype.boolean [ InitialExpression = 1 ];

/// Display ondblclick events
Property ondblclickEnabled As %ZEN.Datatype.boolean [ InitialExpression = 1 ];

/// Display onmouseout events
Property onmouseoutEnabled As %ZEN.Datatype.boolean [ InitialExpression = 1 ];

/// Display onmouseoverclick events
Property onmouseoverEnabled As %ZEN.Datatype.boolean [ InitialExpression = 1 ];

/// Display onfocus events
Property onfocusEnabled As %ZEN.Datatype.boolean [ InitialExpression = 1 ];

/// Display onblur events
Property onblurEnabled As %ZEN.Datatype.boolean [ InitialExpression = 1 ];

/// Display onkeypress events
Property onkeypressEnabled As %ZEN.Datatype.boolean [ InitialExpression = 1 ];

/// Display onchange events
Property onchangeEnabled As %ZEN.Datatype.boolean [ InitialExpression = 1 ];

/// Display DeepSee controls.
Property showDeepSee As %ZEN.Datatype.boolean(ZENURL = "DEEPSEE") [ InitialExpression = 0 ];

/// Display iKnow controls.
Property showiKnow As %ZEN.Datatype.boolean(ZENURL = "IKNOW") [ InitialExpression = 0 ];

XData Style
{
<style type="text/css">

#form {
	border: 1px solid darkblue;
}

#controlGroup {
	border: 1px solid darkblue;
	padding: 5px;
	background: #DDDDDD;
	height: 500px;
	width: 400px;
	overflow: auto;
}

/* override for titleBox css */
.titleBoxTitle {
	background: #DDDDFF;
}

/* descriptive text */
.msg {
	font-size: 0.8em;
	color: darkblue;
	width: 200px;
	padding-top: 3px;
	padding-bottom: 10px;
}

.msg:first-letter {
	font-size: 0.9em;
	font-weight: bold;
}

#objectInspector {
	width: 400px;
	height: 200px;
	overflow: auto;
	overflow-x: hidden;
}

/* this is a test style used to test
changing css classes for controls */
.test {
	color: red;
	font-size: 2.0em;
}

#btnGroup div {
	margin-top: 2px;
	margin-right: 2px;
}

</style>
}

/// This XML defines the contents of this page.
XData Contents [ XMLNamespace = "http://www.intersystems.com/zen" ]
{
<page xmlns="http://www.intersystems.com/zen" xmlns:demo="http://www.intersystems.com/zendemo" title="Control Test">
<demo:demoTitle id="title" title="Zen Control Test Page" category="Zen Test Suite" />
<locatorBar id="locator" OnGetQuickLinks="GetQuickLinks">
<locatorLink caption="Home" title="Home page" href="ZENDemo.Home.cls"/>
<locatorLink caption="Control Test" title="Control Test Page" />
</locatorBar>

<hgroup>
<vgroup valign="top">
<demo:sidebar text="This Zen page demonstrates the following features:">
<demo:bullet text="The variety of controls included within the Zen library" />
<demo:bullet text="How every attribute of a control can be modified dynamically" />
<demo:bullet text="The events generated by the various controls" />
<demo:bullet text="You can also use this page to test custom controls" />
</demo:sidebar>
</vgroup>

<spacer width="25"/>
<form id="form" layout="vertical" valign="top" groupStyle="padding: 0px;" 
	onsubmit="return zenPage.formSubmit();">
<titleBox title="Test Controls" />
<html enclosingClass="msg" >You can test the controls displayed below.<br/>
Any events will be displayed in the Event History list.<br/>
</html>
<vgroup id="controlGroup">
<!-- controls get created by %OnAfterCreatePage callback -->
</vgroup>
</form>
<spacer width="25"/>
<vgroup valign="top">

<titleBox title="Event Capture" />
<html enclosingClass="msg">Select which events should be captured and displayed in Event History.</html>
<hgroup cellVAlign="top">
<vgroup>
<checkbox caption="onclick" value="#(%page.onclickEnabled)#" onchange="zenPage.toggleEvent('onclick');" />
<checkbox caption="ondblclick" value="#(%page.ondblclickEnabled)#" onchange="zenPage.toggleEvent('ondblclick');"/>
<checkbox caption="onmouseover" value="#(%page.onmouseoverEnabled)#" onchange="zenPage.toggleEvent('onmouseover');"/>
<checkbox caption="onmouseout" value="#(%page.onmouseoutEnabled)#" onchange="zenPage.toggleEvent('onmouseout');"/>
</vgroup>
<vgroup>
<checkbox caption="onfocus" value="#(%page.onfocusEnabled)#" onchange="zenPage.toggleEvent('onfocus');"/>
<checkbox caption="onblur" value="#(%page.onblurEnabled)#" onchange="zenPage.toggleEvent('onblur');"/>
<checkbox caption="onkeypress" value="#(%page.onkeypressEnabled)#" onchange="zenPage.toggleEvent('onkeypress');"/>
<checkbox caption="onchange" value="#(%page.onchangeEnabled)#" onchange="zenPage.toggleEvent('onchange');"/>
</vgroup>
</hgroup>
<spacer height="25"/>

<titleBox title="Control Attributes" />
<html enclosingClass="msg">Set attribute values of the selected test control.</html>
<objectInspector id="objectInspector" />
<spacer height="25"/>

<titleBox title="Control Value" />
<html enclosingClass="msg">Set or get the current value of the selected test control.</html>
<text id="value" label="Value" />
<hgroup id="btnGroup">
<button caption="Get value" title="Get the value of the current control" onclick="zenPage.getControlValue();"/>
<button caption="Set value" title="Set the value of the current control" onclick="zenPage.setControlValue();"/>
<button caption="Give Focus" title="Give focus to the current control" onclick="zenPage.giveFocus();"/>
<button caption="isValid" title="Call the isValid method of the current control" onclick="zenPage.testIsValid();"/>
</hgroup>
</vgroup>

<spacer width="25"/>
<vgroup valign="top">
<titleBox title="Event History" />
<html enclosingClass="msg">Display events that have fired in the test controls.<br/>
<a href="javascript:zenPage.clearEvents();">Clear the Event History.</a></html>
<textarea id="events" rows="25" cols="25" readOnly="true" />
</vgroup>
<spacer width="25"/>
</hgroup>
</page>
}

/// This callback is called after the server-side page 
/// object and all of its children are created.
Method %OnAfterCreatePage() As %Status
{
	#; add set of controls to controlGroup
	Set tGroup = ..%GetComponentById("controlGroup")
	Set tValueList = ""

	#; find all control classes
	Set tRS = ##class(%ResultSet).%New("%Dictionary.ClassDefinition.SubclassOf")
	Set tSC = tRS.Execute("%ZEN.Component.control")

	Set tCount = 0

	While (tRS.Next()) {
		Set tCls = tRS.Data("Name")
		Set tAbstract = +$$$comClassKeyGet(tCls,$$$cCLASSabstract)
		
		#; skip abstract classes
		If tAbstract Continue
		If tCls = "%ZEN.Component.objectInspector" Continue

		#; skip DeepSee components
		If ('..showDeepSee) && (tCls [ "%DeepSee") Continue

		#; skip iKnow components
		If ('..showiKnow) && (tCls [ "%iKnow") Continue
		
		#; skip SMP components
		If (tCls [ "%CSP.UI") Continue
		
		Set tCount = tCount + 1
		Set tLabel = $P(tCls,".",$L(tCls,"."))
		Set tValueList = tValueList _ $S(tValueList="":"",1:",") _ tLabel

		#; separator
		Set tDiv = ##class(%ZEN.Component.html).%New()
		Do tGroup.%AddChild(tDiv)
		Set tDiv.content = "<hr/>"

		#; radio button to select control
		Set tButton = ##class(%ZEN.Component.radioButton).%New()
		Set:(tCount=1) tButton.id = "CurrentControl"
		Set tButton.name = "CurrentControl"

		Do tGroup.%AddChild(tButton)
		Set tButton.caption = tLabel
		Set tButton.optionValue = tLabel
		Set tButton.onclick = "zenPage.selectControl('"_tLabel_"');"

		#; create control: add to group
		Set tControl = $zobjclassmethod(tCls,"%New")
		Set tControl.id = tLabel
		Set tControl.name = tLabel
		Do tGroup.%AddChild(tControl)
	
		#; just in case someone modifies this page to show non-controls
		If ('tControl.%IsA("%ZEN.Component.control")) {
			Continue
		}

		#; establish default values
		Do tControl.%SetDefaultValues()

		#; connect event handlers
		Set tControl.onclick="zenPage.event(zenThis,'onclick');" 
		Set tControl.ondblclick="zenPage.event(zenThis,'ondblclick');" 
		Set tControl.onmousedown="zenPage.event(zenThis,'onmousedown');" 
		Set tControl.onmouseup="zenPage.event(zenThis,'onmouseup');" 
		Set tControl.onfocus="zenPage.event(zenThis,'onfocus');" 
		Set tControl.onblur="zenPage.event(zenThis,'onblur');" 
		Set tControl.onkeypress="zenPage.event(zenThis,'onkeypress');" 
		Set tControl.onchange="zenPage.event(zenThis,'onchange');" 
	}

	Quit $$$OK
}

/// Show that event has occurred.
ClientMethod event(component, evtname) [ Language = javascript ]
{
	var out = this.getComponentById('events');
	zenASSERT(out,"Unable to find event output control",arguments);

	// try to select this control 
	this.selectControl(component.id);
	var radio = this.getComponentById('CurrentControl');
	zenASSERT(radio,"Unable to find radio button",arguments);
	radio.setValue(component.id);

	// if event capture enabled, add to output window
	if (this[evtname+'Enabled']) {
		this.counter = (this.counter==null) ? 1 : this.counter+1;

		out.setValue(out.getValue() + this.counter + ': ' + evtname + ' in ' + component.id + '\n');
	}
}

/// Clear event window
ClientMethod clearEvents() [ Language = javascript ]
{
	var out = this.getComponentById('events');
	zenASSERT(out,"Unable to find event output control",arguments);
	out.setValue('');
	this.counter = 0;
}

/// Turn on/off display of the given event type
ClientMethod toggleEvent(etype) [ Language = javascript ]
{
	// toggle property corresponding to etype
	this[etype+'Enabled'] = !this[etype+'Enabled'];
}

/// Turn on/off given setting for current control
ClientMethod toggleSetting(setting) [ Language = javascript ]
{
	var ctrl = this.getComponentById(this.currControl);
	zenASSERT(ctrl,"Unable to find control: " + this.currControl,arguments);

	switch (setting) {
	case 'disabled':
		ctrl.setDisabled(!ctrl.getDisabled());
		break;
	case 'readonly':
		ctrl.setReadOnly(!ctrl.getReadOnly());
		break;
	case 'hidden':
		ctrl.setHidden(!ctrl.getHidden());
		break;
	}
}

/// Select a current control
ClientMethod selectControl(name) [ Language = javascript ]
{
	var ctrl = this.getComponentById(this.currControl);	
	if (ctrl) {
		ctrl.getEnclosingDiv().style.background = '';
		ctrl.getEnclosingDiv().style.border = '';
	}
	
	this.currControl = name;

	var ctrl = this.getComponentById(this.currControl);	
	if (ctrl) {
		ctrl.getEnclosingDiv().style.background = 'yellow';
		ctrl.getEnclosingDiv().style.border = '1px solid darkblue';

		var inspector = this.getComponentById('objectInspector');
		inspector.setCurrObject(ctrl);
	}
}

/// Get value of current control
ClientMethod getControlValue() [ Language = javascript ]
{
	var ctrl = this.getComponentById(this.currControl);
	var text = this.getComponentById('value');	

	if (ctrl) {
		text.setValue(ctrl.getValue());
	}
	else {
		alert('Select a control');
	}
}

/// Set value of current control
ClientMethod setControlValue() [ Language = javascript ]
{
	var ctrl = this.getComponentById(this.currControl);	
	var text = this.getComponentById('value');	

	if (ctrl) {
		ctrl.setValue(text.getValue());

		// update inspector and value control
		text.setValue(ctrl.getValue());
		var inspector = this.getComponentById('objectInspector');
		inspector.update();
	}
	else {
		alert('Select a control');
	}
}

/// Test isValid method for current control
ClientMethod testIsValid() [ Language = javascript ]
{
	var ctrl = this.getComponentById(this.currControl);	

	if (ctrl) {
		alert(ctrl.getType() + ".isvalid = " + ctrl.isValid());
	}
	else {
		alert('Select a control');
	}
}

/// Trap submit of test form.
ClientMethod formSubmit(etype) [ Language = javascript ]
{
	alert("Form submit");
	return false;
}

/// This client event, if present, is fired when the page is loaded.
ClientMethod onloadHandler() [ Language = javascript ]
{
	var start = 'button';
	
	var radio = this.getComponentById('CurrentControl');
	// zenASSERT(radio,"Unable to find radio button",arguments);
	// radio.setValue(start);
	this.selectControl(start);
	this.clearEvents();
}

/// Give focus to current control
ClientMethod giveFocus() [ Language = javascript ]
{
	var ctrl = this.getComponentById(this.currControl);
	ctrl.focus();
}

/// Return an array of quick links to be displayed by the locator bar.
ClassMethod GetQuickLinks(Output pLinks) As %Status
{
	#; dispatch to our application class
	Quit %application.GetQuickLinks(.pLinks)
}

}
