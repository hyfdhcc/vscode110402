/// %ZEN.Component.activeVGroup
/// The active vertical group is a client-side (JavaScript-heavy) 
/// container widget designed for creating binary partitions of an 
/// area of the active display. An activeVGroup is always specified 
/// with exactly two children (any excess are ignored).  These 
/// children may have an arbitrary number of children of their own
/// but at the top level the strict limit is enforced. <br>
/// On the client-side, the component will be rendered as a split 
/// pane with top and bottom partitions, potentially separated by an 
/// adjustment handle.  If no geometry restrictions are specified, 
/// the component will attempt to size itself to fill all available 
/// space remaining in the browser window (this behavior, can of 
/// course be overridden by CSS). <br>
/// There are several properties governing the nature and handling 
/// of the partioning. The split may be speficied as an absolute 
/// reserve of pixels for the top or bottom pane (with excess pixels 
/// going to the other) or as a constant percentage to be reapportioned
/// in actual pixels whenever the widget's container is resized. The 
/// split can be marked as either fixed or user-adjustable.  It is 
/// possible specify child panes that slide open to a predefined taller 
/// height when the mouse rolls over them and auto-close when the mouse 
/// leaves the region.  In the case of auto-expanding panes, it is 
/// possible to define sound effects to accompany the animation.
Class %ZEN.Component.activeVGroup Extends %ZEN.Component.activeGroup [ System = 3 ]
{

Parameter INCLUDEFILES = "zenCSLM.js,zenActiveVGroup.js";

///  To be compatible with the static layout manager the enclosing class
///  has to be the generic activeGroup rather than the specific activeVGroup
///  The activeVGroup is the one used for tuning attributes of the absolutely
///  positioned elements.
Parameter DEFAULTENCLOSINGCLASS = "activeGroup";

/// Defines the division between the two panes. <br>
/// A value with a % sign is interpreted as a proportional division 
/// between the top and bottom panes and is recalculated to maintain 
/// this ratio whenever the base division is resized by any means.  
/// Manual adjustment of the value continues to be interpreted as a 
/// percentage split. <br> 
/// A positive value not constaining a percent sign is interpreted as 
/// a fixed reserve height for the top child. Any adjustments to the 
/// total height of the base container are reflected in the geometry of 
/// the bottom pane only. <br>
/// A negative value (which cannot contain a % sign) is interpreted as
/// a fixed height for the bottom pane.  Any adjustments to the total 
/// height of the base container are reflected in the geometry of the 
/// top child. <br> 
/// Manual adjustment of a top or bottom reserved height will change 
/// the size of the reserve and these fixed sizes will be respected 
/// even as the window is resized. <br>
/// The default split is "50%"
Property split As %ZEN.Datatype.string;

/// If defined, this property indicates that one of the two panels 
/// is an auto-open/auto-close sidebar panel and that the panel should 
/// expand when the mouse enters its "split"-defined bounds and grow 
/// until it reaches the height given in the autoExpand parameter. The 
/// value is always interpreted in pixels.  A positive value designates 
/// the top pane for auto-expansion.  A negative value designates the 
/// bottom. <br>
/// The default value (null) indicates that the auto-expansion feature 
/// is not used by this instance of the widget.
Property autoExpand As %ZEN.Datatype.string;

/// if true, this indicates that the user is not to be allowed to 
/// resize the panes. <br>
/// If false, user adjustment of the pane sizes is allowed via dragging
/// the pane handle with the mouse.  If user resizing is enabled, the 
/// mouse pointer will change to a north-south resize cursor when the 
/// mouse is in potential drag position. <br>
/// The default value is "false"
Property noResize As %ZEN.Datatype.string;

/// This indicates the height of the pane partition handle in pixels.
/// Due to the dynamic functional nature of the element, the height of 
/// this bar cannot be set via CSS and must be specified via this 
/// property. <br>
/// The default value is "7", resulting a drag handle a little under 
/// one eight of an inch (2 mm) thick on most screens.
Property handleThickness As %ZEN.Datatype.string;

/// This indicates a file name for an image to use for painting the 
/// dragable partition handle.  This image should be at least as tall 
/// as the handle thickness and is repeated horzontally along the 
/// length of the handle.<br>
/// The default value is a PNG file of a top-highighted gray gradient, 
/// bounded by black on either side.
Property handlePattern As %ZEN.Datatype.string;

/// This indicates a sound file to be played when an auto-expansion 
/// window grows or shrinks.  If not defined or null, no sound 
/// accompanies the animation. <br>
/// The default is "null"
Property soundFX As %ZEN.Datatype.string;

/// onresizeTop event handler:
/// This event is fired when the top panel of this component is resized
Property onresizeTop As %ZEN.Datatype.eventHandler;

/// onresizeBottom event handler:
/// This event is fired when the bottom panel of this component is resized
Property onresizeBottom As %ZEN.Datatype.eventHandler;

XData Style
{
<style type="text/css">
.activeVGroup {
	width:100%;
	height:100%;
	overflow:hidden;
	border:none;
}

.zenVPaneHandle {
	background-image:url(images/vHandleGrad.png);
	background-color:black;
	background-repeat:repeat-x;
	border:none;
}

</style>
}

/// The HTML generated here is NOT the final DOM structure of this
/// component.  At the client, the information embedded here will be
/// used to build a more complex DOM subtree under the control of
/// an active client-side layout manager.  The exact structure of this
/// expansion is not important for most users of this particular 
/// component, however, it _is_ useful to not that the handle dividing
/// the panes is of the HTML class zenHPaneHandle for the purposes of
/// CSS style references.
Method %DrawHTML()
{
	&html<<div class="activeVGroup" id="#(..%MakeId("activeVGroup"))#" #(..%Attr("split",..split))# #(..%Attr("autoExpand",..autoExpand))# #(..%Attr("noResize",..noResize))# #(..%Attr("handleThickness",..handleThickness))# #(..%Attr("handlePattern",..handlePattern))# #(..%Attr("soundFX",..soundFX))# >>
	#; layout children using the default layout.
	Do ##class(%ZEN.LayoutManager).default($this,..tuple)
	&html<</div>>
}

ClientMethod getController() [ Language = javascript ]
{
	var div = this.findElement("activeVGroup");
	if (!div) return(null);
	return(div.engine);
}

ClientMethod showBottomOnly() [ Language = javascript ]
{
	var ctrl = this.getController();
	if (ctrl) ctrl.showBottomOnly();
}

ClientMethod showTopOnly() [ Language = javascript ]
{
	var ctrl = this.getController();
	if (ctrl) ctrl.showTopOnly();
}

ClientMethod restoreSplit() [ Language = javascript ]
{
	var ctrl = this.getController();
	if (ctrl) ctrl.restoreSplit();
}

/// Set the value of a named property.
ClientMethod setProperty(property, value, value2) [ Language = javascript ]
{
	var ctrl = this.getController();
	switch(property) {
		case "split":
			this.split = value;
			if (ctrl) ctrl.setSplit(value);
			break;
		case "autoExpand":
			this.autoExpand = value;
			if (ctrl) ctrl.setAutoExpand(value);
			break;
		case "noResize":
			this.noResize = value;
			if (ctrl) ctrl.setResizeFlag(value);
			break;
		case "handleThickness":
			this.handleThickness = value;
			if (ctrl)  {
				ctrl.setHandleThickness(value);
				ctrl.sizeContainer();
			}
			break;
		case "soundFX":
			this.soundFX = value;
			if (ctrl) ctrl.setSoundEffect(value);
			break;
		case "onresizeTop":
			this.onresizeTop = value;
			this.installResizeHandlers();
			break;
		case "onresizeBottom":
			this.onresizeBottom = value;
			this.installResizeHandlers();
			break;

	default:
		// dispatch
		return this.invokeSuper('setProperty',arguments);
	}
	return true;
}

/// The code generated by the server is NOT the complete structure 
/// for the activeHGroup.  Like other client-side layout managers, 
/// only the necessary meta-data is sent to the client.  The main 
/// processing logic is stored in a client-side, cache-able 
/// JavaScript file (zenActiveHGroup.js) To complete the connection 
/// between the meta-data description and the code library, the 
/// manager class must be registered with the generic client-side
/// layout manager.  The generic manager maintains a list of classes 
/// that require special handling and the JavaScript code bodies that 
/// perform such handling. A call to ZLM.initLayout() scans the DOM 
/// to find any meta-data classes (such as this one) and "unpacks" 
/// them into DOM structures for local geometry maintenance.  This 
/// is all done behind the scenes via the Zen classes onload handler. 
ClientMethod onloadHandler() [ Language = javascript ]
{
	// dispatch to get correct disabled handling
	this.invokeSuper('onloadHandler',arguments);
    // set up geometry manager
    ZLM.registerManagerClass("activeVGroup",ZLM_AVG.initActiveVGroup);
    ZLM.initLayout();
    this.installResizeHandlers();
}

ClientMethod onRefreshContents() [ Language = javascript ]
{
    ZLM.registerManagerClass("activeHGroup",ZLM_AHG.initActiveHGroup);
    ZLM.initLayout();
    this.installResizeHandlers();
}

/// Install or update the resize callbacks associated with this instance
ClientMethod installResizeHandlers() [ Language = javascript ]
{
	var ctrl = this.getController();
	if (ctrl) {
		if (ctrl.tDiv && this.onresizeTop) {
			if (ctrl.tDiv.firstChild && ctrl.tDiv.firstChild!=ctrl.tLid) {
				ZLM.setLocalAttribute(ctrl.tDiv.firstChild,"onresize",this.onresizeTop);
			}
		}
		if (ctrl.bDiv && this.onresizeBottom) {
			if (ctrl.bDiv.firstChild && ctrl.bDiv.firstChild!=ctrl.bLid) {
				ZLM.setLocalAttribute(ctrl.bDiv.firstChild,"onresize",this.onresizeBottom);
			}		
		}
	}
}

}
