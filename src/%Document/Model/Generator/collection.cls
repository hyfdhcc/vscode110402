/// This class generates class definitions from XDATA class nodes.
Class %Document.Model.Generator.collection [ Abstract, System = 4 ]
{

/// Called by the ClassDefinition Code Generator, this method creates all
/// meta data and related classes for a DocumentDefinition instance (a class that extends %Document.collectionDefinition).
/// An Oasys.Dictionary.class is defined but no Cache Objects runtime is generated.
ClassMethod %ProcessModel(pClassName As %String, pCollection As %Document.Model.Schema.collection) As %Status [ Internal ]
{
	#dim tField as %Document.Model.Schema.field
	#dim tIndex as %Document.Model.Schema.index
	try {
			set tClassName = pCollection.className
			if tClassName = "" { set tClassName = $$$ClassPackageName(pClassName) _ ".Collection." _ pCollection.name }
			set tDictionary = ##class(%Dictionary.ClassDefinition).IDKEYOpen(tClassName)
			if '$Isobject(tDictionary) {
				set tDictionary = ##class(%Dictionary.ClassDefinition).%New()
				set tDictionary.Name = tClassName
				set tDictionary.SqlTableName = pCollection.sqlName
				set tDictionary.Description = pCollection.description
				set tDictionary.StorageStrategy = "EDoc"
				set tStorageTemplate = ##class(%Dictionary.StorageDefinition).IDKEYOpen("%Document.Persistent","EDoc")
				set tStorage = tStorageTemplate.%ConstructClone(1)
				set tStorage.parent = tDictionary
			}
			else {
					// Clear existing class members
				do tDictionary.Indices.Clear()
				do tDictionary.Properties.Clear()
			}
			set tDictionary.Super = "%Document.Persistent"
	//		set tDictionary.Import = "Oasys.Type"
	//	    set tDictionary.IncludeCode = "Oasys"
	//	    set tDictionary.IncludeGenerator = "Oasys"
		    set tDictionary.ProcedureBlock = 1
			set tDictionary.Owner = ""
		    set tDictionary.Description = "Document class for document '"_pCollection.name_"'.<br/>"_$char(13,10)_
		    							"THIS IS A GENERATED CLASS, DO NOT EDIT.<br/>"_$char(13,10)_
		    							"Generated by %Document.Model.Generator. " _ $zdatetime($horolog,3) _ $char(13,10) _
		    							pCollection.description
			set tDictionary.GeneratedBy = pClassName _ ".cls"
			set tStatus = tDictionary.%Save()
			if $$$ISERR(tStatus) { throw ##class(%Exception.StatusException).CreateFromStatus(tStatus) }
			set tDictionaryId = tDictionary.%Id()
		    	// Mark this class for deletion when the definition class is deleted.
		    $$$comClassArraySet(pClassName,$$$cCLASSclasses,tDictionary.Name_".cls","")
		    /* Example code for defining a new class parameter
			set tParameter = ##class(%Dictionary.ParameterDefinition).%New()
			set tParameter.parent = tBehaviorClass
			set tParameter.Name = "OASYSSTATECLASS"
			set tParameter.Default = tDictionaryName
				// Define the link back to the OASYS Dictionary for the behavior class
			set tParameter = ##class(%Dictionary.ParameterDefinition).%New()
			set tParameter.parent = tBehaviorClass
			set tParameter.Name = "OASYSDICTIONARYENTITY"
			set tParameter.Default = pDictionaryClass.%Id()
			*/


			set tMemberKey = ""
			set tField = pCollection.fields.GetNext(.tMemberKey)
			while $Isobject(tField) {
				set tProp = ##class(%Dictionary.PropertyDefinition).%New()
				set tProp.Name = tField.name
				set tStatus = $$parseFormal^%occName("","","a1:"_tField.type,.tFieldTypeParsed)
				set tProp.Type = tFieldTypeParsed(1,2)
				set tParameter = $Order(tFieldTypeParsed(1,2,""),1,tParameterValue)
				while tParameter '= "" {
					do tProp.Parameters.SetAt(tParameterValue,tParameter)
					set tParameter = $Order(tFieldTypeParsed(1,2,tParameter),1,tParameterValue)
				}
				if tField.fieldType '= "static" {
					set tProp.Calculated = 1
					set tProp.SqlComputed = 1
					if tField.expression '= "" {
						set tProp.SqlComputeCode = " set {*} = " _ $zstrip(tField.expression,"<>W",$Char(10))
					}
					else { set tProp.SqlComputeCode = " set {*} = ##class(" _ tClassName _ ").%Get({%%ID},{%Document},"_$$$quote(tField.name)_")" }
				}
				set tProp.Description = tField.description
				set tProp.SequenceNumber = $increment(tSeq) + 1000
				set tProp.parent = tDictionary
				set tField = pCollection.fields.GetNext(.tMemberKey)
			}

			set tMemberKey = ""
			set tIndex = pCollection.indexes.GetNext(.tMemberKey)
			while $Isobject(tIndex) {
				set tDictionaryIndex = ##class(%Dictionary.IndexDefinition).%New()
				set tDictionaryIndex.Name = tIndex.name
				set tDictionaryIndex.Data = tIndex.data
				set tDictionaryIndex.Description = tIndex.description
				if tIndex.type = "standard" { set tDictionaryIndex.Type = "index" }
				elseif tIndex.type = "bitmap" { set tDictionaryIndex.Type = "bitmap" }
				elseif tIndex.type = "bitslice" { set tDictionaryIndex.Type = "bitslice" }
				elseif tIndex.type = "bitmapextent" { set tDictionaryIndex.Type = "bitmap", tDictionaryIndex.Extent = 1 }
				else { set tDictionaryIndex.Type = "index" }
				if tIndex.constraint = "primarykey" { set tDictionaryIndex.PrimaryKey = 1 }
				elseif tIndex.constraint = "unique" { set tDictionaryIndex.Unique = 1 }
				set tDictionaryIndex.Properties = tIndex.key
				set tDictionaryIndex.SequenceNumber = $increment(tSeq) + 1000
				set tDictionaryIndex.parent = tDictionary
				set tIndex = pCollection.indexes.GetNext(.tMemberKey)
			}

			set tStatus = tDictionary.%Save()
			if $$$ISERR(tStatus) { throw ##class(%Exception.StatusException).CreateFromStatus(tStatus) }
			set tStatus = $system.OBJ.Compile(tDictionary.Name,"k")
	}
	catch(ex) {
		set tStatus = ex.AsStatus()
	}
	quit tStatus
}

}
