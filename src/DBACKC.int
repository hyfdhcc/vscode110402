ROUTINE DBACKC [Type=INT]
DBACKC ; Part three of Incremental Backup ;$Change$
	; Revision: $Id$
 /*
 +--------------------------------------------------------+
 | Copyright 1986-2015 by InterSystems Corporation,       |
 | Cambridge, Massachusetts, U.S.A.                       |
 | All rights reserved.                                   |
 |                                                        |
 | Confidential, unpublished property of InterSystems.    |
 |                                                        |
 | This media contains an authorized copy or copies       |
 | of material copyrighted by InterSystems and is the     |
 | confidential, unpublished property of InterSystems.    |
 | This copyright notice and any other copyright notices  |
 | included in machine readable copies must be reproduced |
 | on all authorized copies.                              |
 +--------------------------------------------------------+
 */
 /* Revision: $Id: //adhocs/2016.2.3.904.11/DHC_SOFTWARE_CO_001/databases/sys/inc/_syJrninc.inc#1 $ ($Change: 4521965 $) */
ASKSET(prompt,val,backup,help,pattern) ;procedure
 N x,done,def,enahelp,helpavail,backupavail
 s done=0
 s def=$G(val)
 s backup=$G(backup,0) 
 s enabackup=$S(backup=-1:0,1:1)
 s backupavail=$S(backup=1:1,1:0)
 s help=$G(help)
 s enahelp=$S(help="*":0,1:1) ;there might not be any help though
 s helpavail=$s(enahelp&($L(help)!($D(help)>1)):1,1:0)
 if 'enabackup n POP
 s POP=0
 f  d  q:done!POP
 . W !,$G(prompt)
 . w:($X+$L(def))>65 !,?5
 . w:$L(def) " <",def,">"
 . if helpavail!backupavail do
 . . w " [" w:helpavail "?" w:backupavail "^" w "]"
 . w:(($X+$L(def))>75) !,?5
 . W " => " 
 . R x,!
 . if x="^" d  q
 . . if 'enabackup s done=1 q
 . . if backupavail s POP=1 q
 . . w "...backup not available here"
 . if enabackup,x="""^""" s x="^",done=1 q
 . ;
 . if x="?" d  q
 . . if 'enahelp s done=1 q
 . . if 'helpavail w "...help not available here" q
 . . if $D(help)=1 w !?5,help q
 . . s x="" f  s x=$O(help(x)) q:x=""  w !,?5,help(x)
 . . w !
 . if enahelp,x="""?""" s x="?",done=1 q
 . i x]"",$g(pattern)]"",x'?@pattern w !?5,$s(helpavail:help,1:"[bad format]") q
 . s:'$L(x) x=val 
 . s done=1
 s:'POP val=x
 q
 ; Part III of the Incremental Backup Utility. NEWINC
 ;
DIRPASS ;
 n zu49,x,err,start,end,numerr,s,lastblk
 d SetNames^DBACKA(DIR) S RC=NoErr
 s zu49=+$$ZU(49,DIR)
 i zu49=-1!(zu49=-2)!(zu49=-3) d  q
 . d msgout($C(13,10)_"Directory "_DIR_" *** Isn't Present and Can't Be Backed Up ***"_$C(13,10)_$C(13,10),NOFORCE) 
 . s OK=1 K DIRNAM(DIR)
 i PASS=1 {
   n gfowner,i s gfowner=0
   f  {
     s x=$v(+zu49*4+$zu(40,2,92),-2,4) 
     i 'x { 
       d:gfowner msgout(" Done"_$C(13,10),NOFORCE) 
       q
     }
     i x'=gfowner {
       d msgout($C(13,10)_"Waiting for job #"_x_" to release ownership of database "_DIR,NOFORCE) 
       s gfowner=x
     }
     i $i(i)#10=0 d msgout(".",NOFORCE)
     h 1 
   }
 }
 I 'LastPass S A=$ZH D:USEENQ ENQ13 D:'USEENQ HOLDWD(DIR) S LOST=LOST+($ZH-A)
 i PASS=1,BUTYP=FULL,$zu(32,8,$g(^SYS("BACKUP","UseLargeRead"),1))!1
 e  i $zu(32,8,+$g(^SYS("BACKUP","UseLargeRead","All")))
 ;$ZU(32,1,DIR) writes the directory label to the backup file which
 ;includes the "$ZU(49)" info. It is important that the current size
 ;of the database in the directory label caters for all the blocks
 ;stored in that pass so we do this after setting switch 13, not before.
 f  s x=$$ZU(32,1,DIR) q:+x=1  d  i OK'=1 d:'LastPass DEQ13^DBACKA q
 . ;in here set OK to 0 if we get a fatal error and want to abort the backup
 . ;set OK to -1 to abort this directory, drop it from the backup but continue
 . ; with the backup for other directories
 . ;leave OK alone or set it to 1 to retry the $ZU(32,1,DIR) operation
 . i +x=RCABORT s OK=0 d msgout($C(13,10)_$C(13,10)_"We got an abort signal while trying to open directory "_DIR_$C(13,10)_"and write a label."_$C(13,10)_$C(13,10),NOFORCE) Q
 . n sx s sx=x n x s x=sx ; preserve x because it'll be used just after the current do scope
 . d msgout($C(13,10)_$C(13,10)_"We got an error trying to open directory "_DIR_$C(13,10)_"and write a label."_$C(13,10)_$C(13,10),NOFORCE)
 . s err=$$error(x)
 . i +x=RCINERR!(+x=RCMAPINERR)!(+x=RCBADMAP)!(+x=RCMOUNT) d  s OK=-1 k DIRNAM(DIR) q
 . . d msgout("We got a '"_err_"' error trying to mount the Cache.Dat file in "_DIR_$C(13,10)_"  It will be skipped."_$C(13,10),FORCE)
 . d msgout("We got a '"_err_"' write error trying to write the label for the"_$C(13,10)_"Cache.Dat file in "_DIR_$C(13,10),FORCE)
 . d msgout($C(13,10)_"Switch to another output file and we won't lose any data."_$C(13,10),FORCE)
 . d nextvol($s(+x=RCOFFLINE:"",1:"End of Volume")) q
 ;OK is 0 to abort backup or 1 to skip this directory and continue
 i +x'=1 s:OK<0 OK=1 q  
 i PASS=1 {
   i BUTYP=FULL { ;the first pass of a full backup
     ; GFFORCEFULBK should be already set in HOLDWD()
     ; and not cleared until FREEWD()
     ; clear .INC (INCACTIVEMAP) as it may include killed blocks
     s I=$$INLOGOR(DIR,3,3,1)
     ; mark all in-use blocks in .IND file (INCBACKUPMAP) 
     s RC=$$INLOGOR(DIR,3,2,2)
     i RC'<0 {
       ; delete .INE file (INCRECORDMAP)
       s I=$$INLOGOR(DIR,1,1,1)
       ; -2 = incremental backup not enabled on this database (OK)
       I I'=-2 s RC=I
     }
   } else { ;the first pass of a partial (incremental) or cumulative backup
     ; OR .INE file into .IND and delete the .INE file
     ; so that we can recover from a previously interrupted backup
     s RC=$$INLOGOR(DIR,1,2,1)
     i BUTYP=CUMINC { ;first pass of a cumulative incremental backup,
       ; OR .INF into .IND and leave .INF alone
       s I=$$INLOGOR(DIR,0,2,0)
       s:(RC=-2)||(RC'<0) RC=I
     }
     ; OR .INC into .IND and clear the .INC file
     s I=$$INLOGOR(DIR,3,2,1) D
     S:(RC=-2)||(RC'<0) RC=I
   }
 }
 ; If not 1st pass, OR .INC into .IND and clear the .INC file
 I PASS'=1 s RC=$$INLOGOR(DIR,3,2,1)
 ; If RC=-2, There was nothing to backup because an input file for
 ;     one of the above INLOGOR calls did not exist.
 I RC=-2 Q   ;Continue backup, but do not process this directory
 ;  Otherwise, if RC<0, then there was an I/O error when attempting to
 ;      process the OPENM.IN* files.
 E  I RC<0 D  Q  ;If RC<0, it is a bad error.  Abort BACKUP.
 . D msgout($C(13,10)_"["_$s(RC=+RC:"I/O Error",1:"Error "_$p(RC,",",2,*))_" occurred while processing directory '"_DIR_"']"_$C(13,10),FORCE)
 . S OK=0
 i 'LastPass D:USEENQ DEQ13 D:'USEENQ FREEWD,$zu(52,9,DIR,0)
 i LastPass,'USEENQ S SUCCESSDIR(DIR)=""
 ; Backup this directory for this pass
 d msgout($C(13,10)_"Backing up "_DIR_" at "_$ZDATETIME($H),NOFORCE)
 ;
continue ;
 S VOLDIR=DIR,start=$zh,RC=$$ZU(IBUPass,2),end=$zh
 ;
 d msgout($C(13,10)_"Copied "_$p(RC,",",3)_" blocks in "_$j(end-start,0,3)_" seconds"_$C(13,10),FORCE)
 s numerr=$l(RC,",")-3 i numerr s s=$s(numerr=1:"",1:"s") d  
 . d msgout($C(13,10)_" With "_numerr_" read error"_s_" on block"_s,FORCE)
 . s s="" f i=1:1:numerr s s=s_$j($p(RC,",",i+3),11) s:$l($p(s,$C(13,10),$l(s,$C(13,10))))>68 s=x_$C(13,10)
 . d msgout($C(13,10)_s_$C(13,10),FORCE)
 i +RC=1 d msgout($C(13,10)_"Finished this pass of copying "_DIR_$C(13,10),FORCE) g DPX
 s err=$$error(RC),lastblk=$p(RC,",",numerr+3)
 ;
 i +RC=RCINERR g readerr
 i +RC=RCABORT d msgout("We got an abort signal,backup aborted."_$C(13,10),FORCE) g abort
 i +RC=RCBADMAP d  d msgout("  - this is a fatal error"_$C(13,10),FORCE) g abort
 . i lastblk d msgout("Bitmap block "_lastblk_" has a bad label",FORCE)
 . e  d msgout("We are missing incremental bitmaps for this 2kb Cache.dat file",FORCE)
 i +RC=RCMAPINERR d msgout("We got a fatal read error on a bitmap block "_lastblk_$C(13,10),FORCE) g abort
 ; we got a write error while copying a database
 d msgout("We got a '"_err_"' write error trying to copy this CACHE.DAT directory."_$C(13,10),FORCE)
 d msgout("Switch to another output file and we won't lose any data."_$C(13,10),FORCE)
 d nextvol($s(+RC=RCOFFLINE:"",1:"End of Volume")) g continue:OK d abort s OK=0 q
 ;
 ; readerr
 ; we got a read error while copying a database
readerr ;
 d msgout("We got too many read errors on "_DIR_"."_$C(13,10),FORCE)
 n text,def s text="Do you wish to continue with this directory?",def="Yes"
 i '$g(gui) d  R a s:a="" a=def
 . d msgout(text_" ["_def_"] ",FORCE)
 e  s a=$$IjcMB^%Wprima(text,4,"Backup: Too Many Input Errors")
 ;
 i a?1"Y".e!(a?1"y".e) d msgout($C(13,10)_"Continuing copy of "_DIR,FORCE) g continue
abort d msgout($C(13,10)_"Copy of "_DIR_" aborted."_$C(13,10),FORCE) s OK=1 k DIRNAM(DIR) q
 ;
 ; done
 ; we've finished the backup - write the end of volume record and close structures
done ;
 i $g(markinfo)]"" f  s a=$$ZU(32,6,markinfo) q:+a=1!(+a=RCABORT)  d  q:'OK
 . s err=$$error(a)
 . d msgout("We got a rare "_err_" writing a journal marker information record."_$C(13,10),FORCE)
 . d msgout("You must output to another volume briefly to finish the backup"_$C(13,10),FORCE)
 . d nextvol("End of Volume.")
 s a=$$ZU(32,4)
 i +a'=1&(+a'=RCABORT) d  q:'OK
 . s err=$$error(a)
 . d msgout("We got a rare "_err_" writing the last couple of blocks and the end-of-volume-set label record."_$C(13,10),FORCE)
 . d msgout("You must output to another volume briefly to finish the backup"_$C(13,10),FORCE)
 . d nextvol("End of Volume.")
 . q
 s a=$$ZU(32,5) ; close structures
 d msgout($C(13,10)_"***"_$s(##class(Backup.General).GetAbortStatus():"ABORTED",1:"FINISHED")_" BACKUP***"_$C(13,10),FORCE)
 q
 ;
DPX ;
 S OK=1 S RC=$$INLOGOR(DIR,2,1,1) I RC'=-2,RC<0 D 
 . D msgout($C(13,10)_"["_$s(RC=+RC:"I/O Error",1:"Error "_$p(RC,",",2,*))_" occurred while processing directory '"_DIR_"' - Check the log]"_$C(13,10),FORCE)
 . S OK=0
 Q
 ; end of DIRPASS
 ;------------------------------------------------------------------
 ;
 ; $$error(x)
 ; translate return code into text
error(a) ;
 i a>0 s a=$p("Success,End Of Tape,Device Off Line,Device Full,not used",",",a)
 e  d
 . i a>-10 s a=$p("General Read,General Write,Cluster Mounted Target,Directory Mount Error,Restore Map Error,Restore Old Format,Restore Bad Input Volume,Restore Bad Block Contents (failed CRC on read),no longer used,Restore End Of Volume",",",-a) q
 . e  s a=$p("2kb Missing Bitmaps/Bad Bitmap Label,Restore Wrong Block Size,Read Error on Incrmental Bitmap,Input Error But Label Is Good,Restore Bad Block Contents (was bad when backup made),Missing Blocks Due to Read Errors,End of Volume Set,Directory Label Record,Missing Directory Label Record",",",-a-10)
 i a="" s a="***Unknown Problem***"
 q a
 ;
nextvol(prompt) ;
 s x=$$ZU(32,3)
 n BEG s BEG=$ZH,VOL=VOL+1
 S BUFCOUNT=$P(RC,",",2)
 i NOINPUT d   s OK=0 q                                       ;JAO264+
 . d msgout($C(13,10)_"End of volume detected",FORCE)
 . d msgout($C(13,10)_"Terminal input not enabled-Terminating backup",FORCE)
 d msgout($C(13,10)_prompt,FORCE)                                   ;JAO266
NXTVOL1 d msgout($C(13,10)_" Where should output continue?",FORCE)         ;JAO266
 D GETDEV^DBACKA Q:'OK  D VOLLABEL^DBACKA G NXTVOL1:'OK
 S LOST=LOST+($ZH-BEG) ; count the lost time
 Q
INLOGOR(DIR,SOURCE,TARGET,DISPOSE) ;Adapter, present same i'face for VAX & UX
 n rc
 try {
   s rc=$ZU(31,DIR,SOURCE,TARGET,DISPOSE)
 } catch {
   s rc=-1_","_$ze
   s $ze=""
 }
 q rc
FILENORM(NAME) ;Return normalized version of NAME
 S OK=1,$ZT="FNERR"
 i ($zversion(1)=1) N MTDEV S MTDEV=$$OSDEVICE(NAME) I MTDEV'="" D  Q MTDEV
 . s ISREG=0
 . W !,"Cache device numbers are not legal here.  Substituting ",MTDEV
 i '($zversion(1)=1) N MTDEV,DIR S MTDEV=$$OSDEVICE(NAME) I MTDEV'="" S ISREG=0 Q NAME
 i ($zversion(1)=1) S DIR=NAME
 i ($zversion(1)=1) q $ZU(12,DIR)
 i ($zversion(1)=2),$E(NAME,1,2)="\\" S L=$$CheckForTape(NAME) I L'="" S ISREG=0 Q L
 i ($zversion(1)=2) S L=$L(NAME,"\"),DIR=$P(NAME,"\",1,L-1)
 i ($zversion(1)=2) IF L>1 S DIR=DIR_"\"
 i ($zversion(1)=2) S NAME=$ZU(12,DIR)_$P(NAME,"\",L,L),ISREG=$ZU(140,7,NAME),ISREG=$S(ISREG>0:1,ISREG=-2:1,1:0) Q NAME
 i ($zversion(1)=3) S L=$L(NAME,"/"),DIR=$P(NAME,"/",1,L-1)
 i ($zversion(1)=3) IF L>1 S DIR=DIR_"/"
 i ($zversion(1)=3) S NAME=$ZU(12,DIR)_$P(NAME,"/",L,L),ISREG=$ZU(140,7,NAME),ISREG=$S(ISREG=-2:1,ISREG/32768#2:1,1:0) Q NAME
FNERR S OK=0,ERRMSG="Not a valid device name." Q
CheckForTape(NAME)
 S NAME=$ZCVT(NAME,"U")
 N I,TAPE
 For I=47:1:62 s TAPE=$$OSDEVICE(I) I NAME=$ZCVT(TAPE,"U") S NAME=I Q
 I NAME?2N Q NAME
 I NAME?1"\\.\TAPE"1N Q NAME
 Q ""
TQUIWRITE(verbose) q $$QUIESCE(1,"buffer activity",10,verbose)
TQUIGC(verbose) q $$QUIESCE(2,"garbage collection",10,verbose)
TQUIDB(verbose) q $$QUIESCE(4,"database expansion",10,verbose)
TQUIGLO(verbose) q $$QUIESCE(8,"global activity",10,verbose)
TQUIGLOUPD(verbose) q $$QUIESCE(16,"global updates",10,verbose)
TQUINET(verbose) q $$QUIESCE(32,"network activity",10,verbose)
TQUIDISK(verbose) q $$QUIESCE(1+2,"disk activity",10,verbose)
TQUIUPD(verbose) q $$QUIESCE(1+2+4+16,"update activity",10,verbose)
TQUISYS(verbose) q $$QUIESCE(1+2+4+8,"system activity",10,verbose)
QUIESCE(bits,text,retries,verbose,intv) ;
 s verbose=+$g(verbose),retries=+$g(retries,-1),intv=+$g(intv,1)
 q ($$Quiesce(bits,text,retries,verbose,intv)>0)
Quiesce(bits,text,retries,verbose,intv) ;
 n noWDbits  ;JO1988
 s $zt="QUIESCEE"
 q:$zu(51,bits) 1 ;double checking $ZU(51) is no longer necessary
 s verbose=+$g(verbose),retries=+$g(retries,-1),intv=+$g(intv,1)
 d msgout($c(13,10)_"WARNING: Switch is set and may affect production for up to "_(retries*intv)_" seconds."_$c(13,10)_"Waiting for "_text_" to finish...",NOFORCE)
 f  q:'retries  h intv q:$zu(51,bits)  s retries=retries-1 i retries#5=0 d msgout(".",NOFORCE)
 s noWDbits=1
 s:$s($S($ZBITGET($ZVERSION(0),2):$V($ZU(40,2,136),-2,4),1:0):''$zu(59,0),1:0) noWDbits=noWDbits+2
 s noWDbits=$zboolean(bits,noWDbits,2)  ;2 = x & ~ y
 if '$ZU(51,bits),bits'=1,$zboolean(bits,1,1),$zu(51,noWDbits) {
	 d msgout($c(13,10)_"System is idle except WD is still running."_$c(13,10)_"     Waiting up to 2 minutes for WD to finish",NOFORCE)
	 f i=1:1:120 q:$ZU(51,bits)  h 1 if i#5=0 d msgout(".",NOFORCE)
	 if $ZU(51,bits) s retries=1 ;signal success
 }
 d msgout($s(retries:" ready.",1:" abort. "_$$quiescefailmsg(bits))_$c(13,10),NOFORCE)
 q retries
quiescefailmsg(bits)
 N ret,clu,clumsg s ret="",clu=$zb(bits,512+256+128,1),clumsg=""
 if $zb(clu,128,1)||($zb(clu,(256+512),1)=(256+512)) s clu=128,clumsg=" (cluster wide)"
 if $zb(clu,512,1) s clumsg=" (cluster master only)"
 if $zb(clu,256,1) s clumsg=" (cluster slaves only)"
 if $zb(bits,1,1)&&('$ZU(51,clu+1)) S ret=ret_"write daemon"_clumsg_","
 if $zb(bits,2,1)&&('$ZU(51,clu+2)) S ret=ret_"garbage collector"_clumsg_"," 
 if $zb(bits,4,1)&&('$ZU(51,clu+4)) S ret=ret_"file expander"_clumsg_","
 if $zb(bits,8,1)&&('$ZU(51,clu+8)) S ret=ret_"global reference"_clumsg_","
 if $zb(bits,16,1)&&('$ZU(51,clu+16)) S ret=ret_"global update"_clumsg_","
 if $zb(bits,32,1)&&('$ZU(51,clu+32)) S ret=ret_"client-side network connections"_clumsg_","
 if $zb(bits,64,1)&&('$ZU(51,clu+64)) S ret=ret_"network server activity"_clumsg_","
 if ret'="" s ret="Quiesce failed reason: "_$e(ret,1,*-1) d $zu(9,"",ret,1,2) i $d(^rOBJ("ZQuiesceFail")) d ^ZQuiesceFail
 Q ret
QUIESCEE s $zt="" d $zu(9,"","QUIESCE: "_$ze,(1>0),1) q -1 ;0
CluQuiet(switch,target,timeout)
 n flags,rc
 i $g(switch)-10,$g(switch)-13 ztrap "SWITCH"
 n targetmsg s target=$g(target)
 i target=1 s target=256,targetmsg=" on cluster slave members"
 e  i target=2 s target=512,targetmsg=" on cluster master"
 e  s target=512+256,targetmsg=" cluster wide"
 s flags=1+2+4+$s(switch=10:8,1:16)
 s rc=$$Quiesce(flags+target,$s(switch=10:"system activity",1:"update activity")_targetmsg,$g(timeout,10),'$g(QUIET,$g(QUIETLY)))
 i rc<0 ztrap "Abort"
 q rc
quietsw(switch,timeout) ;quiesce activities w/ timeout after setting switch 10 or 13
 n flags,rc
 i $g(switch)-10,$g(switch)-13 ztrap "SWITCH"
 s flags=1+2+4+$s(switch=10:8,1:16)
 i CLUBACKUP s flags=flags+128
 s rc=$$Quiesce(flags,"disk cleanup",$s($g(timeout)="":30,1:timeout),'$g(QUIET))
 i rc<0 ztrap "Abort"
 q rc
hibernate(switch,released,timeo) ;
 i +$g(released) d msgout($c(13,10)_"Switch "_switch_" is released.",NOFORCE)
 n hibtime s hibtime=$s(timeo>3:10,timeo>2:1,timeo>1:.1,timeo>0:.01,1:10)
 d msgout($c(13,10)_"Backup will hibernate for "_hibtime_" second(s) and try again."_$c(13,10)_"You may abort Backup via Ctrl-C. ",NOFORCE) 
 i hibtime<1 h hibtime
 e  n i f i=1:1:hibtime h 1 d msgout(".",NOFORCE)
 d msgout($c(13,10),NOFORCE)
 q
ENQ10 ;
 n t s t=$g(quietimeout,60) s:t>0 t=(t+9)\10 ;rounded up to 10 sec
 s $zt="ENQ10e"
 i CLUBACKUP d  q
 . f  q:$$CLU^SWSET(10,1,ALRDY10,$g(QUIETMASTERONLY))  s t=t-1 zt:'t "Abort" d hibernate(10,'ALRDY10,t)
 i ALRDY10 q:$$quietsw(10)  zt "Abort"
 f  S %SW=10,%VAL=1 D INT^SWSET  q:$$quietsw(10)  s t=t-1 zt:'t "Abort" d DEQ10,hibernate(10,1,t)
 Q
ENQ10e s $zt="" d DEQ10 ztrap $ze
DEQ10 ;
 i CLUBACKUP,$ZU(95,10,0)  ; Clear SW10 clusterwide
 i 'ALRDY10 s %SW=10,%VAL=0 D INT^SWSET
 Q
ENQ13 ;
 n t s t=$g(quietimeout,60) s:t>0 t=(t+9)\10 ;rounded up to 10 sec
 s $zt="ENQ13e"
 i CLUBACKUP d  q
 . f  q:$$CLU^SWSET(13,1,ALRDY13)  s t=t-1 zt:'t "Abort" d DEQ13,hibernate(13,'ALRDY13,t)
 i ALRDY13 q:$$quietsw(13)  zt "Abort"
 f  S %SW=13,%VAL=1 D INT^SWSET  q:$$quietsw(13)  s t=t-1 zt:'t "Abort" d DEQ13,hibernate(13,1,t)
 Q
ENQ13e s $zt="" d DEQ13 zq 1 g:$zt'="" @$zt q
DEQ13 ;
 i CLUBACKUP,$ZU(95,13,0)  ; Clear SW13 clusterwide
 i 'ALRDY13 s %SW=13,%VAL=0 D INT^SWSET
 Q
HOLDWD(dir) ;suspend write daemon (dir may be passed as an array)
 n n
 i $zu(182,1,0) ;clear any remaining backup request
 f  q:'$zu(182,0)  h 1  ;wait until write daemon runs again
 i $d(dir)<10 d $zu(52,9,dir,1) d $zu(182,2,0,+$zu(49,dir)) s n=1 i 1
 e  s dir="" f n=0:1 s dir=$o(dir(dir)) q:dir=""  d $zu(52,9,dir,1) d $zu(182,2,n,+$zu(49,dir))
 i $zu(182,1,n)  ;set number of databases to back up
 f  q:$zu(182,0)  h 1  ;wait until write daemon suspends
 q
FREEWD ;unsuspend write daemon
 i $zu(182,1,0)
 q
msgout(aaamess,flag) ;
         s flag=$g(flag,1) ; default to FORCE
         W *-1            ;Flush the input buffer                     ;SSG012
         q:'$L(aaamess)   ; Avoid argumentless writes...
         i $g(logfile)'="" u logfile w aaamess
         u 0
         q:flag=3  ; 1 = FORCE, FORCE, 2 = NOFORCE, 3 = LOGONLY
         i '$G(INTERNAL,0)!('$G(NOINPUT,0)&(flag=1!'$G(QUIET,0))) w aaamess
         i $g(gui) D  
         . s return=$$IjcMsg^%Wprima("DI"_aaamess) ; Retval might =  cancel msg
         . i return="CANCEL" d  
         . . i $$IjcMsg^%Wprima("DI"_$c(13,10)_"Abort received!"_$c(13,10))
         . . zt "Abort"
         u 0 
         q
timestmp(flag) 
         n msg,%TS,%TN
         s msg="TIMESTAMP: "
         s %DN=+$H d INT^%DO
         s msg=msg_%DS
         s %TN=$P($h,",",2) d ^%TO
         s msg=msg_" "_%TS
         d msgout($c(13,10)_msg_$c(13,10))
         q
OSDEVICE(mdevice,new) ;osdevice + range check, pad input, strip output.
 s mdevice=+mdevice q:mdevice<47 ""  q:mdevice>62 ""
 i $d(new) s new=$$zpad(new,32)
 q $$zstrip($$osdevice(mdevice,.new))
osdevice(mdevice,new) ;"Raw" osdevice
 n adr,old,size,where,charsize
 s $ZT="osdeverr"
 s charsize=$$charsize^%Wprim() ; check size one char
 s size=32,adr=(mdevice-47)*(size*charsize)+$ZU(40,2,28),where=-2
 s old=$v(adr,where,-size_"w")
 i $d(new) v adr:where:-size_"w":new
 q old
osdeverr q ""
zstrip(x) ;Return x with ASCII NUL's removed
 q $tr(x,$c(0),"")
zpad(x,len) ;x, maybe truncated, NUL-padded to length len, one NUL guaranteed
 n zeroes
 s zeroes=$j("",len),zeroes=$tr(zeroes," ",$c(0)) ;String of len NUL's
 s x=$e(x,1,len-1) ;Silently truncate x if necessary
 s $e(zeroes,1,$l(x))=x
 q zeroes
ZU(A,B,C,D,E,F,G,H,I,J,K,L,M,N,P) ;so needn't change $$ZU's to $ZU's
 IF '$D(B) Q $ZU(A)
 IF '$D(C) Q $ZU(A,B)
 IF '$D(D) Q $ZU(A,B,C)
 IF '$D(E) Q $ZU(A,B,C,D)
 IF '$D(F) Q $ZU(A,B,C,D,E)
 IF '$D(G) Q $ZU(A,B,C,D,E,F)
 IF '$D(H) Q $ZU(A,B,C,D,E,F,G)
 IF '$D(I) Q $ZU(A,B,C,D,E,F,G,H)
 IF '$D(J) Q $ZU(A,B,C,D,E,F,G,H,I)
 IF '$D(K) Q $ZU(A,B,C,D,E,F,G,H,I,J)
 IF '$D(L) Q $ZU(A,B,C,D,E,F,G,H,I,J,K)
 IF '$D(M) Q $ZU(A,B,C,D,E,F,G,H,I,J,K,L)
 IF '$D(N) Q $ZU(A,B,C,D,E,F,G,H,I,J,K,L,M)
 IF '$D(P) Q $ZU(A,B,C,D,E,F,G,H,I,J,K,L,M,N)
           Q $ZU(A,B,C,D,E,F,G,H,I,J,K,L,M,N,P)
MORE Q      ;JAO580 added 