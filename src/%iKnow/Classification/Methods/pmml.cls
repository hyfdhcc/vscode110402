/// <p>This Builder implementation leverages a model defined in PMML for the numerical part 
/// of the categorization task. Term selection occurs as normal, but before calling 
/// <method>%GenerateClassifier</method> or <method>%CreateClassifierClass</method>, either of
/// the following two steps needs to be taken:
/// <ul><li>Register a valid <class>%DeepSee.PMML.Builder.AbstractBuilder</class> instance as 
/// <property>PMMLBuilder</property>, which will then generate the PMML code automatically when 
/// generating the classifier definition as usual</li>
/// <li>Use an external tool to build the model, based on the training data table generated through
/// a call to <method>%ExportDataTable</method> on the builder object. Then copy the PMML code generated by this external
/// tool into this instance's <property>PMMLString</property> property.</li></ul>
Class %iKnow.Classification.Methods.pmml Extends Base [ System = 4 ]
{

/// A valid and fully configured PMML Builder instance. Note that the DataSet and TargetField 
/// properties of the PMML Builder will be configured automatically.
Property PMMLBuilder As %DeepSee.PMML.Builder.AbstractBuilder;

/// A valid PMML model, using data field names corresponding to the columns of the table
/// generated by <method>%ExportDataTable</method>.
Property PMMLString As %String(MAXLEN = "");

Method %BuildClassificationMethod(ByRef pClassifier As %iKnow.Classification.Definition.Classifier, pIncludeBuilderParams As %Boolean = 1, pVerbose As %Boolean = 1) As %Status
{
	set tSC = $$$OK
	try {
		set tSC = ##super(.pClassifier, pIncludeBuilderParams, pVerbose)
		quit:$$$ISERR(tSC)
		
		if (..PMMLString="") {
			
			// export training data so it can be read by the PMML builder
			set (tClassName,x) = "iKnow.Temp.ClassifierTrainingData", y=""
			while $$$defClassDefined(tClassName) {
				set tClassName = x_$i(y)
			}
			set tSC = ..Builder.%ExportDataTable(tClassName, 1, pVerbose)
			quit:$$$ISERR(tSC)
			
			// populate PMML dataset based on current contents
			set tTableName = ##class(%DeepSee.Utils).%GetSQLTableName(tClassName)
			set tTermCount = ..Builder.Terms.Count(), tSQL = ""
			for i = 1:1:tTermCount {
				set tSQL = tSQL _ ", " _ ..Builder.GetColumnName(i)
			}
			set tSQL = "SELECT ID, Category" _ tSQL _ " FROM "_tTableName
			set tDataSet = ##class(%DeepSee.PMML.Dataset.SQL).%Create("Training data", tSQL,,, "ID", .tSC)
			quit:$$$ISERR(tSC)
			
			// create PMML definition and append to pClassificationMethod
			set ..PMMLBuilder.Dataset = tDataSet
			set ..PMMLBuilder.FunctionName = "classification"
			set ..PMMLBuilder.TargetField = "Category"
			set:..PMMLBuilder.ModelName="" ..PMMLBuilder.ModelName = "iKnowClassification"
			write:pVerbose !,"Generating PMML definition..."
			set tSC = ..PMMLBuilder.GeneratePMML(.tPMML)
			quit:$$$ISERR(tSC)
			
		} elseif (..PMMLString'="") {
			
			// convert/validate %String
	        set tReader = ##class(%XML.Reader).%New()
	        set tSC = tReader.OpenString(..PMMLString)
	        quit:$$$ISERR(tSC)
	        
	        do tReader.Correlate("PMML","%DeepSee.PMML.Definition.PMML")
	        
	        do tReader.Next(.tPMML,.tSC)
	        quit:$$$ISERR(tSC)
	        
	        if '$isobject(tPMML) {
	            set tSC = $$$ERROR($$$GeneralError,"No <PMML> element in PMMLString value")
	            quit
	        }
			
		} else {
			set tSC = $$$ERROR($$$GeneralError, "No value provided for PMMLString or PMMLBuilder")
			quit
		}
		
		// append Output elements to model
		set tModel = tPMML.Models.GetAt(1)
		if '$isobject(tModel) {
			set tSC = $$$ERROR($$$GeneralError, "PMML definition does not contain any models")
			quit
		}
		set tModel.Output = ##class(%DeepSee.PMML.Definition.Output).%New()
		set tOutputField = ##class(%DeepSee.PMML.Definition.OutputField).%New()
		set tOutputField.name = "predictedValue"
		set tOutputField.feature = "predictedValue"
		set tOutputField.value = ""
		do tModel.Output.OutputFields.Insert(tOutputField)
		
		// check if it supports outputting probabilities
		if tModel.%IsOutputFeatureSupported("probability", "dummy") {
			for i = 1:1:..Builder.Categories.Count() {
				set tOutputField = ##class(%DeepSee.PMML.Definition.OutputField).%New()
				set tOutputField.name = "Cat"_i_"Score"
				set tOutputField.displayName = "Score for category '"_$li(..Builder.Categories.GetAt(i),1)_"'"
				set tOutputField.feature = "probability"
				set tOutputField.value = $li(..Builder.Categories.GetAt(i),1)
				do tModel.Output.OutputFields.Insert(tOutputField)
			}
		}
		
		set pClassifier.ClassificationMethod.PMML = tPMML
		
		
	} catch (ex) {
		set tSC = ex.AsStatus()
	}
	
	// BDB553 - ensure the training data class is dropped
	if $g(tClassName)'="" && $$$defClassDefined(tClassName) {
		try {
			set tSC2 = $$Delete^%apiOBJ(tClassName,"e-d")
		} catch ex {}
	}
		
	quit tSC
}

Method %LoadFromModel(pDefinition As %iKnow.Classification.Definition.Classifier) As %Status
{
	set tPMML = pDefinition.ClassificationMethod.PMML
	if '$isobject(tPMML) {
		quit $$$ERROR($$$GeneralError, "No PMML definition found")
	}
	set tSC = tPMML.%ToString(.tString)
	set ..PMMLString = $g(tString)
	quit tSC
}

}
