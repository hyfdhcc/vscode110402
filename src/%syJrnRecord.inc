ROUTINE %syJrnRecord [Type=INC]
#; %syJrnRecord.INC    
#;
#; Include file for extracting information from a journal record
#; in the currently open journal file.  This file may be used
#; by user code, such as mirror dejournal filtering, that requires
#; the fastest possible retrieval of information from journal
#; records when the journal file is already open and the address
#; of interest is known.
#;
#;/*=======================Maintenance========================*/
#;RJF177  05/08/15 Ray Fucillo, split from %syJrninc.inc
#;/*====================End Maintenance======================*/
 
 ; $$$JRNTYPE(address)
 ; Returns the record type, or $$$JRNEND if we're at or past the
 ;     end of the file or if its an invalid record type
 ; Values documented below
#define  JRNTYPE(%a) $zu(78,8,%a)
 
 ; $$$JRNTYPE1(address)
 ; The only difference between $$$JRNTYPE and $$$JRNTYPE1 is that
 ; $$$JRNTYPE returns the type of a $INCR record as $$$JRNSET, whereas
 ; $$$JRNTYPE1 returns it as $$$JRNINCRTYP.
#define  JRNTYPE1(%a) $zu(78,80,%a)
 
 ; $$$JRNTRANS(address)
 ; Returns 1 if this record is a set/kill in a transaction, else 0
 ; Can only return a 1 for $$$JRNSET,$$$JRNKILL,$$$JRNKILLDES,
 ;   $$$JRNBEGTRANS,$$$JRNCOMMIT,$$$JRNBITSET
 ; Returns a 0 for all other records
#define  JRNTRANS(%a) $zu(78,9,%a)
 
 ; $$$JRNPID(address)
 ; Returns the pid of the record, or the jobid if it is multi-threaded callin.
#define  JRNPID(%a) $zu(78,10,%a)
 
 ; $$$JRNPID(address) actually returns jobid or pid
 ; $$$JRNPIDREAL(address) returns pid or 0 if pid is not available
#define  JRNPIDREAL(%a) $zu(78,100,%a)
 
 ; $$$JRNDIR(address)
 ; Returns the directory of this update record type
 ; (only valid for certain record types)
#define  JRNDIR(%a) $zu(78,12,%a)
								#;HYY1954+ 
 ; $$$JRNMIRDBNAME(address)
 ; Returns the mirror db name (if any) of this update record 
 ; (only valid for certain record types)
#define  JRNMIRDBNAME(%a) $zu(78,112,%a)
								#;HYY1954- 
 ; $$$JRNNEXT(address)
 ; Returns the address of the next nondeleted record
 ; If there are no more records, it returns 0
 ; If address = 0, it returns the address of the first record
#define  JRNNEXT(%a) $zu(78,17,%a)
 
 ; $$$JRNNEXTBYSFN(address,sfn)
 ; Returns the address of the next nondeleted record which matches the passed sfn
 ; If there are no more records, it returns 0
 ; If address = 0, it returns the address of the first record which matches the sfn
#define JRNNEXTBYSFN(%a,%sfn) $zu(78,110,%a,%sfn)
 
 ; $$$JRNPREV(address)
 ; Returns the address of the previous nondeleted record
 ; If there are no more earlier records, it returns 0
 ; If address = 0, it returns the ending address (the address that
 ; could be used for the next record), and $$$JRNTYPE of that would
 ; return a $$$JRNEND
#define  JRNPREV(%a) $zu(78,18,%a)
 
 ; $$$JRNNODE(address)
 ; Returns the full global reference, including directory name,
 ; of this update record
#define  JRNNODE(%a) $zu(78,13,%a)
 
 ; $$$JRNNUMDATA(address)
 ; Returns the # of data values associated with the record
 ; $$$JRNSET: 1 or 2, $$$JRNKILL or $$$JRNKILLDES: 0 or 1,
 ; $$$JRNNSET: 1, otherwise 0
#define  JRNNUMDATA(%a) $zu(78,14,%a)
 
 ; $$$JRNNEWVAL(address)
 ; Returns the new data value for this update record
 ; (Only valid for JRNSET and JRNNSET record types)
#define  JRNNEWVAL(%a) $zu(78,15,%a)
 
 ; $$$JRNOLDVAL(address)
 ; Returns the old data value for this update record
 ; (Only valid for JRNSET,JRNKILL,JRNKILLDES,JRNNSET,JRNNKILL
 ; record types)
#define  JRNOLDVAL(%a) $zu(78,16,%a)
 
 ; $$$JRNBITPOS(address)
 ; Returns the bit position of the Set $BIT operation for this update record
 ; (Only valid for JRNBITSET and JRNNBITSET record types)
#define  JRNBITPOS(%a) $zu(78,36,%a)
 
 ; $$$JRNNEWBITVAL(address)
 ; Returns the new bit value of the specified bit position for this update
 ; record (Only valid for JRNBITSET and JRNNBITSET record types)
#define  JRNNEWBITVAL(%a) $zu(78,37,%a)
 
 ; $$$JRNOLDBITVAL(address)
 ; Returns the old bit value of the specified bit position for this update
 ; record (Only valid for JRNBITSET record type)
#define  JRNOLDBITVAL(%a) $zu(78,38,%a)
 
 ; $$$JRNOLDBITLEN(address)
 ; Returns the old bit length in this update record
 ; (Only valid for JRNBITSET record type)
#define  JRNOLDBITLEN(%a) $zu(78,39,%a)
 
 ; $$$JRNTSTAMP(address)
 ; Returns the timestamp associated with the record in $H format
#define  JRNTSTAMP(%a) $zu(78,24,%a)
 
 ; $$$JRNREMSYS(address)
 ; Returns the raw remote system id field from the journal record, like
 ;  $$$JRNECPSYS() below, but may include additional high-order bits
#define  JRNREMSYS(%a) $ZU(78,25,%a)
								#;HYY1600+
 ; $$$JRNECPSYS(addr)
 ; Returns the remote system id associated with the record. This is 0 if
 ;  the journal record was generated by a job on our local machine and if
 ;  it is non-zero then it is the ECP system number of the remote system that
 ;  caused the server to journal this record.  When this is non-zero 
 ;  then the pid field contains the pid on the original system, not the
 ;  local system.
#define JRNECPSYS(%a) $zu(34,22,$$$JRNREMSYS(%a))
								#;HYY1600-
 ; $$$JRNCLUSEQ(address)
 ; Returns the journal cluster sequence number of this record
 ; (only valid for certain record types)
#define  JRNCLUSEQ(%a) $zu(78,11,%a)
 
 ; $$$JRNCOLLATE(address)
 ; Returns the collation type from this record
#define  JRNCOLLATE(%a) $ZU(78,27,%a)
 
 
#; --------------------
#; Journal Record Types
#; --------------------
 ; JRNTYPEMIN is the minimum numeric value for a journal record type
#define  JRNTYPEMIN   4
 ; An outer TSTART (done at $TLEVEL=0)
#define  JRNBEGTRANS  4
 ; An outer TCOMMIT 
#define  JRNCOMMIT    5
 ; A SET record
#define  JRNSET       6
 ; A KILL record
#define  JRNKILL      7
 ; A record for kill of descendents journaled as part of a higher-level kill
 ; inside of transaction
#define  JRNKILLDES   8
 ; A ZKILL record
#define  JRNZKILL     9
 ; The following three are no longer used
#define  JRNNSET      10
#define  JRNNKILL     11
#define  JRNNZKILL    12
 ; A journal marker
#define  JRNMARK      13
 ; A SET $BIT() record
#define  JRNBITSET    14
 ; Internal ECP synchronization record 
#define  JRNBIGNET    15
 ; Inner TSTART
#define	 JRNTBEGINLEVEL 16
 ; Inner TCOMMIT
#define	 JRNTCOMMITPENDLEVEL 17
 ; Not used
#define  JRNTCOMMITLEVEL 18
 ; SET/KILL records used internally by mirroring for mirror system globals
#define  JRNMIRSET 19
#define  JRNMIRKILL 20
 ; Used internally by ECP
#define  JRNTROLEVEL 21
 ; JRNTYPEMAX is the biggest journal type defined here. Modified by:
#define  JRNTYPEMAX   21
 ; JRNINCRTYP is the type returned for $increment with $$$JRNTYPE1
#define  JRNINCRBIT  128
#define  JRNINCRTYP  ($$$JRNINCRBIT+$$$JRNSET)
#define  ISJRNRECTYPINCR(%type) (%type=$$$JRNINCRTYP)
 ; Record type returned when at the end of the journal file or beyond
#define  JRNEND      -1
 