/// This class is used internally by Cach&eacute;. You should not make direct use of it within your applications. There is no guarantee made about either the behavior or future operation of this class.
/// <p>An AutoPage pane that lets a user enter an parameters for a SQL query and execute it.
Class %CSP.UI.SQL.RunQueryPane Extends %CSP.Util.ExpPane [ System = 4 ]
{

/// Copied from %CSP.Util.SQLQueryPane
Method OnDrawHEADTablePane(pInstance As %CSP.Util.PageInstance) As %Status
{
	&html<
<style type="text/css">

h2 {
	color: darkblue;
	border-top: 1px solid darkblue;
	font-weight: bold;
	font-size: 1.2em;
}

table.DetailTable {
	border: 1px solid black;
	/* make tables with few columns, small */
	width: 10%;
}

table.DetailTable th {
	border-bottom: 1px solid black;
	border-right: 1px solid black;
	padding-left: 2px;
	padding-right: 8px;
	font-weight: bold;
	text-align: left;
	color: #888888;
}

table.DetailTable td {
	border-bottom: 1px solid black;
	border-right: 1px solid black;
	padding-left: 2px;
	padding-right: 2px;
}


</style>
<script language="javascript">

</script>
>
	Quit $$$OK
}

Method CreateResultSet(ByRef pID As %String, ByRef pRS As %ResultSet) As %Status
{
	Set tSC = $$$OK
	Set $ZT="Trap"
	Do {	
		Set pRS = ##class(%ResultSet).%New(pID(3)_":"_pID(4))
	} While(0)
Done
	Quit tSC
Trap
	Set $ZT=""
	Set tSC=$$$ERROR($$$GeneralError,$ZE)
	Goto Done
}

Method ExecuteResultSet(%pParam As %String, ByRef %pRS As %ResultSet) As %Status
{
	Set tSC = $$$OK
	Set $ZT="Trap"
	Do {
		Set ParamCount = %pRS.GetParamCount()
		Set %pRS.RuntimeMode = 2
		Set xecute="Do %pRS.Execute("
		For tCount=1:1:ParamCount Set xecute=xecute_"$g(%request.Data(%pParam("_tCount_"),1))"_$select(tCount=ParamCount:"",1:",")
		Set xecute=xecute_")"
		Xecute xecute
	} While(0)
Done
	Quit tSC
Trap
	Set $ZT=""
	If $ZE["<PROTECT>" Set tSC = $$$ERROR(940)
	Else  Set tSC = $$$ERROR($$$GeneralError,$ZE)
	Goto Done
}

/// Overwritten by subclasses to draw anything this pane needs for the BODY section.
Method DrawBODY(pInstance As PageInstance) As %Status
{
	Do ..DrawCommands(pInstance)
	Merge tID = pInstance.IDValues
	Do {
		&html<<div class="Text1">#(##class(%CSP.Page).EscapeHTML(..LocalizeText(..Text)))#</div>>
		If $G(tID(1)) = "" Do ..DrawError($$$Text("Schema name missing.")) Quit
		If $G(tID(2)) = "" Do ..DrawError($$$Text("Procedure name missing.")) Quit
		If $G(tID(3)) = "" Do ..DrawError($$$Text("Class name missing.")) Quit
		If $G(tID(4)) = "" Do ..DrawError($$$Text("Method name missing.")) Quit
		Set tLink = ##class(%CSP.Page).Link("/csp/sys/exp/UtilExpClass.csp")_"&$ID1="_tID(3)
		&html<<p class="ltcaption"><a href="#(tLink)#">#($ZCVT(tID(3),"O","HTML"))#</a> : #($ZCVT(tID(4),"O","HTML"))#</p>>
		&html<<form name="RunQueryForm" method="post">>
		&html<<input type="hidden" name="$ID1" value="#($ZCVT(tID(1),"O","HTML"))#">>
		&html<<input type="hidden" name="$ID2" value="#($ZCVT(tID(2),"O","HTML"))#">>
		&html<<input type="hidden" name="$ID3" value="#($ZCVT(tID(3),"O","HTML"))#">>
		&html<<input type="hidden" name="$ID4" value="#($ZCVT(tID(4),"O","HTML"))#">>
		Set tSC = ..CreateResultSet(.tID, .tRS)
		If $$$ISERR(tSC) {
			Do ..DrawStatusError(tSC)	
			Quit
		}
		Set SCHEMA=$zcvt(tID(1),"u"),PROC=$zcvt(tID(2),"u")
		Set ParamCount = tRS.GetParamCount()
		For tCount = 1:1:ParamCount Set Params(tCount) = tRS.GetParamName(tCount)
		If ParamCount > 0 Do ..DrawOptions(.Params, ParamCount, SCHEMA, PROC)

		Do ..DrawButtons()
		If $G(%request.Data("btnRun",1)) '= "" {
			Do ..OnDrawHEADTablePane()
			If $get(^%SYS("Compiler","EnableDiskReadTiming"),1) Do ##class(%SYSTEM.Process).EnableDiskReadTiming()
			Set tGlobals = $zu(67,9,$J)+$system.Context.WorkMgr().GlobalReferences,tLines=$zu(67,8,$J)+$system.Context.WorkMgr().LinesExecuted,tDiskRead=$zu(67,41,$J)+$system.Context.WorkMgr().DiskReadMilliseconds
			Set tStart = $ZH
			Set tSC = ..ExecuteResultSet(.Params, .tRS)
			If $$$ISERR(tSC) {
				Do ..DrawStatusError(tSC)	
			} Else {
				Do ..DrawResult(.tRS,tGlobals,tStart,tLines,tDiskRead)	
			}
		}
		&html<</form>>
 
	} While (0)
	Quit $$$OK
}

Method DrawOptions(ByRef Params As %String, ParamCount As %Integer, SCHEMA As %String, PROC As %String)
{
	Set msgType = $$$Text("xDBC Type")
	&html<<p class="ltcaption">#($$$TextHTML("Enter values for the query parameters"))#: </p>>
	&html<<table class="Options">>
	&html<<tr><td><table class="Option"><tr><td>&nbsp;</td><td>&nbsp;</td><td><b><u>#(msgType)#</u></b></td></tr>>
	Set tRow = 1
	While tRow '> ParamCount {
		Set tValue = $G(%request.Data(Params(tRow),1))
		Set maxlen = $G(^oddPROC(SCHEMA,PROC,"c",tRow,4))
		Set maxlen = $S(maxlen>50:50,maxlen="":50,1:maxlen+5)
		&html<<tr><td nowrap>#(Params(tRow))#</td>>
		&html<<td><input type="text" name="#(Params(tRow))#" value="#($ZCVT(tValue,"O","HTML"))#" size="#(maxlen)#"></td>>
		&html<<td nowrap>#($ZCVT($G(^oddPROC(SCHEMA,PROC,"c",tRow,8)),"O","HTML"))#</td></tr>>

		Set tRow = tRow + 1
	}
	&html<</table></td></tr></table><br>>
}

Method DrawButtons()
{
	&html<<input type="submit" name="btnRun" id="btnRun" value='#($$$Text("Run Query"))#'>>
}

Method DrawResult(ByRef tRS As %ResultSet, tGlobals As %String, tStart As %String, tLines As %String, tDiskRead As %String)
{
	Do {

		Set msgStatistics = $ZCVT($$$Text("Performance"),"O","HTML")
		Set msgSeconds = $ZCVT($$$Text("seconds"),"O","HTML")
		Set msgGloRefs = $ZCVT($$$Text("global references"),"O","HTML")
		Set msgLines = $ZCVT($$$Text("lines executed"),"O","HTML")
		Set msgDiskRead = $ZCVT($$$Text("disk read latency (ms)"),"O","HTML")
		Set hlpStatistics = $ZCVT($$$Text("These statistics show the rough cost of executing this query. These values include some cost for displaying the query results."),"O","HTML")
	
		Set cmdSQLCODE = $ZCVT($$$Text("SQLCODE"),"O","HTML")
		Set cmdRowCount = $ZCVT($$$Text("Row count"),"O","HTML")
	
		Set hlpSQLINFO = $ZCVT($$$Text("SQLCODE is the SQL error code value returned by this query. Row count is the number of rows processed by this query. For SELECT statements, these values are only set when all rows are loaded."),"O","HTML")
		If ($G(%session.Data("$SQLMAXROWS")) '= "") {
			Set tMaxRows = +%session.Data("$SQLMAXROWS")
		} Else {
			Set tMaxRows = 1000
		}
		&html<<table><tr>>
		&html<<td nowrap align="left" valign="middle"><span title="#(hlpSQLINFO)#" style="color: darkblue; font-size: 0.8em; line-height: 150%; margin-left: 20px;" nowrap>
		#(cmdSQLCODE)#: <b><a href="javascript:launchPopupWindow('/csp/docbook/DocBook.UI.Page.cls?KEY=RSQL_sqlerrors');"><span id='sqlcode'>N/A</span></a></b>&nbsp;&nbsp;#(cmdRowCount)#: <b><span id='rowcount'>N/A</span></b>
		</td><td>&nbsp;</td>>
		&html<<td nowrap align="left" valign="middle"><span title="#(hlpStatistics)#" style="color: darkblue; font-size: 0.8em; line-height: 150%; margin-left: 20px;" id="statistics">&nbsp;</span></td>>
		&html<</tr></table>>
		Set %sqlcontext = ##class(%ProcedureContext).%New()
		Set %sqlcontext.SQLCode = $$$Text("N/A")
		Set %sqlcontext.RowCount = $$$Text("N/A")

		Set tCols = tRS.GetColumnCount()
		&html<<p>>
		&html<<table class="DetailTable" border="0" cellspacing="0">>
		&html<<tr>>

		// write out headers and get column types
		For i = 1:1:tCols {
			&html<<th>#($ZCVT(tRS.GetColumnHeader(i),"O","HTML"))#</th>>		
 			// 2:date 3:float,5:integer,10:string,12:binstream,13:charstream
			Set type = tRS.GetColumnType(i)
	 		Set tAlign(i) = $Case(type,3:"right",5:"right",:"left")
	 		Set tIsStream(i) = $Case(type,12:1,13:1,:0)
 		}
		&html<</tr>>
		Set tSC = $$$OK
		Set row = 0
		While (tRS.Next(.tSC) && (row<tMaxRows)) {
			If ($$$ISERR(tSC)) {
				Do ..DrawStatusError(tSC)
				Quit
			}
			Set bg = $Case(row#2,1:"#DDEEFF",:"white")
			Set tRowStyle = "style=""background:" _ bg _ ";"""
			&html<<tr #(tRowStyle)#>>

			// get col values (include hidden values)
			For i=1:1:tCols {
				Set val = tRS.GetDataByName(tRS.GetColumnName(i))
				If (tIsStream(i) && (val'="")) { Set val = "<stream>" }
				Set:$L(val)>100 val=$E(val,1,100)_"..."
				&html<<td nowrap align="#(tAlign(i))#">#($ZCVT(val,"O","HTML"))#&nbsp;</td>>
			}
		
			&html<</tr>>
			Set row = row + 1
		}

		Set hasMore = tRS.Next()
		&html<<tr><td colspan="#(tCols+1)#">&nbsp;>

		If (hasMore) {
			Set msgMore = $$$TextHTML("More data...")
		}
		Else {
			Set msgMore =  $$$TextHTML("Complete")
		}
			
		&html<<i>#(msgMore)#</i>>
		&html<</td></tr>>
		&html<</table></p><hr>>
		
		Set tTime = $ZH - tStart
		Set tGlobals = $zu(67,9,$J)+$system.Context.WorkMgr().GlobalReferences-tGlobals,tLines=$zu(67,8,$J)+$system.Context.WorkMgr().LinesExecuted-tLines,tDiskRead=$zu(67,41,$J)+$system.Context.WorkMgr().DiskReadMilliseconds-tDiskRead

		Write "<script language='JavaScript'>",!
		Write " var CSPPage = self;",!

		Set tStats = msgStatistics _": <b>"_$FN(tTime,"",3) _ "</b> "_msgSeconds_"&nbsp;&nbsp;<b>" _ tGlobals _ "</b> " _ msgGloRefs _ "&nbsp;<b>"_tLines_"</b> "_msgLines_$select($get(^%SYS("Compiler","EnableDiskReadTiming"),1):"&nbsp;<b>"_tDiskRead_"</b> "_msgDiskRead,1:"")
			&js<if (self.document.getElementById("statistics")) { self.document.getElementById("statistics").innerHTML = '#(tStats)#'; }>
			&js<if (self.document.getElementById("sqlcode")) { self.document.getElementById("sqlcode").innerHTML = '#(%sqlcontext.SQLCode)#'; }>
			&js<if (self.document.getElementById("rowcount")) { self.document.getElementById("rowcount").innerHTML = '#(%sqlcontext.RowCount)#'; }>
		Kill %sqlcontext
		Write "</script>",!


	} While(0)
}

/// Draws error message directly
Method DrawError(errormsg)
{
	&html<<div style="color:red; margin-left: 20px;" align="left" ><br>>
	&html<<b>#($ZCVT(errormsg,"O","HTML"))#</b><br>>
	&html<</div>>
}

}
