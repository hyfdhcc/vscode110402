Include %occErrors

/// Home page for the Ensemble Management Portal.
/// If the current user holds the %Admin_Secure resource, then this page
/// can be used to view and define custom resources.
Class %CSP.Portal.Home Extends %ZEN.Portal.standardPage [ System = 4 ]
{

/// Home favorite icon.
Parameter FAVORITEICON = "portal/home.ico";

/// Set this to the appropriate application class.
Parameter APPLICATION = "%ZEN.Portal.Application";

/// Set this to the correct domain.
Parameter DOMAIN = "%Utility";

/// Name of this page.
Parameter PAGENAME = "Home";

/// If true, register visits to this page in the recent list.
Parameter RECENT = 0;

/// Indicates the id of which item is selected in the selector pane (on the left).
Property currItemId As %ZEN.Datatype.string [ InitialExpression = "HOME" ];

/// Number of items in the selector pane (this is automatically computed).
Property itemCount As %ZEN.Datatype.integer;

/// If true, then show this page in a special mode where the user can assign resources.
/// User must hold %Admin_Secure for this to be enabled.
Property resourceMode As %ZEN.Datatype.boolean;

Property btnGo As %ZEN.Datatype.caption [ InitialExpression = {$$$Text("Go")} ];

/// Index of current item in search dropdown.
Property currDropdownIndex As %ZEN.Datatype.integer;

/// Used by search box to track link of selected item.
Property searchLink As %ZEN.Datatype.string;

/// If true, the the "Home" page needs to be refreshed to see new favorites.
Property homeChanged As %ZEN.Datatype.boolean [ InitialExpression = 0 ];

/// Current login user name.
Property Username As %ZEN.Datatype.string;

/// Current $NAMESPACE. This is the namespace user seleccted from the Switch namespace dialog and will be used in navigate().
Property NAMESPACE As %ZEN.Datatype.string;

/// This gets computed on after page create
Property HSHomePage As %String(MAXLEN = 256);

/// Name of the current namespace (from $ZU(5)).
Property NSNAME As %ZEN.Datatype.string;

/// If it is 1, it indicates that user clicked the "Home" link in small menu link then show "Home" selector.
Property isGoHome As %ZEN.Datatype.boolean(ZENURL = "isGoHome") [ InitialExpression = 0 ];

Property IsEnsembleInstalled As %ZEN.Datatype.boolean [ InitialExpression = {##class(%Library.EnsembleMgr).IsEnsembleInstalled()} ];

Property IsHealthShareInstalled As %ZEN.Datatype.boolean [ InitialExpression = {##class(%Library.EnsembleMgr).IsHealthShareInstalled()} ];

Property InstanceGUID As %String [ InitialExpression = {##class(%SYS.System).InstanceGUID()} ];

XData CSS3Style
{
<style type="text/css">

#selector {
	overflow: auto;
}

.ribbonTitle {
	background: #E0E0F0;
	color: #404040;
	font-size: 24px;
}

.nsItem {
	display: block;
	width: 100%;
	color: #404040;
	padding-top: 2px;
	padding-bottom: 2px;
	font-size: 10pt;
	text-decoration: none;
}

.nsItem:hover {
	color: #404040;
	cursor: pointer;
	text-decoration: underline;
}

#finder {
	width: 0px;
	background: white;
	overflow: hidden;
}

.finderColumn {
	overflow-y: auto;
}
.selectorOuter {
	background: none;
	padding: 4px;
	padding-right: 6px;
}

.selectorOuterSelected {
	background: white;
	padding: 4px;
	padding-right: 6px;
	border-top-right-radius: 10px;
	border-top-left-radius: 10px;
}

.selectorInner {
	background: #E0E0F0;
	text-align: left;
	vertical-align: middle;
}

.selectorInnerDisabled {
	background: #D0D0D0;
	text-align: left;
	vertical-align: middle;
	opacity: 0.50;
}

.selectorOuterSelected .selectorInner {
	border: 1px solid #D0D0D0;
	background: rgb(53,107,141);
}

.selectorOuterSelected .selectorInner {
	background: linear-gradient(top, rgb(53,107,141), rgb(23,77,101));
}

.selectorOuterSelected .selectorInner td {
}

.selectorInner td,.selectorInnerDisabled td {
	font-weight: bold;
	font-size: 14pt;
}

.selectorInner a,.selectorInnerDisabled a {
	display: block;
	padding: 2px;
	padding-right: 12px;
	text-decoration: none;
	color: black;
	vertical-align: middle;
}

.selectorInnerDisabled .selectorInnerTD {
	color: #808080;
}

.selectorInnerTD {
	color: #404040;
	cursor: pointer;
}

.selectorInnerIMG {
	cursor: pointer;
}

.selectorOuterSelected .selectorInnerTD {
	color: white;
	text-shadow: #808080 1px 1px 1px;
}

.selectorInner a:visited, .selectorInner a:active {
	color: black;
}

.selectorInner a:hover {
	background: #FFEEAA;
}

.selectorOuterSelected .selectorInner a:hover {
	background: none;
}

.selectorInner a:hover .selectorInnerTD {
	color: #404040;
}

.selectorOuterSelected .selectorInner a:hover .selectorInnerTD {
	color: #FFEEAA;
}

.listCommand {
	color: white;
}

.ndMain {
	position: relative;
	padding: 22px;
	color: #404040;
	font-family: arial;
}

.ndMainTitle {
	color: #404040;
	font-size: 22pt;
	text-shadow: #D0D0D0 2px 2px 2px;
}

.ndMainTitle:first-letter {
	color: #404040;
	font-size: 34pt;
}

.ndMainSub {
	color: #606060;
	font-size: 10pt;
	padding-bottom: 10px;
}

.ndWrapper {
	height: 150px;
	width: 80%;
	overflow-y: auto;
}

table td.ndTitle {
	color: rgb(53,107,141);
	font-weight: bold;
	font-size: 12pt;
	border-bottom: 1px solid gray;
}

table td.ndSubtitle {
	color: #808080;
	font-size: 10pt;
	padding-bottom: 5px;
}

table td.ndOption {
	font-size: 11pt;
	padding-bottom: 3px;
}

table td.ndOption a {
	text-decoration: none;
	color: #404040;
	font-size: 11pt;
	display: block;
	width: 100%;
}

table td.ndOption a:hover {
	text-decoration: none;
	color: #202020;
	background: #FFEEAA;
}

table.searchTable {
}

table.searchTable td {
	padding: 4px;
}

table.searchDropDownTable {
}

table.searchDropDownTable td {
}

.rowEven {
}

.rowOdd {
	background: #F0F0F0;
}

.ndDidYou {
	color: #404040;
	font-size: 11pt;
	line-height: 120%;
	padding-top: 5px;
	padding-bottom: 3px;
}

a.ndCloseIcon img {
	opacity: 0.5;
}

a.ndCloseIcon:hover img {
	opacity: 1.0;
}

.ndLabel {
	color: #606060;
	font-weight: bold;
	font-size: 8pt;
}

.ndLink {
	padding: 2px;
	text-decoration: none;
	color: #6060D0;
}

.ndLink:hover {
	text-decoration: none;
	color: #202060;
	background: #FFEEAA;
}

.sdLink {
	padding: 2px;
	text-decoration: none;
	color: #606060;
	display: block;
	font-size: 10pt;
}

.sdLink:hover {
	text-decoration: none;
	color: #404040;
	background: #FFEEAA;
}

#messagePanel {
	border-left: 1px solid #F0F0F0;
	width: 200px;
}

.sysHeader {
	color: #606060;
	font-weight: bold;
	font-size: 10pt;
	padding-top: 10px;
}

.sysInfo {
	color: #404040;
	font-size: 10pt;
}

.sysAlert {
	color: #F04040;
	font-size: 10pt;
	font-weight: bold;
}

.sysRunning {
	color: #40A040;
	font-size: 10pt;
	font-weight: bold;
}

.sysLinkDiv {
	cursor: pointer;
}

#searchBox {
	color: darkblue;
	width: 250px;
	border: 1px solid rgb(53,107,141);
	border-radius: 3px;
}

#searchGroupWrapper {
	position: relative;
}

#searchGroup {
	position: absolute;
	visibility: hidden;
}

#searchDropDown {
	position: fixed;
	top: 100px;
	left: 830px;
	width: 245px;
	height: 250px;
	border: 1px solid rgb(53,107,141);
	background: white;
	z-index: 3;
	overflow-y: auto;
	overflow-x: hidden;
}

#searchDropDownShadow {
	position: fixed;
	top: 104px;
	left: 830px;
	width: 245px;
	height: 250px;
	border: 1px solid gray;
	background: black;
	opacity: 0.5;
	color: gray;
	z-index: 2;
	overflow-y: auto;
	overflow-x: hidden;
}

.searchDropDownList {
	padding: 2px;
}

</style>
}

XData Style
{
<style type="text/css">

#selector {
	overflow: auto;
}

.ribbonTitle {
	background: #E0E0F0;
	color: #404040;
	font-size: 24px;
}

.nsItem {
	display: block;
	width: 100%;
	color: #404040;
	padding-top: 2px;
	padding-bottom: 2px;
	font-size: 10pt;
	text-decoration: none;
}

.nsItem:hover {
	color: #404040;
	cursor: pointer;
	text-decoration: underline;
}

#finder {
	width: 0px;
	background: white;
	overflow: hidden;
}

.finderColumn {
	overflow-y: auto;
}
.selectorOuter {
	background: none;
	padding: 4px;
	padding-right: 6px;
}

.selectorOuterSelected {
	background: white;
	padding: 4px;
	padding-right: 6px;
	-moz-border-radius-topleft: 10px;
	-moz-border-radius-bottomleft: 10px;
	border-radius-topleft: 10px;
	border-radius-bottomleft: 10px;
}

.selectorInner {
	background: #E0E0F0;
	text-align: left;
	vertical-align: middle;
}

.selectorInnerDisabled {
	background: #D0D0D0;
	text-align: left;
	vertical-align: middle;
	opacity: 0.50;
}

.selectorOuterSelected .selectorInner {
	border: 1px solid #D0D0D0;
	background: rgb(53,107,141);
}

/* non-ie! */
.selectorOuterSelected .selectorInner:not([ie]) {
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0.0,rgb(53,107,141)), color-stop(1.0,rgb(23,77,101)));
	background: -moz-linear-gradient(top, rgb(53,107,141), rgb(23,77,101));
}

.selectorOuterSelected .selectorInner td {
}

.selectorInner td,.selectorInnerDisabled td {
	font-weight: bold;
	font-size: 14pt;
}

.selectorInner a,.selectorInnerDisabled a {
	display: block;
	padding: 2px;
	padding-right: 12px;
	text-decoration: none;
	color: black;
	vertical-align: middle;
}

.selectorInnerDisabled .selectorInnerTD {
	color: #808080;
}

.selectorInnerTD {
	color: #404040;
	cursor: pointer;
}

.selectorInnerIMG {
	cursor: pointer;
}

.selectorOuterSelected .selectorInnerTD {
	color: white;
	text-shadow: #808080 1px 1px 1px;
}

.selectorInner a:visited, .selectorInner a:active {
	color: black;
}

.selectorInner a:hover {
	background: #FFEEAA;
}

.selectorOuterSelected .selectorInner a:hover {
	background: none;
}

.selectorInner a:hover .selectorInnerTD {
	color: #404040;
}

.selectorOuterSelected .selectorInner a:hover .selectorInnerTD {
	color: #FFEEAA;
}

.listCommand {
	color: white;
}

.ndMain {
	position: relative;
	padding: 22px;
	color: #404040;
	font-family: arial;
}

.ndMainTitle {
	color: #404040;
	font-size: 22pt;
	text-shadow: #D0D0D0 2px 2px 2px;
}

.ndMainTitle:first-letter {
	color: #404040;
	font-size: 34pt;
}

.ndMainSub {
	color: #606060;
	font-size: 10pt;
	padding-bottom: 10px;
}

.ndWrapper {
	height: 150px;
	width: 80%;
	overflow-y: auto;
}

table td.ndTitle {
	color: rgb(53,107,141);
	font-weight: bold;
	font-size: 12pt;
	border-bottom: 1px solid gray;
}

table td.ndSubtitle {
	color: #808080;
	font-size: 10pt;
	padding-bottom: 5px;
}

table td.ndOption {
	font-size: 11pt;
	padding-bottom: 3px;
}

table td.ndOption a {
	text-decoration: none;
	color: #404040;
	font-size: 11pt;
	display: block;
	width: 100%;
}

table td.ndOption a:hover {
	text-decoration: none;
	color: #202020;
	background: #FFEEAA;
}

table.searchTable {
}

table.searchTable td {
	padding: 4px;
}

table.searchDropDownTable {
}

table.searchDropDownTable td {
}

.rowEven {
}

.rowOdd {
	background: #F0F0F0;
}

.ndDidYou {
	color: #404040;
	font-size: 11pt;
	line-spacing: 120%;
	padding-top: 5px;
	padding-bottom: 3px;
}

a.ndCloseIcon img {
	opacity: 0.5;
	filter:alpha(opacity=50);
}

a.ndCloseIcon:hover img {
	opacity: 1.0;
	filter:alpha(opacity=100);
}

.ndLabel {
	color: #606060;
	font-weight: bold;
	font-size: 8pt;
}

.ndLink {
	padding: 2px;
	text-decoration: none;
	color: #6060D0;
}

.ndLink:hover {
	text-decoration: none;
	color: #202060;
	background: #FFEEAA;
}

.sdLink {
	padding: 2px;
	text-decoration: none;
	color: #606060;
	display: block;
	font-size: 10pt;
}

.sdLink:hover {
	text-decoration: none;
	color: #404040;
	background: #FFEEAA;
}

#messagePanel {
	border-left: 1px solid #F0F0F0;
	width: 200px;
}

.sysHeader {
	color: #606060;
	font-weight: bold;
	font-size: 10pt;
	padding-top: 10px;
}

.sysInfo {
	color: #404040;
	font-size: 10pt;
}

.sysAlert {
	color: #F04040;
	font-size: 10pt;
	font-weight: bold;
}

.sysRunning {
	color: #40A040;
	font-size: 10pt;
	font-weight: bold;
}

.sysLinkDiv {
	cursor: pointer;
}

#searchBox {
	color: darkblue;
	width: 250px;
	border: 1px solid rgb(53,107,141);
	-moz-border-radius: 3px;
	border-radius: 3px;
}

#searchGroupWrapper {
	position: relative;
}

#searchGroup {
	position: absolute;
	visibility: hidden;
}

#searchDropDown {
	position: fixed;
	top: 100px;
	left: 830px;
	width: 245px;
	height: 250px;
	border: 1px solid rgb(53,107,141);
	background: white;
	z-index: 3;
	overflow-y: auto;
	overflow-x: hidden;
}

#searchDropDownShadow {
	position: fixed;
	top: 104px;
	left: 830px;
	width: 245px;
	height: 250px;
	border: 1px solid gray;
	background: black;
	opacity: 0.5;
	filter:alpha(opacity=25);
	color: gray;
	z-index: 2;
	overflow-y: auto;
	overflow-x: hidden;
}

.searchDropDownList {
	padding: 2px;
}

</style>
}

XData contentPane [ XMLNamespace = "http://www.intersystems.com/zen" ]
{
<pane id="homePane" hidden="true">
<group id="searchGroupWrapper">
<group id="searchGroup">
<html id="searchDropDownShadow"/>
<html id="searchDropDown" OnDrawContent="DrawSearchDropDown"/>
</group>
</group>

<timer id="timer" timeout="10000" ontimeout="zenPage.updateMessagePanel(zenThis);"/>
<jsonProvider id="json" OnGetArray="GetFinderArray"/>
<html id="splash" hidden="true" OnDrawContent="DrawSplashContent"/>
<hgroup cellVAlign="top">
<spacer width="25"/>
<html id="selector" valign="top" OnDrawContent="DrawSelector"/>
<vgroup cellVAlign="top" cellStyle="padding-top:6px;">
<finderPane id="finder" ongetdata="return zen('json').getContentObject();" 
	onselectitem="return zenPage.itemSelected(item);"
	ondrawdetails="return zenPage.drawDetails(item,finder,index);"
	ondrawempty="return zenPage.drawEmptyFinder();"
	ondblclick="return zenPage.itemDoubleClick(item);"	
	listColumns="name,description" selectFirstOnIconDrillDown="false"
	/>
</vgroup>

<html id="searchResults" hidden="true" OnDrawContent="DrawSearchResults"/>
<html id="messagePanel" hidden="true" OnDrawContent="DrawMessagePanel"/>
</hgroup>

</pane>
}

/// This method is called when user clicked "Go" after selecting a menu item. The url may be reconstructed based on where you are going.<br/>
/// For example, if you are going to an Ensemble namespace, the url will become /csp/ensnamespace/...
ClassMethod CheckURL(pURL, pNAMESPACE) As %String [ ZenMethod ]
{
	// YSD2497 If this is implied namespace, then do not try to reconstruct URL because we cannot reconstruct the namespace in the URL with implied namespace.
	// User has to use Switch namespace again if they want to use Ensemble.
	#;YSD2618 If $E(pNAMESPACE,1,2) = "^^" Quit ""
	#;YSD2618 If NAMESPACE'="%SYS",NAMESPACE '= "", ($ZCVT(URL,"U")_"/") '[ ("/"_NAMESPACE_"/") {
	Set URL = pURL
	If pNAMESPACE'="%SYS",pNAMESPACE '= "",pURL '[ "/" {
		Set URL = ..GetNewURL(pNAMESPACE,pURL)
	}
	Quit URL
}

/// Return the array of links to show in the locator bar.<br/>
/// pLink(n)=$LB(caption,link) 
Method %GetLocatorLinks(Output pLink) As %Status
{
	// default: make *this* page the complete list
	Set tPageName = $$$ZENVAL(..title)
	Set tPageName = $P(tPageName," ",$L(tPageName," "))
	Set pLink(1) = $LB(tPageName,$ZCVT($classname(),"O","URL")_".zen")
	Quit $$$OK
}

/// This class method callback is called just before the server-side page 
/// object is created.
Method %OnAfterCreatePage() As %Status
{
	Set tSC = ##super()
	If $$$ISERR(tSC) Quit tSC

	// if we are the security manager, allow setting of custom resources
	If ($System.Security.Check("%Admin_Secure","U")) {
		Set ..resourceMode = 1
	}

	// save the current $Username into property, so it can be used to compare if it is the same as the last login. 
	// If it differs then the last "state" will not be restored.
	Set ..Username = $Username
	
	Set ..NAMESPACE = $G(%request.Data("$NAMESPACE",1))
	Set ..NSNAME = $ZU(5)

	If %page.IsHealthShareInstalled {
		Set tURL = ##class(%ZHSLIB.SessionEventUtil).GetHealthSharePortalLink()
		Set ..HSHomePage = tURL
	}
	Quit tSC
}

/// Get the (localized) title string for the page.
/// This should be implemented in a subclass.
Method %OnGetTitle() As %String
{
	Quit $$$Text("Welcome")_", "_$UserName
}

/// Get the (localized) name of the page.
/// This should be implemented in a subclass.
Method %OnGetPageName() As %String
{
	Quit $$$Text("Home")
}

/// Get information to display in the ribbon bar.
Method OnGetRibbonInfo(Output pDisplay As %Boolean, Output pViewIcons As %List, Output pSortOptions As %List, Output pSearchBox As %Boolean, Output pRibbonTitle As %String) As %Status
{
	Set pDisplay = 1
	Set pSearchBox = 1
	Set pRibbonTitle = $$$Text("Management Portal")

	Set pViewIcons(1) = $LB("columns",$$$Text("Show columns view"),"portal/view_box_columns.png")
	Set pViewIcons(2) = $LB("list",$$$Text("Show list view"),"portal/view_box_list.png")
	Set pViewIcons(3) = $LB("icons",$$$Text("Show icons view"),"portal/view_box_icons.png")

	// commands
	// $LB(id,caption,help,onclick)
	Quit $$$OK
}

/// This is called in the middle of rendering the tool ribbon.
Method OnDrawRibbon() As %Status
{
	Quit $$$OK
}

/// Draw content of the selector pane.
Method DrawSelector(pSeed As %String) As %Status
{
	// define list of icon boxes (in display order)
	// $LB("id","title","disabled","icon","description",)
	Set k = 0

	Set tItem($I(k)) = $LB("HOME",$$$Text("Home"),,..Link("portal/icon_home.png"),$$$TextHTML("View the Welcome Page"))

	If %page.IsHealthShareInstalled {
		Set tItem($I(k)) = $LB("HS","HealthShare",,..Link("portal/icon_healthshare.png"),$$$TextHTML("Display the list of HealthShare options"))	
	}

	Set tDisabled = '##class(%ZEN.Portal.Application).CanShowSwitch(%request.PageName)
	If $$$comClassDefined("%DeepSee.Utils") {
		// XDEEPSEE means we are not in a DeepSee namespace (this includes implied namespaces).
		// DTB073
		Set tIsDeepSeeEnabled = ##class(%DeepSee.Utils).%IsDeepSeeEnabled()
			
		Set tCat = $S(($ZU(5)'="%SYS")&($ZU(5)'="DOCBOOK")&($E($ZU(5),1,2)'="^^")&tIsDeepSeeEnabled:"DEEPSEE",1:"XDEEPSEE")
		#; YSD2819 If it has no CSP application then you cannot go there
		If tCat="DEEPSEE",$system.CSP.GetPortalApp($ZU(5),"%25DeepSee.UI.Architect.cls")="" Set tCat = "XDEEPSEE"
		Set tItem($I(k)) = $LB(tCat,"DeepSee",tDisabled,..Link("portal/icon_deepsee.png"),$$$TextHTML("Display the list of DeepSee options"))
	}

	Set lblNoPriv = $$$TextHTML("You do not have privilege to view this page.")	

	If %page.IsEnsembleInstalled {
		#; Assume not Ensemble namespace, but enable link to permit namespace switch
		Set tDisabled = 0
		Set tCat = "XENS"
		If ..CheckSecurity("%Ens_Portal") {
			Set tLinkTitle = $$$TextHTML("Display the list of Ensemble options")
			#; YSD2819 If ##class(%Library.EnsembleMgr).IsEnsembleNamespace() {
			If ##class(%Library.EnsembleMgr).IsEnsembleNamespace(),$system.CSP.GetPortalApp($ZU(5),"EnsPortal.ProductionConfig.cls")'="" {
				// Check default database privileges in addition to %Ens_Portal:USE
				If ##class(EnsPortal.Application).CheckPrivileges() {
					Set tCat = "ENS"
				}
				Else {
					Set tCat = "XENSNOPRIV"
				}
			}
		} Else {
			// disable the Ensemble menu if you do not have %Ens_Portal. OW you can click to switch namespace.
			Set tDisabled = 1
			Set tLinkTitle = lblNoPriv
		}
		Set tItem($I(k)) = $LB(tCat,"Ensemble",tDisabled,..Link("portal/icon_ensemble.png"),tLinkTitle)
	}

	Set tDisabled = '..CheckSecurity("%Admin_Operate")
	Set tLinkTitle = $Case(tDisabled,0:$$$TextHTML("Display the list of System Operator tasks"),:lblNoPriv)
	Set tItem($I(k)) = $LB("SYSOP",$$$Text("System Operation"),tDisabled,..Link("portal/icon_sysoperate.png"),tLinkTitle)

	Set tDisabled = '..CheckSecurity("%Development")
	Set tLinkTitle = $Case(tDisabled,0:$$$TextHTML("Display the list of System Explorer options"),:lblNoPriv)
	Set tItem($I(k)) = $LB("SYSEXP",$$$Text("System Explorer"),tDisabled,..Link("portal/icon_sysexplore.png"),tLinkTitle)

	#;YSD2519
	Set tAdm = ..CheckSecurity("%Admin_Manage")
	Set tSec = ..CheckSecurity("%Admin_Secure")
	Set tDisabled = 1
	If tAdm ! (tSec) Set tDisabled = 0
	Set tLinkTitle = $Case(tDisabled,0:$$$TextHTML("Display the list of System Adminstrative and Configuration tasks"),:lblNoPriv)
	Set tItem($I(k)) = $LB("SYSADM",$$$Text("System Administration"),tDisabled,..Link("portal/icon_sysadmin.png"),tLinkTitle)		

	Set ..itemCount = 0
	Set n = $O(tItem(""))
	While (n'="") {
		Set ..itemCount = ..itemCount + 1
		Set tID = $LG(tItem(n),1)
		Set tName = $LG(tItem(n),2)
		Set tDisabled = +$LG(tItem(n),3)
		Set tIcon = $LG(tItem(n),4)
		Set tHelp = $LG(tItem(n),5)
		Set tCls = $S(tID=..currItemId:"selectorOuterSelected",1:"selectorOuter")
		&html<<div class="#(tCls)#" title="#(tHelp)#" id="#("cat_"_tID)#">>
		Set tAttributes = ""
		If 'tDisabled {
			&html<<div class="selectorInner">>
			If tID = "HS" {
				Set tAttributes = "onclick=""zenPage.gotoPage('"_..HSHomePage_"'); if (event) { event.cancelBubble; if (event.stopPropagation) { event.stopPropagation(); } }"""
				&html<<a href="#(..HSHomePage)#">>
			}
			Else {
				&html<<a href="#" onclick="return false;" onmousedown="zenPage.selectCategory('#(tID)#');">>
			}
		} Else {
			&html<<div class="selectorInnerDisabled">
			<a href="#" onclick="return false;">>
		}
		&html<<table #(tAttributes)#><tr>>
		If (tIcon '= "") {
			&html<<td #(tAttributes)#><img class="selectorInnerIMG" alt="" src="#(tIcon)#" #(tAttributes)#/></td>>
		}
		&html<<td id="item_#(..itemCount)#" class="selectorInnerTD" #(tAttributes)#><nobr>&nbsp;#(tName)#</nobr></td>>
		&html<</tr></table></a></div>>
		&html<</div>>
		Set n = $O(tItem(n))
	}
	Quit $$$OK
}

/// Provide the source data (as an array) that will drive the finder.
Method GetFinderArray(ByRef pParameters, Output pMetaData, Output pData) As %Status
{
	// tags are used for searching, but are not displayed
	Set pMetaData = $LB("name","title","link","disabled","icon","description","resource","customResource","tags","modCustom")
	// resource and customResource are set later
	
	If ..currSortMode = "recent" {
		Set tSC = ..GetDeepSeeArray(.pData)
	} Else {
	Set tSC = $Case(..currItemId,
		"HS":..GetHealthShareArray(.pData),
		"ENS":..GetEnsembleArray(.pData),
		"SYSADM":..GetSystemConfigArray(.pData),
		"SYSEXP":..GetSystemExplorerArray(.pData),
		"SYSOP":..GetSystemOperationArray(.pData),
		"DEEPSEE":..GetDeepSeeArray(.pData),
		:$$$OK)
	}

	// granular portal
	// apply resource checks to each link
	// add name of resource and customResource to items, if any
	// For Ensemble, we need to run in an Ensemble namespace to simplify checks for whether the class exists locally
	Set tChecked = 0
	If ..currItemId = "ENS" {
		Try {
			Do // Add stack level to allow $namespace to be popped locally
			.	If (..NAMESPACE '= ..NSNAME) && '##class(%Library.EnsembleMgr).IsEnsembleNamespace() {
			.		New $namespace
			.		Set $namespace = ..NAMESPACE
			.	}
			.	Set tSC = ..%CheckResources(.pData)
			.	Set tChecked = 1
		}
		Catch {}
	}
	If 'tChecked {
		Set tSC = ..%CheckResources(.pData)
	}

	Quit tSC
}

/// Check resources for each item in the menu array.
Method %CheckResources(ByRef pData) As %Status [ Internal ]
{
	Set tSC = $$$OK
	Set n = $O(pData(""))
	Set tURLPrefix = $select($IsObject($get(%request)): %request.URLPrefix, 1: "")
	Set tURLPrefixLen = $length(tURLPrefix)
	While (n'="") {
		Set tNode = $G(pData(n))

		If ($D(pData(n))>1) {
			// child nodes: recurse
			Kill tData
			Merge tData = pData(n)
			Set tSC = ..%CheckResources(.tData)
			If $$$ISERR(tSC) Quit
			Kill pData(n)
			Merge pData(n) = tData
		}
		Else {
			// deal with this node
			Set tSuppliedLink = $LG(tNode,3)
			Set tDisabled = $LG(tNode,4)
			// strip off query, hash and the server prefix for local processing
			Set tLink = $P(tSuppliedLink,"?",1)	
			Set tLink = $P(tLink,"#",1)
			If tURLPrefixLen && ($extract(tLink,1,tURLPrefixLen) = tURLPrefix) {
				Set tLink = $extract(tLink,tURLPrefixLen+1,*)
			}

			Set tIsPortalPage = ##class(%CSP.Portal.Utils).%IsPortalPage(tSuppliedLink,.tNormLink)
			Set tResource = ""
			Set tCustomResource = ""
			// find custom resource, if any
			If tIsPortalPage {
				Set tCustomResource = ##class(%CSP.Portal.Utils).%GetCustomResource($zconvert(tNormLink,"O","URL"))
			}
			
			// what type of link is this?
			Set tJSLink = tLink["zenPage."
			Set tExt = $$$LOWER($P(tLink,".",$L(tLink,".")))
			Set tPath = $$$LOWER($P(tLink,"/",1,$L(tLink,"/")-1))
			Set tSysLink = ($extract(tLink,1,$length("/csp/sys/")) = "/csp/sys/")
			Set tCls = ""
			If tJSLink {
				If (tExt["enablemirroring") {
					Set tResource = "%Admin_Secure"
				}
			} ElseIf (tExt = "csp") && tSysLink {
				// use path to determine default resource
				If (tPath = "/csp/sys/op") {
					Set tResource = "%Admin_Operate"
				}
				ElseIf (tPath = "/csp/sys/exp") {
					Set tResource = "%Development"
				}
				ElseIf (tPath = "/csp/sys/mgr") {
					Set tResource = "%Admin_Manage"
					If tLink [ "CSP.UI.Portal.Journal.zen" Set tResource = tResource_",%Admin_Journal"
					If tLink [ "UtilSysCSPGateway.csp" Set tResource = "%Admin_Secure" 
				}
				ElseIf (tPath = "/csp/sys/sec") {
					Set tResource = "%Admin_Secure"
				}
			}
			ElseIf ((tExt="cls")||(tExt="zen")) {
				Set tCls =$P(tLink,"/",$L(tLink,"/"))
				Set tCls = $ZCVT(tCls,"I","URL")
				If $extract(tCls) = "_" Set $extract(tCls) = "%"
				Set tCls = $P(tCls,".",1,$L(tCls,".")-1)
			}
			// Link may be to another CSP application
			If $length(tLink,"/") > 1 {
				// Special check for links in /csp/sys/ applications.
				// If we are in %SYS, or the class is always mapped (i.e. starts with "%")
				// we can use $parameter to get the resource list
				If tSysLink && (tCls '= "") && (($extract(tCls)="%") || ($namespace = "%SYS")) {
					Try {
						Set tResource = $parameter(tCls,"RESOURCE")
					}
					Catch {}
				}
				ElseIf tResource = "" {
					Set tResource = $$$Text("Not Available")
				}
				
				If 'tDisabled {
					Set tCanAccess = ##class(%CSP.Portal.Utils).CheckLinkAccess(tSuppliedLink)
					Set tDisabled = $case(tCanAccess, $$$caNotCSPLink: 0, $$$caCanAccessRes: 0, $$$caUnknownTarget: 0, : 1)
				}
			}
			Else { // Link is local
				If ((tExt="cls")||(tExt="zen")) {
					Try {
						Set tResource = $parameter(tCls,"RESOURCE")
					}
					Catch {}
				}

				// check resource(s)
				If ('tDisabled) {
					Set tCheckResources = $lb(tResource, $select(..resourceMode: "", 1: tCustomResource))
					Set tCanAccess = ##class(%CSP.Portal.Utils).CheckLoggedInResources(tCheckResources)
					Set tDisabled = $case(tCanAccess, $$$caNotCSPLink: 0, $$$caCanAccessRes: 0, $$$caUnknownTarget: 0, : 1)
				}
			}

			Set $List(tNode,4) = tDisabled
			Set $List(tNode,7) = tResource
			Set $List(tNode,8) = tCustomResource
			Set $List(tNode,10) = $select('..resourceMode: 0, 1: tIsPortalPage)
		}

		Set pData(n) = tNode
		Set n = $O(pData(n))
	} 
	Quit tSC
}

/// Provide finder contents for the System Config pages.
Method GetSystemConfigArray(Output pData) As %Status
{
	Set tSC = ##class(%CSP.UI.Portal.Application).GetSystemConfigArray(.pData)
	Quit $$$OK
}

/// Provide finder contents for the System Explorer pages.
Method GetSystemExplorerArray(Output pData) As %Status
{
	Set tSC = ##class(%CSP.UI.Portal.Application).GetSystemExplorerArray(.pData)
	Quit $$$OK
}

/// Provide finder contents for the System Operator pages.
Method GetSystemOperationArray(Output pData) As %Status
{
	Set tSC = ##class(%CSP.UI.Portal.Application).GetSystemOperationArray(.pData)	
	Quit $$$OK
}

/// Provide finder contents for the Ensemble pages.
Method GetEnsembleArray(Output pData) As %Status
{
	If ##class(%Library.EnsembleMgr).IsEnsembleNamespace() {
		Set tSC = ##class(EnsPortal.Application).GetEnsembleArray(.pData)
	}
	Quit $$$OK
}

/// Provide finder contents for the DeepSee pages.
Method GetDeepSeeArray(Output pData) As %Status
{
	Set tSC = ##class(%DeepSee.UI.Application).GetDeepSeeArray(.pData)
	Quit $$$OK
}

/// Provide finder contents for the HealthShare pages.
Method GetHealthShareArray(Output pData) As %Status
{
	// Because the HealthShare button goes directly to HealthShare, this isn't needed
	Quit $$$OK
}

/// Provide HTML for details on selected item in finder.
ClientMethod drawDetails(item, finder, index) [ Language = javascript ]
{
	if (null == item) return '';

	var html = new Array();

	switch (finder.viewType) {
	case 'columns':
		html[html.length] = '<div style="text-align:center; padding: 5px;">';
		if (item.name) {
			html[html.length] = '<b>' + item.name + '</b><br/>';
			html[html.length] = '<hr/>';
		}

		var icon = item.icon ? item.icon : 'portal/gear_48.gif';
		html[html.length] = '<img alt="" src="' + icon + '"/></b><br/>';

		var desc = item.description ? item.description : '';

		html[html.length] = desc + '<br/>';
		html[html.length] = '<br/>';
		if (item.link) {
			html[html.length] = '<a class="commandButton" href="#" onclick="zenPage.navigate(\''+item.link+'\');return false;">'+this.btnGo+'</a>' + '<br/>';
			html[html.length] = '<br/><br/><a title="'+$$$Text('Add this item to the favorites list')+'" class="ndLink" href="#" onclick="zenPage.addFavorite(\''+item.name+'\',self.document.location.toString(),\''+item.link+'\'); return false;">'+$$$Text('Add to favorites')+'</a>' + '<br/>';
		}
		else {
			html[html.length] = '<a class="commandButtonDisabled" href="#" onclick="return false;">'+this.btnGo+'</a>' + '<br/>';
		}

		if (this.resourceMode) {
			// show system-defined and custom-defined resources
			html[html.length] = '<hr/>';
			html[html.length] = '<div class="ndLabel" title="'+$$$Text('Name of system resource(s) required to view this page')+'">' + $$$Text('System Resource(s)') + '</div>';

			var rsc = (item.resource&&''!==item.resource) ? item.resource : "-";

			// there may be a list of system resources
			var rt = rsc.toString().split(',');
			for (t = 0; t < rt.length; t++) {
				html[html.length] = '<div title="' + item.resource + '">' + rt[t] + '</div>';
			}

			html[html.length] = '<br/>';
			html[html.length] = '<div class="ndLabel" title="'+$$$Text('Name of custom resource assigned to this page')+'">' + $$$Text('Custom Resource') + '</div>';
			var rsc = (item.customResource&&item.customResource!=='') ? item.customResource : "-";
			html[html.length] = '<div title="' + rsc + '">' + rsc + '</div>';
		
			if (item.name && item.link && item.modCustom) {
				// if no link OR not in portal, then do not show option
				html[html.length] = '<br/><a title="'+$$$Text('Define or change the custom resource required to view this page')+'" class="ndLink" href="#" onclick="zenPage.assignResource(\''+item.name+'\',\''+item.link+'\');return false;">'+$$$Text('Assign')+'</a>' + '<br/>';
			}
		}

		html[html.length] = '</div>';
		break;
	case 'list':
		if (index == finder.selectedList) {
			if (item.link) {
				html[html.length] = '<a class="listCommand" href="#" onclick="return false;" onmousedown="zenPage.navigate(\''+item.link+'\');return false;">Go</a>';
			}
		}
		break;
	case 'icons':
		break;
	}	
	
	return html.join('');
}

/// Provide HTML for empty finder.
ClientMethod drawEmptyFinder(item) [ Language = javascript ]
{
	var splash = zen('splash');
	var html = '';

	switch(this.currItemId) {
	case 'XDEEPSEE':
		html = this.getNamespaceHTML(this.currItemId);
		break;
	case 'XENS':
	case 'XENSNOPRIV':
		html = this.getNamespaceHTML(this.currItemId);
		break;
	default:
		if (zenPage.homeChanged) {
			splash.refreshContents(true);
			zenPage.homeChanged = false;
		}
		html = splash.getEnclosingDiv().innerHTML;
		break;
	}
	return html;
}

/// Provide HTML to select a namespace.
ClientMethod getNamespaceHTML(cat) [ Language = javascript ]
{
	var html = [];

	// get list of namespaces from server
	if (null == this._nsList) {
		var sync = this.GetNamespaceList();
	}

	var nsType = null;
	switch(this.currItemId) {
	case 'XDEEPSEE':
		nsType = 'DeepSee';
		// DTB073 - Display appropriate message for supported and disabled DeepSee namespaces
		var supportsDeepSee = false;
		for (var t = 0; t < this._nsList.length; t++) {
			var currNS = this._nsList[t];
			if (currNS.name == this.NSNAME) {
				supportsDeepSee = currNS.isDeepSee;
			}
		}
		if (supportsDeepSee) {
			html[html.length] = '<div style="padding:10px;font-size:18pt;color:#4040A0;">' + $$$FormatText($$$Text('DeepSee is not enabled in the %1 namespace'),this.NSNAME) + '</div>';
		} else {
			html[html.length] = '<div style="padding:10px;font-size:18pt;color:#4040A0;">' + $$$FormatText($$$Text('The %1 namespace does not support DeepSee'),this.NSNAME) + '</div>';
		}
		break;
	case 'XENS':
		nsType = 'Ensemble';
		html[html.length] = '<div style="padding:10px;font-size:18pt;color:#4040A0;">' + $$$FormatText($$$Text('The %1 namespace does not support Ensemble'),this.NSNAME) + '</div>';
		break;
	case 'XENSNOPRIV':
		nsType = 'Ensemble';
		html[html.length] = '<div style="padding:10px;font-size:18pt;color:#4040A0;">' + $$$Text('You do not have sufficient permissions to access the Ensemble Portal in this namespace.') + '</div>';
		break;
	default:
		break;
	}

	html[html.length] = '<div style="padding-left:10px;font-size:12pt;color:#606060;">' + $$$Text('Please select a different namespace.') + '</div>';

	var finder = zen('finder');
	var divFinder = finder.getEnclosingDiv();
	var hgt = divFinder.offsetHeight - 200;
	var count = 0;

	// show list of namespaces
	html[html.length] = '<div style="padding-top:20px;padding-left:10px;color:#606060;font-size:8pt;">' + (nsType == null ? $$$Text('Available namespaces') : $$$FormatText($$$Text('Available %1 namespaces'),nsType)) + '</div>';
	html[html.length] = '<div style="box-shadow:2px 2px 2px #808080; margin-left:10px;height:'+hgt+'px;width:250px;overflow:auto;border:3px solid #E0E0F0;">';
	for (var t = 0; t < this._nsList.length; t++) {
		var ns = this._nsList[t];
		var showNS = true;
		switch (cat) {
			case 'XENSNOPRIV':
			case 'XENS':
				showNS = ns.isEnsemble;
				break
			case 'XDEEPSEE':
				// DTB073 - Do not add to the list if disabled or unsupported (%SYS, DOCBOOK)
				showNS = (ns.isDeepSee & ns.isDeepSeeEnabled);
				break;
		}
		if (showNS) {
			var style = ns.name == this.NSNAME ? 'font-weight: bold;color:black;' : '';
			var divstyle = 'padding:2px;border-bottom:1px solid #E0E0F0;';
			if ((count++)%2) {
				divstyle += 'background: #F8F8FF;';
			}
			html[html.length] = '<div style="'+divstyle+'"><a class="nsItem" href="#" onclick="zenPage.changeNamespace(\''+ns.name+'\'); return false;" style="'+style+'">'+ns.name+'</a></div>';
		}
	}
	html[html.length] = '</div>';

	return html.join('');
}

/// Item selected within the Finder.
ClientMethod itemSelected(item) [ Language = javascript ]
{
	
	var finder = zen('finder');
	if (finder.viewType != 'columns') {
		this.itemDoubleClick(item);
	}
	return true;
}

/// Item double-clicked within the Finder.
ClientMethod itemDoubleClick(item) [ Language = javascript ]
{
	
	// invoke link for this item
	if (item.link && ''!=item.link) {
		zenPage.navigate(item.link);
	}
	return true;
}

/// Item selected within the Selector.
ClientMethod selectCategory(cat) [ Language = javascript ]
{
	// check for disabled menu items
	var checkDisabled = null;
	switch (cat) {
		case 'ENS':
		case 'XENS':
		case 'XENSNOPRIV':
			checkDisabled = ['ENS','XENS','XENSNOPRIV'];
			break;
		case 'DEEPSEE':
		case 'XDEEPSEE':
			checkDisabled = ['DEEPSEE','XDEEPSEE'];
			break;
	}
	if (checkDisabled) {
		for (var i = 0; i < checkDisabled.length; i++) {
			var menuItem = document.getElementById('cat_'+checkDisabled[i]);
			if (menuItem) {
				cat = checkDisabled[i];
				i = checkDisabled.length;
			}
		}
	}
	if (this.currItemId != cat) {

		// update selection
		var selector = zen('selector');
		if ('' != this.currItemId) {
			var div = document.getElementById('cat_' + this.currItemId);
			if (div) {
				div.className = 'selectorOuter';
			}
		}
		
		this.currItemId = cat;

		if ('' != this.currItemId) {
			var div = document.getElementById('cat_' + this.currItemId);
			if (div) {
				div.className = 'selectorOuterSelected';
			}
		}

		// get new object graph
		zen('json').refreshContent();
	}
	if (cat == 'HOME') this.clearState();

	// update finder
	var finder = zen('finder');
	finder.update(true);
	this.showSearchResults(false);
	return false;
}

/// Adjust sizes of components on the page.
ClientMethod onlayoutHandler(load) [ Language = javascript ]
{
	try {
		
		if (load) {
			// force uncheck of checkbox
			var cb = self.document.getElementById('cb_AssignResources');
			if (cb) {
				cb.checked = false;
			}
			
			var sb = self.document.getElementById('searchBox');
			if (sb) {
				sb.value = '';
				try {
					sb.focus();
				}
				catch(ex) {
				}
			}

			// reveal pane
			var pane = zenPage.getComponentById('homePane');
			pane.setHidden(false);
		}

		var selector = zenPage.getComponentById('selector');
		var finder = zenPage.getComponentById('finder');
		var divSelector = selector.getEnclosingDiv();
		var divFinder = finder.getEnclosingDiv();

		if (load) {
			// check for saved state in cookie
			var cookies = document.cookie;
			var initialState = unescape(this.getCookieValue("state-"+this.InstanceGUID,cookies));
			var Username = unescape(this.getCookieValue("Username",cookies));
			if (Username) {
				if ((Username != this.Username) && (initialState != '')) initialState = '';	
			}
			// if user clicked "Home" link from the small menu next to "About" then show home page with "Home" selector selected.
			// ow, use the last selected menu as default.
			if (!this.isGoHome && initialState!='') {
				//YSD2535 state is selectorId:viewMode:finderState
				// state is selectorId:finderState
				var s = initialState.toString().split(':');
				if ((s[0] == "ENS" && !this.IsEnsembleInstalled) || (s[0] == "HS" && !this.IsHealthShareInstalled)) {
					 s[0] = '';
					 s[1] = '';
					 this.isGoHome = true;
				}
				if (s[0]&&(s[0]!='HS')) {
					zenPage.selectCategory(s[0]);
				}
				if (s[1]) {
					var menuData = zen('json').getContentObject();
					var selectedData = s[1].split(',');
					var currMenu = menuData;
					var isDisabled = false;
					for (var i=0; i < selectedData.length; i++) {
						var pos = parseInt(selectedData[i],10);
						if (currMenu && currMenu.children && currMenu.children[pos]) {
							currMenu = currMenu.children[pos];
							if (currMenu.disabled == 1) {
								isDisabled = true;
								break;
							}
						}
					}
					if (!isDisabled) {
						finder.selectedList = s[1];
					}
				}
			}
			// find last viewMode
			var viewMode = this.getCookieValue("viewMode",cookies);
			if (viewMode != "") zenPage.setViewMode(viewMode);

		}

		// find size of window
		var winHeight = zenGetWindowHeight();
		var winWidth = zenGetWindowWidth();

		var th = this.getTitleAreaHeight();
		var hgt = winHeight - th - 50 - (zenIsIE ? 20 : 0);

		hgt = (hgt < divSelector.offsetHeight) ? divSelector.offsetHeight : hgt;
		divFinder.style.height = hgt + 'px';

		this.makeSelectorBig(winWidth > 700);

		// if large enough, show messagePanel
		var msgPanel = zen('messagePanel');
		var divMsgPanel = msgPanel.getEnclosingDiv();
		divMsgPanel.style.height = hgt + 'px';

		var showMsgPanel = false;
		if (winWidth > 1100) {
			showMsgPanel = true;
		}

		if (showMsgPanel) {
			msgPanel.setHidden(false);
		}
		else {
			msgPanel.setHidden(true);
		}

		var fw = winWidth - divSelector.offsetWidth - 50 - (showMsgPanel ? divMsgPanel.offsetWidth : 0);
		fw = Math.max(fw,1);
		divFinder.style.width = fw + 'px';

		zen('searchResults').getEnclosingDiv().style.width = fw + 'px';

		// compute size of finder columns
		var cols = 3;
		var colWid = fw / cols;
		while (colWid > 250) {
			cols++;
			colWid = (fw-10) / cols;
		}
		colWid = (colWid < 100) ? 100 : colWid;
		finder.setProperty('columnWidth',colWid);
		if (load) {
			divFinder.scrollTop = 0;
			divFinder.scrollLeft = 0;
		}
	}
	catch(ex) {
		zenExceptionHandler(ex,arguments,'Error in onlayoutHandler.');
	}
}

/// Set size of selector to big (true) or small (false).
ClientMethod makeSelectorBig(flag) [ Language = javascript ]
{
	for (var n = 0; n < this.itemCount; n++) {
		var td = self.document.getElementById('item_'+(n+1));
		td.style.display = flag ? '' : 'none';
	}
}

/// Navigate to a new page in the portal.
ClientMethod navigate(url) [ Language = javascript ]
{
	// override: get state of navigator and save in cookie
	this.saveState();
	
	var zenPageIndex = url.indexOf('zenPage.');
	if (zenPageIndex != -1) {
		url = url.substring(zenPageIndex + ('zenPage.'.length));
		var parenIndex = url.indexOf('()');
		url = url.substring(0,parenIndex);
		if (zenPage[url]) zenPage[url]();
		return;
	}
		
	//YSD2618: reconstruct url now
	var url = this.CheckURL(url,this.NAMESPACE);
	if (url == "") {
		alert($$$Text("The selected namespace cannot be used in the given context. For example, you can receive this message if you attempt to access a web application in a given namespace and there is no associated web application for that namespace. Please select a different namespace and try again."));
		return false;
	}
	zenPage.gotoPage(url);
}

/// Do the actual work of updating the view to match the current sort mode.
ClientMethod setSortModeHandler(mode) [ Language = javascript ]
{
	// get new object graph
	zen('json').refreshContent();

	// update finder
	var finder = zen('finder');
	finder.update(true);

	this.showSearchResults(false);
}

/// Given a security resource, this method returns 1 if user has privilege, and 0 if the user does not security privilege for using a particular function.
ClassMethod CheckSecurity(pResource As %String) As %Boolean
{
	Quit $System.Security.Check(pResource,"USE")
}

/// Draw content of the splash pane.
Method DrawSplashContent(pSeed As %String) As %Status
{
	Set tSC = $$$OK
	Try {
		Set tTitle = $$$Text("Welcome to the Management Portal")
		Set tSubtitle = $$$Text("Please select one of the categories on the left or one of the options below")

		&html<<div class="ndMain">
			<div class="ndMainTitle">#(tTitle)#</div>
			<div class="ndMainSub">#(tSubtitle)#</div>>

		// use table to layout 4 boxes
		&html<<table width="100%" border="0" cellspacing="0" cellpadding="20">
		<tr><td valign="top" width="50%">>
		Set tSC = ..%DrawFavorites()
		&html<</td>>
		If $$$ISERR(tSC) Quit

		&html<<td valign="top" width="40%">>
		Set tSC = ..%DrawDidYouKnow()
		&html<</td></tr>>
		If $$$ISERR(tSC) Quit

		&html<<tr><td valign="top">>
		Set tSC = ..%DrawRecent()
		&html<</td>>
		If $$$ISERR(tSC) Quit

		&html<<td valign="top" width="40%">>
		Set tSC = ..%DrawLinks()
		&html<</td></tr>>
		If $$$ISERR(tSC) Quit

		&html<</table>>
		&html<</div>>
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
}

/// Draw the did you know box.
Method %DrawDidYouKnow() As %Status
{
	Set tTitle = $$$Text("Did you know?")
	&html<<table border="0" cellspacing="0" cellpadding="0">
	<tr><td class="ndTitle">#(tTitle)#</td></tr>
	</table>>

	&html<<div class="ndDidYou">>
	Write ..%GetDidYouKnowText()
	&html<</div>>
	Quit $$$OK
}

/// Draw the favorites box.
Method %DrawFavorites() As %Status
{
	Set tTitle = $$$Text("Favorites")
	Set tSubtitle = $$$Text("Go to a favorite page")
	Set tSC = ##class(%CSP.Portal.Utils).%GetFavoritesForUser(.tOptions)
	If $$$ISERR(tSC) Quit tSC

	Set tSC = ..%DrawOptionsBox(tTitle,tSubtitle,.tOptions,"favorites")
	Quit tSC
}

/// Draw the recent items list.
Method %DrawRecent() As %Status
{
	Set tTitle = $$$Text("Recent")
	Set tSubtitle = $$$Text("Go to a recently viewed page")
	Set tSC = ##class(%CSP.Portal.Utils).%GetRecentItemsForUser(.tOptions)
	If $$$ISERR(tSC) Quit tSC

	Set tSC = ..%DrawOptionsBox(tTitle,tSubtitle,.tOptions,"recent")
	Quit tSC
}

/// Draw the Links list.
Method %DrawLinks() As %Status
{
	Set tTitle = $$$Text("Links")
	Set tSubtitle = $$$Text("Pages you may be interested in")

	// tOptions(n) = $LB(name,date,url,title)
	Set tOptions($I(n)) = $LB($$$Text("Samples"),"",..Link("/csp/samples/ZENDemo.Home.cls?CSPSHARE=1"),$$$Text("View sample applications"))
	Set tOptions($I(n)) = $LB($$$Text("Documentation"),"",..Link("/csp/docbook/DocBook.UI.Page.cls"),$$$Text("Product Documentation"))
	Set tOptions($I(n)) = $LB($$$Text("Support"),"",..Link("http://www.intersystems.com/support/index.html"),$$$Text("InterSystems Worldwide Response Center"))
	Set tOptions($I(n)) = $LB($$$Text("InterSystems"),"",..Link("http://www.intersystems.com"),$$$Text("InterSystems Home Page"))

	Set tSC = ..%DrawOptionsBox(tTitle,tSubtitle,.tOptions)
	Quit tSC
}

/// Draw contents of one options box (favorites or recent).
Method %DrawOptionsBox(pTitle As %String, pSubtitle As %String, ByRef pOptions As %List, pWhich As %String = "") As %Status
{
	// pOptions is:
	// pOptions(n) = $LB(caption,date,url)

	Set hlpRemove = $$$Text("Remove this item")
	
	&html<<table border="0" width="80%" cellspacing="0" cellpadding="0">
	<tr><td class="ndTitle" colspan="2">#(pTitle)#</td></tr>
	<tr><td class="ndSubtitle" colspan="2">#(pSubtitle)#</td></tr>>
	&html<</table>>

	&html<<div class="ndWrapper">>
	&html<<table border="0" width="80%" cellspacing="0" cellpadding="0">>
	Set k = $O(pOptions(""))
	While (k'="") {
		Set tCaption = $LG(pOptions(k),1)
		Set tDate = $LG(pOptions(k),2)
		Set tURL = $LG(pOptions(k),3)
		Set tTitle = $LG(pOptions(k),4)
		&html<<tr>
		<td class="ndOption" nowrap="1" title="#(tTitle)#"><a href="#(tURL)#">#(tCaption)#</a></td>>
		If (pWhich'="") {
			&html<<td width="80%" style="padding-left:10px;"><a title="#(hlpRemove)#" class="ndCloseIcon" href="#" onclick="zenPage.removeItem('#(pWhich)#','#($ZCVT(tCaption,"O","JS"))#');return false;"><image src="deepsee/close_a_16.gif"/></a></td>>
		}
		&html<</tr>>
		Set k = $O(pOptions(k))
	}

	&html<</table>>
	&html<</div>>
	Quit $$$OK
}

ClientMethod addFavorite(name, url, link) [ Language = javascript ]
{
	zenPage.homeChanged = true;
	var ok = zenPage.AddToFavorites(name,url,link);
	alert($$$Text('Item added to favorites'));
}

/// Add item to favorites list.
ClassMethod AddToFavorites(pName As %String, pURL As %String, pLink As %String) As %Boolean [ ZenMethod ]
{
	// pURL is url of home page
	// If user has selected a new namespace %session.Data("$NAMESPACE") is set. 
	// We need to recalculate the pLink based on the new namespace and the page name because it is possible that
	// user pressed Add Favoriate before pressing Go therefore new url has not been calculated -- we need
	// to calculate it here before saving to Favorite.
	// Modify History: YSD2477, YSD2636
	If $G(%session.Data("$NAMESPACE")) '= "" {
		Set tLink = ..GetNewURL(%session.Data("$NAMESPACE"),pLink)
		If tLink '= "" Set pLink = tLink
	}
	Do ##class(%CSP.Portal.Utils).%AddFavorite(pName,pLink)
	Quit 1
}

/// Remove the given item from its list.
ClientMethod removeItem(which, name) [ Language = javascript ]
{
	switch(which) {
	case 'recent':
		this.RemoveRecent(name);
		break;
	case 'favorites':
		this.RemoveFavorite(name);
		break;
	}
	zenPage.goHome();
}

/// Remove a recent item from the list.
ClassMethod RemoveRecent(pName As %String) As %Boolean [ ZenMethod ]
{
	Do ##class(%CSP.Portal.Utils).%RemoveRecentItem(pName)
	Quit 1
}

/// Remove a favorite item from the list.
ClassMethod RemoveFavorite(pName As %String) As %Boolean [ ZenMethod ]
{
	Do ##class(%CSP.Portal.Utils).%RemoveFavoriteItem(pName)
	Quit 1
}

/// Return localized "did you know" message.
ClassMethod %GetDidYouKnowText() As %String
{
	Set n = 0
	Set tText($I(n)) = $$$Text("You can return to this list by clicking on the Home link at the top of the page.")
	Set tText($I(n)) = $$$Text("You can add items to your favorites list by selecting an item and clicking Add To Favorites (in the Action Pane); click Help for more information.")
	Set tText($I(n)) = $$$Text("You can change namespaces by clicking on the Switch link at the top of the page.")
	Set tText($I(n)) = $$$Text("You can choose how to view items by selecting a category and then selecting one of the icons next to View.")
	Set tText($I(n)) = $$$Text("You can jump directly to items by clicking on the Menu at the top of the page.")
	Set tText($I(n)) = $$$Text("If an item is greyed out then it is unavailable or you do not hold the correct privileges for it.")
	Set tText($I(n)) = $$$Text("You can login as a different user by clicking on the Logout link at the top of the page.")
	Set tText($I(n)) = $$$Text("You can search for items by entering a phrase in the search box and pressing Enter.")
	Set tText($I(n)) = $$$Text("You can jump directly to an item by double-clicking on its menu option.")
	Set tText($I(n)) = $$$Text("You can add this page, or any other in the portal, to your favorites list within your browser.")
	Set tText($I(n)) = $$$Text("You can view summary information about this system by clicking on the About link at the top of the page.")
	Set tText($I(n)) = $$$Text("You can view the portal in a different language by clicking on the About link at the top of the page and changing the preferred language.")

	If $$$ZENISIE {
		Set tText($I(n)) = $$$Text("The management portal is much faster and looks much better using the FireFox or Chrome browsers.")
	}

	Set tText($I(n)) = $$$FormatText($$$Text("There are over %1 different did-you-know tips!"),n)

	Quit $G(tText($R(n)+1))
}

/// Toggle resource edit mode.
ClientMethod toggleResourceMode(iscb) [ Language = javascript ]
{
	this.resourceMode = !this.resourceMode;

	if (!iscb) {
		var cb = self.document.getElementById('cb_AssignResources');
		cb.checked = this.resourceMode;
	}

	if (this.resourceMode) {
		this.setViewMode('columns');
	}
	var finder = zen('finder');
	if (finder) {
		finder.update();
	}
}

/// Launch the assign resource dialog.
ClientMethod assignResource(name, link) [ Language = javascript ]
{
	// show assign resource dialog
	var parms = {
			NAME:name,
			LINK:link,
			$NAMESPACE:((this.NSNAME != '')&&(typeof this.NSNAME == 'string') ? this.NSNAME : this.NAMESPACE)
			};

	zenLaunchPopupWindow(zenLink('/csp/sys/_CSP.Portal.ResourceDialog.zen'),'AssignResource','status,scrollbars,resizable=yes,width=700,height=600',parms);
}

/// This client event is fired when the a popup page launched from this page fires an action.
ClientMethod onPopupAction(popupName, action, value) [ Language = javascript ]
{
	if (action != 'ok') return false;
	switch(popupName) {
	case 'AssignResource':
		// get new object graph
		zen('json').refreshContent();

		var finder = zen('finder');
		if (finder) {
			finder.update();
		}
		break;
	case 'EnableMirroring':
		// get new object graph
		zen('json').refreshContent();

		var finder = zen('finder');
		if (finder) {
			finder.update();
		}
		break;
	case 'switchNamespace':
		// save the current state into cookie so after switching namespace and page refreshed it is at the right place
		this.saveState();
		var url = zenPage.GetNewURL(value,"%25CSP.Portal.Home.zen");
		// do not use this.gotoPage(url) because zenLink will not honor the latest $NAMESPACE you selected, i.e. you may end up with multiple $NAMESPACE on the URL.
		self.document.location = url;
		break;
	}
}

/// Save current state into cookie so when page is refreshed it goes back to the last selection.<br/>
/// This method is called from navigate()and onPopupAction() for case switchNamespace
ClientMethod saveState() [ Language = javascript ]
{
	var state = this.currItemId;
	state += ':' + zen('finder').selectedList;
	// save state in cookie
	this.setCookieValue('state-'+this.InstanceGUID,escape(state));	
	//save Username so that we can compare the next time we login.
	this.setCookieValue('Username',escape(this.Username));
}

/// This method clears the 'state' cookie which indicates the last selection for the finderPane position on the SMP portal home.
ClientMethod clearState() [ Language = javascript ]
{
	document.cookie = 'state-'+this.InstanceGUID+'=; path=/; expires=Thu, 01-Jan-1970 00:00:01 GMT';
	return true;
}

/// Go to the home page.
ClientMethod goHome() [ Language = javascript ]
{
	this.clearState();
	self.document.location = this.homePage;
	return false;
}

/// Change in search box value. Can be overridden by subclasses.
ClientMethod searchBoxHandler(searchKey) [ Language = javascript ]
{
	this.searchKey = searchKey;
	if ('' != this.searchKey) {
		zen('searchResults').refreshContents();
		this.showSearchResults(true);
	}
	else {
		this.showSearchResults(false);
	}
}

/// Hide/show search results.
ClientMethod showSearchResults(flag) [ Language = javascript ]
{
	if (flag) {
		zen('searchResults').setHidden(false);
		zen('finder').setHidden(true);
	}
	else {
		zen('searchResults').setHidden(true);
		zen('finder').setHidden(false);
	}
}

/// Draw contents of the search results panel.
Method DrawSearchResults(pSeed As %String) As %Status
{
	Set tSC = $$$OK
	Try {
		&html<<div class="ndMain">>
		Set lblNoPriv = $$$TextHTML("You do not have privilege to view this page.")	
		Set msgSearch = $$$TextHTML("Search results for:")
		&html<<div class="ndMainSub" style="padding-bottom:5px;">>
		Write msgSearch,"&nbsp;<b><i>",$ZCVT(..searchKey,"O","HTML"),"</i></b>"
		&html<</div>>
		
		&html<<div class="ndMainSub">>
		Set tCount = 0
		If (..searchKey'="") {
			&html<<table class="searchTable" border="0" cellpadding="0" cellspacing="0">>
			Do ..%GetSearchResults($$$UPPER(..searchKey),.tResults)
			Set k = $O(tResults(""))
			While (k'="") {
				Set tCount = tCount + 1
				Set tLabel = $LG(tResults(k),1)
				Set tURL = $LG(tResults(k),2)
				Set tTitle = $LG(tResults(k),3)
				Set tCls = $S(tCount#2:"rowOdd",1:"rowEven")
				#;YSD2518 - do not build link if it failed custom resource check
				Set tDisabled = $LG(tResults(k),4)
				If 'tDisabled {
					Set tURL = ..CheckURL(tURL,%page.NAMESPACE)
					&html<<tr class="#(tCls)#"><td><a class="ndLink" href="#(tURL)#" >#($ZCVT(tLabel,"O","HTML"))#</a></td><td>#($ZCVT(tTitle,"O","HTML"))#</td></tr>>
				} Else {
					&html<<tr class="#(tCls)#"><td title="#(lblNoPriv)#">#($ZCVT(tLabel,"O","HTML"))#</td><td title="#(lblNoPriv)#">#($ZCVT(tTitle,"O","HTML"))#</td></tr>>
				}
				Set k = $O(tResults(k))
			}
			&html<</table>>
		}

		If (tCount = 0) {
			Write "<b>",$$$TextHTML("No items found"),"</b>"
		}

		&html<</div>>

		&html<<hr/>>

		Set msgClose = $$$TextHTML("Return to main menu")
		&html<<div class="ndMainSub">>
		&html<<a class="ndLink" href="#" onclick="zenPage.showSearchResults(false);return false;">#(msgClose)#</a>>
		&html<</div>>

		&html<</div>>
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
}

/// Return an array of search results:
/// pResults(n) = $LB(name,url,title)
Method %GetSearchResults(pSearchKey As %String, Output pResults As %List)
{
	// get array of all visible items
	If ..CheckSecurity("%Admin_Operate"),%page.IsHealthShareInstalled {
			Kill tData
			Do ..GetHealthShareArray(.tData)
			Set tSC = ..%CheckResources(.tData)
			Do ..%ApplySearchToArray(pSearchKey,.tData,.pResults)

	}

	If %page.IsEnsembleInstalled {
		If ..CheckSecurity("%Ens_Portal"),##class(%Library.EnsembleMgr).IsEnsembleInstalled() {
			Do	// Add a stack frame for a possible NEW of $namespace
			.	If ($namespace = "%SYS") && (..NAMESPACE '= $namespace) {
			.		New $namespace
			.		Set $namespace = ..NAMESPACE
			.	}
			.	If ##class(%Library.EnsembleMgr).IsEnsembleNamespace() {
			.		Kill tData
			.		Do ..GetEnsembleArray(.tData)
			.		Set tSC = ..%CheckResources(.tData)
			.		Do ..%ApplySearchToArray(pSearchKey,.tData,.pResults)
			.	}
		}
	}

	#;YSD2519
	If (..CheckSecurity("%Admin_Manage")||(..CheckSecurity("%Admin_Secure"))) {
		Kill tData
		Do ..GetSystemConfigArray(.tData)
		Set tSC = ..%CheckResources(.tData)
		Do ..%ApplySearchToArray(pSearchKey,.tData,.pResults)
	}

	If (..CheckSecurity("%Development")) {
		Kill tData
		Do ..GetSystemExplorerArray(.tData)
		Set tSC = ..%CheckResources(.tData)
		Do ..%ApplySearchToArray(pSearchKey,.tData,.pResults)
	}

	If (..CheckSecurity("%Admin_Operate")) {
		Kill tData
		Do ..GetSystemOperationArray(.tData)
		Set tSC = ..%CheckResources(.tData)
		Do ..%ApplySearchToArray(pSearchKey,.tData,.pResults)
	}

	If $$$comClassDefined("%DeepSee.Utils") {
		Kill tData
		Do ..GetDeepSeeArray(.tData)
		Set tSC = ..%CheckResources(.tData)
		Do ..%ApplySearchToArray(pSearchKey,.tData,.pResults)
	}
}

/// Walk down array; find elements containing search key.
Method %ApplySearchToArray(pSearchKey As %String, ByRef pArray, Output pResults As %List)
{
	If (pSearchKey'="") {
		// split search key into words
		For p=1:1:$L(pSearchKey," ") {
			Set:$P(pSearchKey," ",p)'="" tTerms($$$UPPER($P(pSearchKey," ",p))) = ""
		}

		Set k = $O(pArray(""))
		While (k'="") {
			Set tURL = $LG(pArray(k),3)
			If (tURL'="") {
				Set tName = $LG(pArray(k),1)
				Set tTitle = $LG(pArray(k),6)
				Set tTags = $LG(pArray(k),9)
				Set tDisabled = +$LG(pArray(k),4)
			
				// test each term against tags
				Set tMatch = 0
				For p=1:1:$L(tTags,",") {
					If ($P(tTags,",",p)'="") {
						If $D(tTerms($$$UPPER($P(tTags,",",p)))) {
							Set tMatch = 1
							Quit
						}
					}
				}

				If (tMatch||($$$UPPER(tName)[pSearchKey)||($$$UPPER(tTitle)[pSearchKey)) {
					#;YSD2518 Set pResults($$$UPPER(tName)_":"_$I(pResults)) = $LB(tName,tURL,tTitle)
					Set pResults($$$UPPER(tName)_":"_$I(pResults)) = $LB(tName,tURL,tTitle,tDisabled)
				}
			}
			If ($D(pArray(k))>1) {
				// recurse
				Kill tArray
				Merge tArray = pArray(k)
				Do ..%ApplySearchToArray(pSearchKey,.tArray,.pResults)
			}
	
			Set k = $O(pArray(k))
		}
	}
}

/// Do the actual work of updating the view to match the current view mode.
ClientMethod setViewModeHandler(mode, oldmode) [ Language = javascript ]
{
	// update finder
	var finder = zen('finder');
	if (finder) {
		finder.setViewType(this.currViewMode);
		//save viewMode to cookie
		this.setCookieValue('viewMode',this.currViewMode);
	}
	this.showSearchResults(false);
}

/// Display the search results drop down.
ClientMethod showSearchDropdown() [ Language = javascript ]
{
	this.searchLink = '';
	this.currDropdownIndex = -1;

	var sb = self.document.getElementById('searchBox');
	if (sb) {
		var group = zen('searchGroup').getEnclosingDiv();
		group.style.left = zenGetLeft(sb) - zenGetLeftScroll(sb);
		group.style.top = '0px';
		group.style.height = '100px';
		group.style.width = '100px';

		var dd = zen('searchDropDown');
		var enc = dd.getEnclosingDiv();
		enc.style.left = zenGetLeft(sb) - zenGetLeftScroll(sb);

		var dds = zen('searchDropDownShadow');
		var encs = dds.getEnclosingDiv();
		encs.style.left = zenGetLeft(sb) - zenGetLeftScroll(sb) + 2;

		if (zenIsIE) {
			// no shadow on IE!
			encs.style.display = 'none';
		}

		if (sb.value!='' && (sb.value.toString().length > 2)) {
			//dd.setHidden(false);
			dd.setProperty('seed',sb.value);
			//dds.setHidden(false);
			group.style.visibility = 'visible';
		}
		else {
			//dd.setHidden(true);
			//dds.setHidden(true);
			group.style.visibility = 'hidden';
		}
	}
}

/// Display the search results drop down.
ClientMethod hideSearchDropdown() [ Language = javascript ]
{
	var group = zen('searchGroup').getEnclosingDiv();
	group.style.visibility = 'hidden';
	/*
	var dd = zen('searchDropDown');
	dd.setHidden(true);
	var dds = zen('searchDropDownShadow');
	dds.setHidden(true);
	*/
	zenPage.clearSearchTimer();
}

/// Start the search timer.
ClientMethod startSearchTimer() [ Language = javascript ]
{
	zenPage.clearSearchTimer();
	zenPage._searchTimerId = self.setTimeout("zenPage.searchTimerHandler()",220);
}

/// Stop the search timer.
ClientMethod clearSearchTimer() [ Language = javascript ]
{
	if (zenPage._searchTimerId) {
		self.clearTimeout(zenPage._searchTimerId);
		zenPage._searchTimerId = null;
	}
}

/// Action for search timer.
ClientMethod searchTimerHandler() [ Language = javascript ]
{
	zenPage.showSearchDropdown();
}

/// Key down in search box (override).
ClientMethod searchKeyDown(evt) [ Language = javascript ]
{
	if (!zenIsIE) {
		return true;
	}

	evt = evt ? evt : event;
	var ctrl = self.document.getElementById('searchBox');
	if (!ctrl) return;

	switch(evt.keyCode) {
	case zenESC:
		zenPage.hideSearchDropdown();
		break;
	case zenDOWN:
		zenPage.searchBoxDown();
		break;
	case zenUP:
		zenPage.searchBoxUp();
		break;
	default:
		break;
	}

	return true;
}

/// Key press in search box (override).
ClientMethod searchKeyPress(evt) [ Language = javascript ]
{
	evt = evt ? evt : event;
	var ctrl = self.document.getElementById('searchBox');
	if (!ctrl) return;

	switch(evt.keyCode) {
	case zenENTER:
		if (this.searchLink != '') {
			self.document.location = this.searchLink;
			return;
		}

		zenPage.hideSearchDropdown();
		zenPage.searchBoxHandler(ctrl.value);
		break;
	case zenESC:
		if (!zenIsIE) {
			zenPage.hideSearchDropdown();
		}
		break;
	case zenDOWN:
		if (!zenIsIE) {
			zenPage.searchBoxDown();
		}
		break;
	case zenUP:
		if (!zenIsIE) {
			zenPage.searchBoxUp();
		}
		break;
	default:
		// assume edit of value
		this.searchLink = '';
		zenPage.startSearchTimer();
		break;
	}
}

/// Blur event in search box.
ClientMethod searchBlur(evt) [ Language = javascript ]
{
	zenPage.hideSearchDropdown();
}

/// Go to prev item in search box dropdown.
ClientMethod searchBoxUp() [ Language = javascript ]
{
	var dd = zen('searchDropDown');
	if (dd.getProperty('hidden')) {
		return;
	}

	if (this.currDropdownIndex > 0) {
		var el = self.document.getElementById('sbdd_' + this.currDropdownIndex);
		if (el) {
			el.style.color = '';
			el.style.background = '';
		}
		this.currDropdownIndex--;
		var el = self.document.getElementById('sbdd_' + this.currDropdownIndex);
		if (el) {
			el.style.color = 'white';
			el.style.background = 'rgb(53,107,141)';
			var sb = self.document.getElementById('searchBox');
			sb.value = el.getAttribute('searchValue');
			this.searchLink = el.href;
			zenScrollIntoView(zen('searchDropDown').getEnclosingDiv(),el);
		}
	}
}

/// Go to next item in search box dropdown.
ClientMethod searchBoxDown() [ Language = javascript ]
{
	var sb = self.document.getElementById('searchBox');

	var dd = zen('searchDropDown');
	if (dd.getProperty('hidden')) {
		return;
	}
	var el = self.document.getElementById('sbdd_' + this.currDropdownIndex);
	var el2 = self.document.getElementById('sbdd_' + (this.currDropdownIndex+1));
	if (!el2) return;

	if (el) {
		el.style.color = '';
		el.style.background = '';
	}
	this.currDropdownIndex++;
	if (el2) {
		el2.style.color = 'white';
		el2.style.background = 'rgb(53,107,141)';
		var sb = self.document.getElementById('searchBox');
		sb.value = el2.getAttribute('searchValue');
		this.searchLink = el2.href;
		zenScrollIntoView(zen('searchDropDown').getEnclosingDiv(),el2);
	}
}

/// Draw contents of the search results dropdown.
Method DrawSearchDropDown(pSeed As %String) As %Status
{
	Set tSC = $$$OK
	Try {
		&html<<div class="searchDropDownList">>

		Set tCount = 0
		If (pSeed'="") {
		&html<<table class="searchDropDownTable" border="0" cellpadding="0" cellspacing="0" width="100%">>
			Do ..%GetSearchResults($$$UPPER(pSeed),.tResults)
			Set k = $O(tResults(""))
			While (k'="") {
				Set tCount = tCount + 1
				Set tLabel = $LG(tResults(k),1)
				Set tURL = $LG(tResults(k),2)
				Set tTitle = $LG(tResults(k),3)
				Set tCls = $S(tCount#2:"rowOdd",1:"rowEven")
				&html<<tr class="#(tCls)#"><td><a id="sbdd_#(tCount-1)#" class="sdLink" title="#($ZCVT(tTitle,"O","HTML"))#" href="#(tURL)#" searchValue="#($ZCVT(tLabel,"O","HTML"))#" >#($ZCVT(tLabel,"O","HTML"))#</a></td></tr>>
				Set k = $O(tResults(k))
			}
			&html<</table>>
		}
		If (tCount = 0) {
			Write "<span style=""color:#606060;font-size:10pt;""><i>",$$$TextHTML("No items found"),"</i></span>"
		}

		&html<</div>>
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
}

ClientMethod updateMessagePanel(timer) [ Language = javascript ]
{
	var msgPanel = zen('messagePanel');
	if (msgPanel) {
		msgPanel.refreshContents();
		timer.startTimer();
	}
}

/// Draw contents of the message panel.
Method DrawMessagePanel(pSeed As %String) As %Status
{
	Set tSC = $$$OK
	Try {
		&html<<div style="padding: 5px;">>

		Set tTitle = $$$Text("System Information")
		Set tSubTitle = $$$Text("General details on this system")
		&html<<table style="margin-top:20px;" border="0" cellspacing="0" cellpadding="0">
		<tr><td class="ndTitle">#(tTitle)#</td></tr>
		<tr><td class="ndSubtitle">#(tSubTitle)#</td></tr>
		</table>>

		If ..CheckSecurity("%Admin_Operate") {
			#; YSD2518 Check custom resource 
			Set tData(1) = $LB($$$Text("System Dashboard"),,..Link("/csp/sys/op/UtilDashboard.csp?Recent=1"),,..Link("portal/network_monitor_48.gif"),$$$Text("View system real-time performance dashboard."))
			Set tSC = ..%CheckResources(.tData)
			#; If not disabled then build the link
			If +$LG(tData(1),4) = 0 {
				Set tLink = ..Link("/csp/sys/op/UtilDashboard.csp")
				&html<<div style="margin-top:5px;"><a class="ndLink" style="font-size:10pt;" href="#(tLink)#">#($$$Text("View System Dashboard"))#</a></div>>
			}
		}
		// check for important system stats

		// THIS LIST SHOULD BE SHORT

		// calculate system up time
		Set tSecs = $P($ZH,".",1)
		Set tDays = tSecs\86400

		Set tSeconds = tSecs#86400
		Set tHours = tSeconds\3600
		Set tMinutes = (tSeconds#3600)\60
		#;YSD2331 Set tUpTime = tDays _ "d " _ $J(tHours,2) _ "h " _ $TR($J(tMinutes,2)," ","0") _ "m"
		Set tUpTime = $$$FormatText($$$Text("%1d %2h %3m"), tDays, $J(tHours,2), $TR($J(tMinutes,2)," ","0"))

		&html<<div class="sysHeader">#($$$Text("System Up Time"))#</div>>
		&html<<div class="sysInfo">#(tUpTime)#</div>>

		Set tDatabaseSpace = $G(^CacheTemp.SysMetrics("DatabaseSpace"),"OK")
		Set tJournalSpace = $G(^CacheTemp.SysMetrics("JournalSpace"),"OK")
		Set tLockTable = $G(^CacheTemp.SysMetrics("LockTable"),"OK")
		Set tWriteDaemon = $G(^CacheTemp.SysMetrics("WriteDaemon"),"OK")

		If (($R(100)>100)||(tDatabaseSpace="Troubled")||(tDatabaseSpace="Warning")||(tDatabaseSpace="Unavailable")) {
			Set tMessage = $$$TextHTML("The directory for this database is low on space.")
			If tDatabaseSpace = "Unavailable" Set tMessage = $$$TextHTML("This database is offline.")
			Set tLink = ..Link("/csp/sys/op/%25CSP.UI.Portal.OpDatabases.zen")
			&html<<div class="sysHeader">#($$$Text("Database Space"))#</div>>
			&html<<div class="sysAlert">#(tMessage)#</div>>
			&html<<div><a class="ndLink" style="font-size:10pt;" href="#(tLink)#">#($$$Text("More details"))#</a></div>>
		}
		If (($R(100)>100)||(tJournalSpace'="OK")) {
			Set tMessage = $$$TextHTML("This system is low on journal space.")
			Set tLink = ..Link("/csp/sys/op/UtilSysJournals.csp")
			&html<<div class="sysHeader">#($$$Text("Journal Space"))#</div>>
			&html<<div class="sysAlert">#(tMessage)#</div>>
			&html<<div><a class="ndLink" style="font-size:10pt;" href="#(tLink)#">#($$$Text("More details"))#</a></div>>
		}
		If (($R(100)>100)||(tLockTable'="OK")) {
			Set tMessage = $$$TextHTML("This system's lock table is full or troubled.")
			Set tLink = ..Link("/csp/sys/op/%25CSP.UI.Portal.Locks.zen")
			&html<<div class="sysHeader">#($$$Text("Lock Table"))#</div>>
			&html<<div class="sysAlert">#(tMessage)#</div>>
			&html<<div><a class="ndLink" style="font-size:10pt;" href="#(tLink)#">#($$$Text("More details"))#</a></div>>
		}
		If (($R(100)>100)||(tWriteDaemon'="OK")) {
			Set tMessage = $$$TextHTML("This system is having trouble writing data to disk.")
			Set tLink = ..Link("/csp/sys/op/UtilDashboard.csp")
			&html<<div class="sysHeader">#($$$Text("Write Daemon"))#</div>>
			&html<<div class="sysAlert">#(tMessage)#</div>>
			&html<<div><a class="ndLink" style="font-size:10pt;" href="#(tLink)#">#($$$Text("More details"))#</a></div>>
		}

		If (%page.IsEnsembleInstalled) {
			// get information on current productions
			// tProdInfo(ns) = $LB(production,status,ok,isHS,statusNum)
			Set tSC = ##class(%SYS.Ensemble).GetStatusAll(.tProdInfo)
			If $$$ISERR(tSC) {
				// Don't show data if user doesn't have permissions
				If $system.Status.Equals(tSC,$$$InsufficientPrivilegeForOperation) {
					Kill tProdInfo
					Set tSubTitle = $$$TextHTML("You are not permitted to view the status of productions on this system")
				}
				Else {
					Set tErrorText = $system.Status.GetErrorText(tSC)
					Set tSubTitle = $$$FormatTextHTML($$$Text("Unable to retrieve information for all Ensemble productions due to error: %1"),tErrorText)
				}
				Set tSC = $$$OK
			}
			Else {
				If $D(tProdInfo) {
					Set tSubTitle = $$$TextHTML("Productions running on this system")
				}
				Else {
					Set tSubTitle = $$$TextHTML("There are no productions currently running on this system")
				}
			}
			Set tTitle = $$$Text("Ensemble Productions")
			&html<<table style="margin-top:20px;" border="0" cellspacing="0" cellpadding="0">
			<tr><td class="ndTitle">#(tTitle)#</td></tr>
			<tr><td class="ndSubtitle">#(tSubTitle)#</td></tr>
			</table>>

			Set tNS = $O(tProdInfo(""))
			While (tNS'="") {
				Set tTitle = $$$FormatTextHTML($$$Text("%1 in %2"),$LG(tProdInfo(tNS),1),tNS)

				// construct link to Config page; ensure it can handle HS links
				If ($LG(tProdInfo(tNS),5) < 0) {
					Set tLink = ""
				}
				Else {
					Set tUrl = ##class(%Library.EnsembleMgr).DetermineMgmtURLForNamespace(tNS,0)
					Set tBaseUrl = tUrl_"EnsPortal.ProductionConfig.zen?PRODUCTION="_$ZCVT($LG(tProdInfo(tNS),1),"O","URL")
					Set tLink = ..Link(tBaseUrl)
				}
				If tLink = "" {
					Set tOnClick = ""
					Set tLinkClass = ""
				}
				Else {
					// gotoPage takes care of linking
					Set tOnClick = "onclick=""zenPage.gotoPage('"_tBaseUrl_"');"""  
					Set tLinkClass = "sysLinkDiv"
				}
				&html<<div class="sysHeader #(tLinkClass)#" #(tOnClick)#>#(tTitle)#</div>>
				&html<<div class="#($S($LG(tProdInfo(tNS),3):"sysRunning",1:"sysAlert"))# #(tLinkClass)#" #(tOnClick)#>#($LG(tProdInfo(tNS),2))#</div>>
				If (tLink'="") {
					&html<<div><a class="ndLink" style="font-size:10pt;" href="#(tLink)#">#($$$TextHTML("View details"))#</a></div>>
				}
				Set tNS = $O(tProdInfo(tNS))
			}
		}

		&html<</div>>
	}
	Catch(ex) {
		Set tSC = ex.AsStatus()
	}
	Quit tSC
}

/// Generic method to get a cookie value. cookieName is the name, e.g. "state", cookieString is document.cookie.
ClientMethod getCookieValue(cookieName, cookieString) As %String [ Language = javascript ]
{
	var startLoc = cookieString.indexOf(cookieName);
	if (startLoc == -1) return("");  // No such cookie
	var cookieArray = cookieString.split("; ");
	var returnValue = "";
	for (var n=0; n < cookieArray.length; n++) {
		startLoc = cookieArray[n].split("=");
		if (startLoc[0] == cookieName) {
			returnValue = startLoc[1];
			break;
		}
	}
   	return returnValue;
}

/// Generic method to set a cookie name and value pair.<br>
/// The expiration date is set to 2020 which is the same as in generic SMP pages, which should be changed before end of 2020.
ClientMethod setCookieValue(cookieName, cookieValue) As %String [ Language = javascript ]
{
	var expires = '; expires=Thursday, 31-Dec-2020 23:59:59 GMT';
	document.cookie = cookieName + "=" + cookieValue + ";path=/;" + expires;
}

/// Change to a new namespace.
ClientMethod changeNamespace(ns) [ Language = javascript ]
{
	// use same logic as the dialog
	this.onPopupAction('switchNamespace','ok',ns);
}

/// Populate the client-size zenPage._nsList array
/// with a list of available namespace and flags to indicate whether 
/// each is Ensemble- and DeepSee-enabled.
ClassMethod GetNamespaceList() As %String [ ZenMethod ]
{
	If '$data(%request) Quit ""
	Do ##class(%CSP.Portal.Utils).%GetNamespaceList(.NspList)
	&js<zenPage._nsList = [];>
	Set tNamespace = $O(NspList(""))
	While tNamespace '= "" {
		Set tEnabled = $lg(NspList(tNamespace),1)
		If (tEnabled = 1) {
			Set tIsEnsemble = $select($data(^%SYS("Ensemble","InstalledNamespace",tNamespace)): "true", 1: "false")
			#; DDP404 - HSLIB is a special case and should NOT be listed as an Ensemble namespace
			If (tNamespace = "HSLIB") && ##class(%Library.EnsembleMgr).IsHealthShareNamespace("HSLIB") Set tIsEnsemble = "false"
			Set tIsDeepSee = $select((tNamespace="%SYS")||(tNamespace="DOCBOOK"): "false", 1: "true")		
			#; YSD2819 - Check if there is a default CSP application for the namespace. If none is found then set tIsEnsemble or tIsDeepSee to false.
			If tIsEnsemble = "true",$system.CSP.GetPortalApp(tNamespace,"EnsPortal.ProductionConfig.cls") = "" Set tIsEnsemble = "false"
			If tIsDeepSee = "true",$system.CSP.GetPortalApp(tNamespace,"%25DeepSee.UI.Architect.cls") = "" Set tIsDeepSee = "false"
			// DTB073 - check to see if the default application is enabled for use with DeepSee
			Set tIsDeepSeeEnabled = $select(##class(%DeepSee.Utils).%IsDeepSeeEnabled(tNamespace):"true", 
									1:"false")
			
			&js<zenPage._nsList.push({ "name": '#($zcvt(tNamespace,"O","JS"))#', "isDeepSee": #(tIsDeepSee)#, "isDeepSeeEnabled": #(tIsDeepSeeEnabled)#, "isEnsemble": #(tIsEnsemble)# });>
		}
		Set tNamespace = $O(NspList(tNamespace))
	}

	Quit ""
}

ClientMethod enableMirroring() [ Language = javascript ]
{
	var url = zenLink('/csp/sys/sec/%CSP.UI.Portal.Dialog.Service.zen?PID=%Service_Mirror');
	zenLaunchPopupWindow(url,'EnableMirroring','resizable,width=600,height=600');
}

/// Zen page notification of an HTTP request. This method can be overwritten
/// by subclasses.<br/>
/// This is called <em>before</em> the standard Zen pre-HTTP processing occurs.
ClassMethod %OnPreHTTP() As %Boolean [ ServerOnly = 1 ]
{
	#; If $NAMESPACE is not present from URL, then check user's security Startup Namespace.
	Set tCurrentNamespace = $ZU(5)
	If tCurrentNamespace = "%SYS",$G(%request.Data("$NAMESPACE",1)) = "" {
		Set tSC = $$GetSecurityUserInfo^%SYS.SECURITY($Username,.p)
		#; if for some reason we got error then quit
		If $$$ISERR(tSC) Quit 0
		Set tDefNamespace = $G(p("NameSpace"))
		If tDefNamespace '= "",tDefNamespace '= tCurrentNamespace {
			If ##class("%SYS.Namespace").Exists(tDefNamespace) {
				Set %response.Redirect = ..Link("%25CSP.Portal.Home.zen",,1)_"$NAMESPACE="_tDefNamespace
			}
		}
	}
	Quit 1
}

}
