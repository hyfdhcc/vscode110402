ROUTINE LABEL [Type=INT]
LABEL ;System Utilities *BEB* ; STC1243 07/12/07
 ;change the directory label for a selected CACHE.DAT
 /*
 +--------------------------------------------------------+
 | Copyright 1986-2015 by InterSystems Corporation,       |
 | Cambridge, Massachusetts, U.S.A.                       |
 | All rights reserved.                                   |
 |                                                        |
 | Confidential, unpublished property of InterSystems.    |
 |                                                        |
 | This media contains an authorized copy or copies       |
 | of material copyrighted by InterSystems and is the     |
 | confidential, unpublished property of InterSystems.    |
 | This copyright notice and any other copyright notices  |
 | included in machine readable copies must be reproduced |
 | on all authorized copies.                              |
 +--------------------------------------------------------+
 */
GO ;select a directory, display it's label directory, get a new
 N R,X,DIR,ROOT,NVOL,LINK,VOL,TYPE,MOUNT,POP
 New dirinfo,isbigdb,mtemp1
 N dirlist S dirlist="^mtemp1(""dir"")" ;list of directories
 I $G(@dirlist)<$H K @dirlist S @dirlist=$H_","_$J_","_$I ;make current
 W !!,"Enter the name of the directory in which the database is"
 W !,"stored. For a multi-volume database, enter the name of the"
 W !,"primary volume's directory, even if you want to relabel a"
 W !,"secondary volume. For a multi-volume legacy 2K database, you"
 W !,"should enter the name of the secondary volume directory if "
 W !,"you need to relabel it."
DIR W ! S R=$$GetDir("Directory") Q:R=""
 I $E(R)="?" W ! DO  G DIR
 . W !?4,"Enter the directory of a "_"Cache"_" database which contains a "_"CACHE"_".DAT."
 . Write !,?4,"For a legacy 2k database you may also enter a directory which"
 . Write !,?4,"contains a "_"CACHE"_".EXT. If it is a legacy 2k database you may change"
 . W !?4,"the directory label for that database to point to another directory."
 . Write !,?4,"For any multivolume database, you may relabel the secondary volumes." 
 S DIR=$$ChkDirOrSpecEXISTS(R) G DIR:DIR="" I DIR'=R W "  "_DIR ;resolve ref
 D Touch(DIR) ;add DIR to available directory list
 Set dirinfo=$zu(49,DIR)
 Set isbigdb=$Piece(dirinfo,",",21)
 S TYPE=$$TYPE(DIR) I TYPE="" W *7 DO  G DIR
 . If isbigdb W !?4,"That directory does not contain a "_"CACHE"_".DAT."
 . Else  W !?4,"That directory contains neither a "_"CACHE"_".DAT nor a "_"CACHE"_".EXT"
 S ROOT=$$ROOT(DIR) ;get either the label (type=0) or root (type=1)
 S LINK=$$LINK(DIR) ;get pointer to next volume in chain
 S NVOL=$$NVOL(DIR) ;get the expected number of volumes?
 I NVOL="" S NVOL=$$NVOL(ROOT) ;possibly available under old name
 D Touch(LINK),Touch(ROOT) ;add other directories
 ;
 I TYPE=0 D FIRST G DIR ;primary/first volume
 I TYPE=1 D SECOND G DIR ;secondary/link volume
 W *7 W !?4,"unknown volume type: '"_TYPE_"' for volume '"_DIR_"'"
 G DIR
FIRST ;'DIR' represents the first volume
 I 'NVOL W ! DO  W ! ;case where volume should be one of one
 . W !?4,"Directory '"_DIR_"' contains a primary Database volume."
 . W !?4,"Volume status information is currently unavailable.  The"
 . W !?4,"current label is '"_ROOT_"'"
 . I DIR=ROOT W ", which is correct." Q
 . I $$STAT(DIR)]"" W ", which is correct." Q
 . W ", which is NOT correct; this label needs to be"
 . W !?4,"changed to match the directory where the database is located"
 . W !?4,"(i.e. '"_DIR_"')."
 I NVOL=1 W ! DO  W ! ;case where volume should be one of one
 . W !?4,"Directory '"_DIR_"' is the only Database volume."
 . If 'isbigdb W !?4,"The current label is '"_ROOT_"'"
 . Else  Quit  
 . I $ZU(12,DIR)=$zu(12,ROOT) W !,?4,"which is correct." Q
 . W !?4,"which is NOT correct; this label needs to be changed to"
 . W " match",!,?4,"the directory where the database is located"
 . W !?4,"(i.e. '"_DIR_"')."
 I NVOL>1 W ! DO  W ! ;volume should be first of many
 . W !?4,"Directory '"_DIR_"' "
 . w !?8,"is the first volume of a database"
 . W " containing "_NVOL_" volumes."
 . If isbigdb Quit
 . w !?4,"The first link volume is '"_LINK_"'" DO
 . . N LR S LR=$$ROOT(LINK) D Touch(LR) ;get/add LR
 . . I LR=DIR W !?8,"which points back to the current volume." Q
 . . I LR=ROOT W !?8,"which points to the label volume." Q
 . . I (LR="")!(LR=-1) W !?8,"which *HAS NO PRIMARY VOLUME*." Q
 . . W !?8,"which points to '"_LR_"'" Q
 . W !!?4,"The current label for this volume is '"_ROOT_"'"
 . I $ZU(12,DIR)=$zu(12,ROOT) W !?4,"which is correct." Q
 . W !?8,"which is NOT correct; this label needs to be changed to"
 . w " match",!?8,"the directory where the database is located"
 . W !?8,"(i.e. '"_DIR_"')."
 If isbigdb {
    If NVOL=1 Quit  
    Write !?4,"The first secondary volume is '"_LINK_"'" Goto FLINK
 }
FNEW S R=$$GetDir("New Label",DIR) q:R=""
 I $E(R)="?" W ! DO  W ! G FNEW ;help about label fof first volume
 . W !?4,"Enter the new label for this volume.  In order for"
 . W !?4,"Cache"_" to mount the volume successfully, this label must"
 . W !?4,"be the same name as the directory in which it is located."
 S NEW=$$ChkDirOrSpecEXISTS(R) I NEW="" W !,"(invalid directory name)" G FNEW
 I NEW=ROOT W !,"(no change)" G FLINK
 S MOUNT=$$MOUNTED(DIR) ;is directory DIR mounted?
 I MOUNT S MOUNT=$$DISMNT(DIR) I 'MOUNT Q  ;if mounted, ask to dismount
 S X=$$LABSET(DIR,NEW) I 'X D FAIL(X) Q  ;could not change label?
 I MOUNT S X=$$REMOUNT(DIR) I 'X W !,X ;re-mount the directory
 W !,"Label Modification complete.",!
FLINK I NVOL=1,LINK="" Q  ;only condition when link is not editable
 ;
 G EDLINK
 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
SECOND ;edit the information for an CACHE.EXT
 S NVOL=$$NVOL(ROOT)
 I NVOL=1 W *7 DO  ;one??? when we're in a secondary???  WARN'em
 . W !?4,"This database indicates that there should be only ONE"
 . W !?4,"volume; yet this is obviously not the case -- this may"
 . W !?4,"indicate SERIOUS corruption of this database!!!"
 N VOL S VOL=1 I ROOT]"" D CHAIN1(ROOT,.VOL) ;display chain
 N FND,II S FND="" F II=1:1:VOL I $G(VOL(II))=DIR S FND=II
 I 'FND W *7,!,"Currently this volume is NOT in the chain!",!
 E  W !,"Currently this is volume "_FND_" of the database.",!
SNEW S R=$$GetDir("Point to Primary Volume",ROOT) I R="" G SNDEL
 I $E(R)="?" W ! DO  W ! G SNEW ;help about label of extra volumes
 . W !?4,"Enter the new primary volume for this database.  In order"
 . W !?4,"for "_"Cache"_" to use this volume correctly, this pointer must"
 . W !?4,"be the same name as the directory or the primary volume"
 . W !?4,"of this database."
 S NEW=$$ChkDirOrSpecEXISTS(R) I NEW="" W !,"(invalid directory name)" G SNEW
 I NEW=ROOT W !,"(no change)" G EDLINK
 S MOUNT=$$MOUNTED(DIR) ;is directory DIR mounted?
 I MOUNT S MOUNT=$$DISMNT(DIR) I 'MOUNT Q  ;ask if already mounted
 S X=$$PNTSET(DIR,NEW) I 'X D FAIL(X) Q  ;could not change label?
 I MOUNT S X=$$REMOUNT(DIR) I 'X W !,X ;re-mount the directory
 W !,"Root Pointer Modification complete.",!
 G EDLINK
SNDEL W !!,"*** NOT ALLOWED TO DELETE ROOT VOLUME POINTERS YET!!! ***",! Q
CHAIN1(DIR,VOL) ;given DIR as a 'top' directory, and 'VOL' as the volume
 N DD S DD=DIR S:'$G(VOL) VOL=1 F  DO  Q:DD=""  ;walk through the links
 . W !,"Vol "_VOL I NVOL W "/"_NVOL_". "
 . W ?12,DD S DD(DD)=VOL,VOL(VOL)=DD ;keep track to avoid loops
 . N LL S LL=$$LINK(DD),DD="" Q:LL=""  Q:LL=-1
 . I $D(DD(LL)) W *7,!,"*** REVISITING VOLUME '"_LL_"' ***" Q
 . S VOL=VOL+1,DD=LL D Touch(DD) ;next volume -- make it available
 I NVOL,VOL>NVOL W *7,*7,!?4,"*** too many volumes!!! ***",!
 I NVOL,VOL<NVOL W *7,*7,!?4,"*** too few volumes!!! ***",!
 Q
 ;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
EDLINK ;allow editing of database link here
 W ! N FND S FND=""
 I TYPE=0 DO  W ! ;ask about existing chains
 . I NVOL>1,LINK="" W *7 DO  Q  ;strange case
 . . W !?4,"This PRIMARY VOLUME does not currently contain a link"
 . . W !?4,"to a continuation volume ("_"CACHE"_".EXT), while the status"
 . . W !?4,"information for this database indicates there should"
 . . W !?4,"be '"_NVOL_"' volumes.  Note also that adding a"
 . . W !?4,"continuation volume where one does not belong will be"
 . . W !?4,"extremely hazardous to the integrity of that database."
 . I $$YN("Show existing "_$Case(isbigdb,0:"chain",:"list")_" of volumes","Y")'="Y" Q
 . N DD S DD=$S($$STAT(DIR)="":ROOT,1:DIR) D CHAIN(DD,1) Q
 I TYPE=1 DO  W ! ;for intermediates, show whole chain
 . I $$YN("Show existing chain of volumes","Y")'="Y" Q
 . N VOL S VOL=1 D CHAIN(ROOT,.VOL) ;display chain from the root volume
 . N II F II=1:1:VOL I VOL(II)=DIR S FND=II Q
 . I FND=NVOL,LINK="" DO  Q  ;last entry
 . . W !?4,"This volume is the last volume of the defined chain"
 . . W !?4,"of continuation volumes -- an additional link is NOT"
 . . W !?4,"expected.  Note that adding a continuation volume where"
 . . W !?4,"one does not belong will be extremely hazardous to the"
 . . W !?4,"integrity of that database."
 . I FND<NVOL,LINK="" DO  Q  ;middle entry
 . . W !?4,"This volume *HAS NO CONTINUATION* and is not the expected"
 . . W !?4,"last entry in this database's chain of directories."
 . . W !?4,"Please specify the correct continuation volume from"
 . . W !?4,"this volume."
 ;
EDL If isbigdb Goto EDLBIGDB
 S R=$$GetDir("Link to Volume",LINK) I R="" Q:LINK=""  G EDLDEL
 I $E(R)="?" W ! DO  W ! G EDL
 . W !?4,"Enter the name of the new link volume for this database."
 . W !?4,"This directory should contain the "_"CACHE"_".EXT which is the"
 . W !?4,"proper continuation from this volume ('"_DIR_"')"
 S NLNK=$$ChkDirOrSpecEXISTS(R) I NLNK="" W !,"(invalid directory name)" G EDL
 I NLNK=LINK W !,"(no change)" Q
 S MOUNT=$$MOUNTED(DIR) ;is directory DIR mounted?
 I MOUNT S MOUNT=$$DISMNT(DIR) I 'MOUNT Q  ;ask if mounted
 S X=$$LNKSET(DIR,NLNK) I 'X D FAIL(X) Q  ;could not change label?
 N DIRPNT S DIRPNT=$$ROOT(DIR)  ;root pointer of current volume
 I DIRPNT'="" S X=$$PNTSET(NLNK,DIRPNT) I 'X D FAIL(X) Q
 I MOUNT S X=$$REMOUNT(DIR) I 'X W !,X ;re-mount the directory
 W !,"Volume Link Modification complete.",!
 Quit  
EDLBIGDB For VOL=2:1:NVOL {
    New zu36,newdir Set zu36=$Zutil(36,DIR,0,VOL-1)
    S R=$$GetDir("Change volume "_VOL,zu36) I R="" Q:LINK=""  G EDLDEL
    I $E(R)="?" W ! DO  W ! G EDL
    . W !?4,"Enter the name of the new volume"_VOL_"."
    . W !?4,"This directory should contain the "_"CACHE"_".EXT which is "
    . W !?4,"volume"_VOL_" of the database whose primary volume is in "_DIR
    S newdir=$$ChkDirOrSpecEXISTS(R) I newdir="" W !,"(invalid directory name)" G EDL
    If newdir=zu36  W !,"(no change)" Goto endloop
    S MOUNT=$$MOUNTED(DIR) ;is directory DIR mounted?
    I MOUNT S MOUNT=$$DISMNT(DIR) I 'MOUNT Q  ;ask if mounted
    S X=$$LNKSETBIGDB(DIR,newdir,VOL) I 'X D FAIL(X) Q  ;could not change label?
    I MOUNT S X=$$REMOUNT(DIR) I 'X W !,X ;re-mount the directory
    W !,"Volume Link Modification complete.",!
endloop
    ;
 } ;End For VOL=1...
 Q
EDLDEL W !,"*** DELETION OF LINKS IS NOT CURRENTLY PERMITTED ***",! Q
CHAIN(DIR,VOL) ;given DIR as a 'top' directory, and 'VOL' as the volume
 If isbigdb {
    New zu36 Set zu36=$Zutil(36,DIR,0,VOL-1)
    While (zu36'="" && (zu36'<0)) {
       Write !,"Vol "_VOL_"/"_NVOL_"."
       Write ?12,$Case(VOL,1:DIR,:zu36)
       Set VOL=VOL+1
       Set zu36=$Zutil(36,DIR,0,VOL-1)
    }
    If VOL>(NVOL+1) {
       W *7,*7,!?4,"*** too many volumes!!! ***",!
    }
    If VOL<(NVOL+1) {
       W *7,*7,!?4,"*** too few volumes!!! ***",!
    }
    Quit  
 }
 N DD S DD=DIR S:'$G(VOL) VOL=1 F  DO  Q:DD=""  ;walk through the links
 . W !,"Vol "_VOL I NVOL W "/"_NVOL_". "
 . W ?12,DD S DD(DD)=VOL,VOL(VOL)=DD ;keep track to avoid loops
 . N LL S LL=$$LINK(DD),DD="" Q:LL=""  Q:LL=-1
 . I $D(DD(LL)) W *7,!,"*** REVISITING VOLUME '"_LL_"' ***" Q
 . S VOL=VOL+1,DD=LL D Touch(DD) ;next volume -- make it available
 I NVOL,VOL>NVOL W *7,*7,!?4,"*** too many volumes!!! ***",!
 I NVOL,VOL<NVOL W *7,*7,!?4,"*** too few volumes!!! ***",!
 Q
FAIL(X) W !,X,!,"Volume Modification aborted.",! Q
LABSET(DIR,NEW) N ZU36
 S ZU36=$ZU(36,DIR,0,0,NEW) ;set label of primary vol to NEW
 Q $S(ZU36<0:"Label change failed because "_$$MSG^%DKIOERR(ZU36),1:1)
LNKSET(DIR,NEW) N TYP,ZU36 S TYP=$$TYPE(DIR)
 I TYP="" Q ("Link change failed: no Volume-Type")
 S ZU36=$ZU(36,DIR,TYP,1,NEW) ;change the continuation pointer
 Q $S(ZU36<0:"Link change failed because "_$$MSG^%DKIOERR(ZU36),1:1)
LNKSETBIGDB(DIR,NEW,VOL) New ZU36
 Set ZU36=$Zutil(36,DIR,0,VOL-1,NEW)
 Q $S(ZU36<0:"Changing volume "_VOL_" failed because "_$$MSG^%DKIOERR(ZU36),1:1)
PNTSET(DIR,NEW) N TYP,ZU36 S TYP=$$TYPE(DIR)
 I TYP'=1 Q ("Root pointer change failed: inappropriate Volume-Type")
 S ZU36=$ZU(36,DIR,1,0,NEW) ;change the root pointer
 Q $S(ZU36<0:"Root pointer change failed because"_$$MSG^%DKIOERR(ZU36),1:1)
ROOT(DIR) N ZU36 S ZU36=$ZU(36,DIR,0,0) Q:ZU36'<0 ZU36 ;label of primary volume
 S ZU36=$ZU(36,DIR,1,0) Q:ZU36'<0 ZU36 ;location of primary volume
 Q -1 ;return -1: could not get the root directory
LINK(DIR) N ZU36 S ZU36=$ZU(36,DIR,0,1) Q:ZU36'<0 ZU36 ;link from root volume
 S ZU36=$ZU(36,DIR,1,1) Q:ZU36'<0 ZU36 ;link from secondary volume
 Q -1 ;return -1: could not get link directory
NEXTLINK(DIR,VOL) New ZU36 Set ZU36=$Zutil(36,DIR,0,VOL+1) Quit:ZU36'<0 ZU36
 Quit -1  ; Unknown Error
STAT(DIR) I (DIR=-1)!(DIR="") Q "" ;handle special case; bad directory name...
 S $ZT="STERR" Q $ZU(49,DIR) ;could fail, so...
STERR S $ZT="",$ZE="" Q "" ;return null: MUMPS.DAT, but bad label
TYPE(DIR) N ZU36 S ZU36=$ZU(36,DIR,0,0) Q:ZU36'<0 0 ;assumed primary worked
 S ZU36=$ZU(36,DIR,1,0) Q:ZU36'<0 1 ;assumed secondary worked
 Q "" ;neither!
NVOL(DIR) ;return number-of-volumes belonginf to database
 N ROOT,STAT S STAT=$$STAT(DIR) ;1st try the specified directory
 I STAT="" S ROOT=$$ROOT(DIR),STAT=$$STAT(ROOT) ;then try root
 Q $P(STAT,",",15) ;15th ,-piece is number of database volumes
MOUNTED(DIR) N D S D=DIR I $$TYPE(DIR)=1 S D=$$ROOT(DIR) ;use root
 s D=$$STAT(D) q $s(D<1!(D'<$zu(40,0,41)):0,1:1) ;is directory mounted?
UNMOUNT(DIR) S $ZT="MNTERR1^"_$ZN ;unmount a specific directory
 D ONE^DISMOUNT(DIR) Q 1 ;perform the dismount
MNTERR1 S $ZT="" Q ("Could not dismount '"_DIR_"'")
REMOUNT(DIR) ;remount it (if it was dismounted)
 S $ZT="MNTERR2^"_$ZN N (DIR) D ^ST
 s Status=##Class(SYS.Database).MountDatabase(DIR,0,0)
 i Status'=1 q "Remount of "_DIR_" failed"
 i $$MOUNTED(DIR) q 1
 Q "Could not remount '"_DIR_"'"
MNTERR2 S $ZT="" Q ("Could not remount '"_DIR_"'")
DISMNT(DIR) N X,MNT S MNT=1 DO  Q MNT
 . S X=$$YN("Dismount directory '"_DIR_"' to perform change","Y")
 . I X'="Y" W !,"Modifications discarded.",! S MNT=0 Q  ;by decision
 . S X=$$UNMOUNT(DIR) I 'X D FAIL(X) S MNT=0 Q  ;by error
GetDir(prompt,defdir,exists,quit) ;ask for a directory, allow defaults
GetDirLoop ; Loop until we get something valid or exit
 s $zt="GetDirE"
 n exist,dir,x
 s exist=+$g(exists,1) ; default is to check if exists
 w !,prompt_": "_$s($g(defdir)'="":$g(defdir)_" => ",1:"") r dir s:dir="" dir=$g(defdir)
 i $$STOP(dir) Set quit=1 Q ""
 i $E(dir)="?" Q dir ;pass-on request for elaboration
 q:exist<0 dir ;exist<0 means don't check valid or exists
 s x=$S(exist:$$ChkDirOrSpecEXISTS(dir),1:$$ChkDirVALID(dir)) 
 i x="" W *7,"  "_$s(exist:"Directory '"_dir_"' does not exist",1:"Invalid directory specification '"_dir_"'") G:exist GetDirLoop d  g:x="N" GetDirLoop
 . s x=$$YN("Use this directory anyway","N")
 i x="^" s quit=1 Quit ""
 q dir
GetDirE S $ZT=""
 i $ze["<INTERRUPT>" q ""
 w !,"Error: "_$ZE
 zquit 1 i $ZT'="" G @$ZT
 q ""
Touch(D)
 q
ChkDirVALID(R) S $ZE="",$ZT="ChkBad" q:R[":mirror:" R q $ZU(12,R,1)
ChkDirEXISTS(R) S $ZE="",$ZT="ChkBad" q:R[":mirror:" R q $ZU(12,R,2)
ChkDirOrSpecEXISTS(R) S $ZE="",$ZT="ChkBad" q:R[":mirror:" R q $ZU(12,R,3)
ChkDir(R) N N S $ZE="",$ZT="ChkBad" q:R[":mirror:" R q $ZU(12,R,2)
ChkBad S $ZT="" W !,"<"_$P($P($ZE,"<",2),">")_"> error -- invalid directory"
 Q ""
YN(P,D,t) N R,X S P=$G(P),D=$E($G(D)_"?"),t=$G(t) ;ask Yes/No w/ Prompt,Default
 S D=$S("Yy"[D:"Yes => ","Nn"[D:"No => ",1:"") ;Yes, No or no default
 F  W !,P_"? "_D Read:t R:t Read:'t R DO  I "^YN"[R Q  ;timed or non-timed read
 . S X=R,R=$TR($E(R_D_"?"),"yn","YN") I "^YN"'[R W "  enter Yes or No, please"
 S POP=(R="^") W $E($S(R="N":"No",R="Y":"Yes",1:""),$L(X)+1,3) Q R
STOP(x) S x=$$UC($E(x,1,4)) Q (x["EXIT")!(x["STOP")!(x["QUIT")!(x["HALT")!($E(x)="^")
UC(x) q $zcvt(x,"u")
ED(%L) ; Edit using the familiar old line editor.
 N %IED,%R,%W,%A,%B,%C,%D,%J X ^%("ED") W !?7,"--> "_%L Q %L